# -*- coding: utf-8 -*-
"""Копия блокнота "03_Lab_3.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WvIZWaHi1hxxOtK5gGBLDz9QWsqDvGGB

# Лабораторная работа №3

Данная лабораторная предназначена для ознакомления с основными модулями Python используемыми в анализе данных.

NumPy - модуль предназначенный для работы с многомерными массивами. Почитать можно [здесь](https://pythonworld.ru/numpy)

Matplotlib - пакет модулей предназначенный для визуализации данных. Почитать можно [здесь](https://pythonworld.ru/novosti-mira-python/scientific-graphics-in-python.html)

Pandas - модуль для анализа данных и поддерживающий их табличное представление. Почитать можно [здесь](https://pythonworld.ru/obrabotka-dannyx/pandas-cookbook-1-csv-reading.html)

Для углубленного изучения можно почитать книгу J. VanderPlas Python Data science Handbook

## NumPy

Данный модуль создан для ускорения работы с массивами больших размерностей. Для примера рассмотрим сравнение скорости подсчета суммы случайного ряда при помощи встроенных инструментов и инструментов numpy:
"""

# импортируем модуль и создадим ему короткий псевдоним для удобства обращения к нему
import numpy as np

# импортируем этот модуль для генерации случайных данных
import random

# создадим список длиной 10_000 случайных целых чисел в диапазоне от -10_000 до 10_000
arr = random.sample(range(-10_000, 10_000),k=10_000)

# Подсчитаем время исполнения ячейки при помощи волшебного оператора %%time

# Commented out IPython magic to ensure Python compatibility.
# %timeit sum(arr)

# Подсчитаем теперь преобразованный список в NumPy-массив при помощи np.sum()

arr_2 = np.array(arr)

# Commented out IPython magic to ensure Python compatibility.
# %timeit np.sum(arr_2)

"""Как видно алгоритм подсчет суммы ускоряется почти в 20 раз

NumPy позволяет создавать различного рода матрицы в одно действие:
"""

#создать матрицу размерности 2х2 заполненную нулями
np.zeros((2,2))

#создать матрицу размерности 3х2 заполненную единицами
np.ones((3,2))

# размерность массива можно посмотреть вызвав поле shape у np.array

a = np.array([[1, 2], [3, 4], [5, 6]])

print(a)
print(a.shape)

# len вернет нам вернет размер по первому измерению

print(len(a))

"""### Задание

Найдите в документации numpy функции для создания диагональной матрицы и заполнения матрицы пользовательским числом.

1) Создайте диагональную единичную матрицу размерности 5х5

2) Создайте матрицу размерности 4х4 заполненную тройками
"""

import numpy as np
print(np.eye(5))
print()
print(np.random.randint(low=3, high=4, size=(4, 4)))

"""Массивы можно транспонировать и изменять размерности"""

a = np.array([[1,2],[3,4],[5,6]])
print(a)

print(a.reshape((2,3)))

print(a.T)

# можно так же расплющить массив в одномерный
print(a.flatten())

"""### Задание
Создайте матрицу (любым известным вам способом) размерности 2х3х4 и транспонируйте ее. Попробуйте поменять очередность осей (по сути если представить трехмерную матрицу как куб, то это будет поворотом в пространстве на какой-то из боков) при помощи transpose
"""

import numpy as np
arr = np.random.randint(low=0, high=10, size=(2, 3, 4))
print(arr)
print()

arr2 = np.transpose(arr, (0, 2, 1))
arr3 = np.transpose(arr, (2, 0, 1))
print(arr2)
print()
print(arr3)
print()

"""Массивы можно объединять и добавлять новые оси"""

a = np.array([[1,2],[3,4]])
b = np.array([[5,6]])

print(np.concatenate((a,b)))

print('old matrix')
print(a)
print(a.shape, '\n') # отступим строку

print('new matrix')
b = a[:,:,np.newaxis]
print(b)
print(b.shape)

"""### Задание
Создайте матрицу размерности 3х4 и продублируйте ее так, чтобы ее размерность стала 2х3х4 (понадобится newaxis и concatenate или при помощи squeeze)
"""

import numpy as np
arr = np.random.randint(low=0, high=10, size=(3, 4))
print(arr)
print(arr.shape, '\n')

print('new matrix')
arr2 = arr[np.newaxis, :, :]
arr2 = np.concatenate((arr2, arr2))
print(arr2)
print(arr2.shape)

"""### Операции над матрицами"""

# можно передавать тип данных, к которому требуется привести элементы матрицы, в данном случае float
a = np.array([[1,2],[3,4]], float)
# создадим единичную матрицу (на главной диагонали лежат единицы, все остальные элементы равны нулю)
b = np.eye(2,2)

print(a, '\n')
print(b)

a + b

a - b

"""умножение матриц через операнд * работает как поэлементное умножение"""

a * b

"""матрицу можно домножать на скаляр"""

a * 10

"""и проводить все базовые математические операции со скалярами поэлементно"""

a // 3

"""Для матричного перемножения используется метод dot()"""

# т.к. при умножение на единичную матрицу исходная матрица не меняется
a.dot(b)

"""### Задание

Создайте две матрицы размерности 2х3 и 3х2, перемножьте их
"""

import numpy as np
arr1 = np.random.randint(low=0, high=10, size=(2, 3))
print(arr1)
arr2 = np.random.randint(low=0, high=10, size=(3, 2))
print(arr2)

print(arr1.dot(arr2))

"""К массивам применимы те же операции, что и для списков. Их можно вызывать либо у массива, как метод, либо как функцию из numpy"""

a = np.array([[1,2],[3,4]])

print(a.max())
print(np.max(a))

"""### Задание

Используя возможности numpy (БЕЗ SET) напишите функции, которые принимают заданный массив чисел и возвращают:

1) список уникальных значений

2) кортеж из среднего, максимального и минимального
"""

arr = np.array([1,2,3,4,5,6,7,8,8,8,9,2,3,4,17])

def unique_values(arr):
    return np.unique(arr)

def mean_max_min(arr):
    tup = (arr.mean(), arr.max(), arr.min())
    return tup

print(unique_values(arr))
print(mean_max_min(arr))

"""## Matplotlib

Данная библиотека используется для визуального представления данных (графики, гистограммы, изображения и т.д.)
"""

# импортируем модуль pyplot из пакета matplotlib и дадим общепринятое сокращенное имя plt
from matplotlib import pyplot as plt

"""Рассмотрим для примера отрисовку графика синусоиды"""

# зададим функцию для подсчета значения синуса в точке
def func(x):
    return np.sin(x)

# при помощи linspace создадим массив значений в 1000 шагов от минус 5Пи до плюс 5пи
x = np.linspace(-np.pi * 5, np.pi * 5, 1000)

# зададим параметр пропорций и размеров нашего графика (можете поменять эти значения или вообще удалить эту строчку для интереса)
plt.figure(figsize=(10,3))
# выведем график при помощи функции plot
plt.plot(x, func(x))

# в аргументы передается сначала значения оси Х (можно не задавать), а потом значения по оси Y

# обратите внимание на значения оси Х, которые мы сами не задаем
plt.figure(figsize=(10,3))
plt.plot(func(x))

"""графики можно накладывать друг на друга, менять цвета и тип линии

### Задание
Постройте графики функции x^2+2x-1 и ее производной синего и оранжевого цвета соответственно
"""

from matplotlib import pyplot as plt
import numpy as np

def func(x):
    return pow(x, 2) + 2*x - 1

def func_pr(x):
    return 2*x + 2

# при помощи linspace создадим массив значений в 1000 шагов от минус 5Пи до плюс 5пи
x = np.linspace(-10, 10, 100)
plt.figure(figsize=(2,2))
plt.plot(func(x), color='blue')

x2 = np.linspace(-10, 10, 100)
plt.figure(figsize=(2,2))
plt.plot(func_pr(x2), color='orange')

"""При помощи imshow можно смотреть на тепловые (высотные) карты двумерных данных. Например значения функций двух переменных или изображения."""

arr = np.array([[0,1,0],[1,2,1],[0,1,0]])
plt.imshow(arr)

"""При помощи hist можно отобразить сравнительное графическое представление данных в виде гистограммы.

Указывая количество бинов, мы можем регулировать промежутки на которых будут формироваться столбцы
"""

data = np.array([10,4,26,17,8,45])

plt.hist(data, bins=10)
plt.show()

"""## Pandas

Pandas позволяет обрабатывать и анализировать данные. Можно провести аналогию с Excel.
В данном разделе рассмотрим основные возможности (т.к. библиотека крайне объемная и всю документацию будет физически невозможно сюда уместить)
"""

# Импортируем библотеку pandas и дадим ей сокращенное общепринятое имя pd
import pandas as pd

"""Pandas позволяет считывать табличные данные из файлов в форматах .csv, .xml, .xlsx, .json и т.д.

Скачаем для примера классический датасет с информацией о пассажирах титаника.

Линк на датасет: https://github.com/datasciencedojo/datasets/blob/master/titanic.csv
"""

"""
Загрузим данный датасет.
т.к. он в формате .csv то воспользуемся функцией read_csv()
в которой укажем относительный путь к этому файлу
"""
df = pd.read_csv('lab_3_titanic.csv')

# посмотрим первые 10 записей
df[:10]

# то же самое можно сделать и так
df.head(10)

"""### Задание
Выведите последние 10 строк таблицы
"""

import pandas as pd
df = pd.read_csv('lab_3_titanic.csv')
print(df.tail(10))

"""Как видим, в таблице имеются столбцы, означающие некоторые признаки:
- PassengerId: уникальный идентификатор пассажира в данном наборе данных
- Survived: 0 - погиб, 1 - выжил
- Pclass: класс обслуживания пассажира
- Name: ФИО пассажира (как был записан в документах)
- Sex: пол пассажира
- Age: возраст пассажира
- SibSp: сколько братьев/сестер или супругов на борту
- Parch: сколько детей/родителей на борту
- Ticket: номер билета
- Fare: пассажирский тариф
- Cabin: номер каюты
- Embarked: порт погрузки. C - Cherbourg, Q - Queenstown, S - Southampton
"""

# Получить список столбцов можно при помощи следующей функции
df.columns.to_list()

"""Краткую статистику по всем данным можно получить при помощи метода describe().

Она будет посчитана только для тех признаков, которые представлены численно.
"""

df.describe()

"""Информацию по типам данных и количеству пропусков можно посмотреть при помощи info"""

df.info()

"""Можно применять различные встроенные методы к определенным признакам, обращаясь двумя равнозначными способами:"""

df.Survived.mean()

df['Survived'].mean()

"""### Задание
Выведите максимальный и минимальный возраст пассажиров
"""

print(df.Age.max())
print(df.Age.min())

"""### Задание
Воспользуйтесь встроенным методом value_counts для признака Pclass.
"""

print(df.Pclass.value_counts())

"""Для получения конкретной строки можно использовать индексацию:"""

df.iloc[5]

"""### Задание
Выведите номер билета у 120-го пассажира
"""

print(df.iloc[119].Ticket)

"""Возможно применение фильтрации для данных по какому-либо условию:"""

# посмотрим все данные пассажиров, которые старше 50
df[df.Age > 50]

"""### Задание
Выведите имена всех мужчин в виде списка
"""

print(df[df.Sex == 'male'].Name.tolist())

"""Можно использовать встроенные графики для отображения данных"""

df.Parch.hist()

"""### Задание
Постройте гистограмму на которой будет отображено количество людей в каждом из классов обслуживания
"""

print(df.Pclass.hist())

"""Из датафрейма можно выделять подвыборки и делать их самостоятельными датафреймами:"""

# Выделим в отдельную таблицу всех женщин
df_2 = df[df.Sex == 'female']
df_2

# Выделим датафрейм хранящий только имена и возраст
df_3 = df[['Name', 'Age']]
df_3

"""### Задание
Создайте датафрейм где будут поля Name и Survived для пассажиров без детей
"""

df_2 = df[df.Parch == 0]
df_3 = df_2[['Name', 'Survived']]
print(df_3)

"""Для преобразования значений столбца можно применять метод .apply с указанием в нем функции, применяемой к значению каждой строки. В данном примере применяется анонимная функция (лямбда-функция)."""

df['isAdult'] = df['Age'].apply(lambda x: x > 18)
df

"""### Задание
Посчитайте среднее значение цены билета на корабле. Введите новый столбец, который будет показывать дешевле или дороже средней цены был купленный билет у каждого человека. Можете заполнить поля значениями True/False или строчными представлениями "дешевле"/"дороже"
"""

average_cost = df.Fare.mean()
print(average_cost)
df['Дороже средней цены'] = df['Fare'].apply(lambda x: x > average_cost)
print(df)