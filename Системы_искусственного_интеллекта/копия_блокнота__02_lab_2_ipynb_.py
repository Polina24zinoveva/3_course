# -*- coding: utf-8 -*-
"""Копия блокнота "02_Lab_2.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/111CP5shfgyJCyOmnlFgQYXcazQzUyfFp

# Лабораторная работа №2

Предлагается решить 10 задач на закрепление синтаксиса и наработки навыка решения типовых задач, с которыми далее вы столкнетесь в том или ином виде.

Напоминаю: гуглить - залог успеха.

### Задача 1.

Дан список случайных целых чисел arr.

Реализуйте функцию, которая будет принимать список и возвращать кортеж состояющий из:
1) Максимума

2) Минимума

3) Среднего

4) Медианы
"""

# Здесь ничего менять не надо, это исходные данные с которыми будете работать
import random

# в arr будет записан список из 50 случайных целых чисел в диапазоне от -100 до 100
arr = random.sample(range(-100, 100), 50)

# Убедимся в этом
print(arr)

import random
arr = random.sample(range(-100, 100), 50)

print(arr)


def list_stat(arr):
    arr2 = arr.copy()
    arr2.sort()
    ind_mediana = len(arr2) // 2
    if (len(arr2) % 2 != 0):
        mediana = arr2[ind_mediana]
    else:
        mediana = (arr2[ind_mediana - 1] + arr2[ind_mediana]) / 2
    tup = (max(arr), min(arr), sum(arr)/len(arr), mediana)
    return tup

print(list_stat(arr))

print(list_stat(arr))

"""### Задача 2.

Дан список из предыдущей задачи.

Создайте функцию, которая принимает список и возвращает отсортированный по убыванию список из которого удалены все ОТРИЦАТЕЛЬНЫЕ ЧЕТНЫЕ числа.

Подсказка: можно решить итеративно в лоб, добавляя в новый список требуемые элементы. Либо использовать filter(), про который можно прочесть в документации (потребуется посмотреть еще лямбда-функции).
"""

import random
arr = random.sample(range(-100, 100), 50)

print(arr)

def function(arr):
  arr2 = list(filter(lambda x: (x > 0) or (x % 2 != 0) , arr))
  arr2.sort(reverse=True)
  print(arr2)

function(arr)

"""### Задача 3.

Дана строка.

Создайте функцию, которая принимает строку и возвращает кортеж из количества уникальных слов и длины строки. Регистр не является признаком уникальности слова, т.е. Pump и pump равнозначны.

Подсказка: прочитайте про функцию split(). Обратите внимание, что нужно удалить все знаки препинания.
"""

s = 'On the other hand, we denounce with righteous indignation and \
dislike men who are so beguiled and demoralized by the charms of \
pleasure of the moment, so blinded by desire, that they cannot \
foresee the pain and trouble that are bound to ensue; and equal \
blame belongs to those who fail in their duty through weakness of will, \
which is the same as saying through shrinking from toil and pain.'

s = 'On the other hand, we denounce with righteous indignation and \
dislike men who are so beguiled and demoralized by the charms of \
pleasure of the moment, so blinded by desire, that they cannot \
foresee the pain and trouble that are bound to ensue; and equal \
blame belongs to those who fail in their duty through weakness of will, \
which is the same as saying through shrinking from toil and pain.'

def function(s):
  s = s.lower()
  s = s.replace(",", "").replace(".", "")
  tup = (len(set_s), len(s))
  return tup

print(function(s))

"""### Задача 4

Дана строка из задачи выше.

Создайте функцию, которая принимает строку и считает количество упоминаний каждого слова и возвращает ответ в виде словаря.
Выведите этот словарь.
"""

s = 'On the other hand, we denounce with righteous indignation and \
dislike men who are so beguiled and demoralized by the charms of \
pleasure of the moment, so blinded by desire, that they cannot \
foresee the pain and trouble that are bound to ensue; and equal \
blame belongs to those who fail in their duty through weakness of will, \
which is the same as saying through shrinking from toil and pain.'

def function(s):
  s = s.lower()
  s = s.replace(",", "").replace(".", "")
  arr_s = s.split(" ")
  set_s = set(s.split(" "))
  d = {}
  for s in set_s:
      count = 0
      for i in range(0, len(arr_s)):
          if (s == arr_s[i]):
              count += 1
      d.update({s:count})
  return d

print(function(s))

"""### Задача 5

Дана строка из задачи выше.

Создайте функцию, которая принимает строку и удаляет все слова начинающиеся на t (регистр не имеет значения) и возвращает полученную строку.
"""

s = 'On the other hand, we denounce with righteous indignation and \
dislike men who are so beguiled and demoralized by the charms of \
pleasure of the moment, so blinded by desire, that they cannot \
foresee the pain and trouble that are bound to ensue; and equal \
blame belongs to those who fail in their duty through weakness of will, \
which is the same as saying through shrinking from toil and pain.'

def function(sstr):
  arr_str = sstr.split(" ")
  words_to_delete = []
  for s in arr_str:
    for i in range(0, len(sstr)):
      if (s[0] == 't' or s[0] == 'T'):
        words_to_delete.append(s)

  filtered_str = ' '.join((filter(lambda s: s not in words_to_delete, arr_str)))
  return filtered_str

print(function(s))

"""### Задача 6

Дана строка из задачи выше.

Посчитайте количество глассных и согласных букв. Выведите результат.
"""

s = 'On the other hand, we denounce with righteous indignation and \
dislike men who are so beguiled and demoralized by the charms of \
pleasure of the moment, so blinded by desire, that they cannot \
foresee the pain and trouble that are bound to ensue; and equal \
blame belongs to those who fail in their duty through weakness of will, \
which is the same as saying through shrinking from toil and pain.'

def function(sstr):
  sstr = sstr.lower()
  vowels = ['a', 'e', 'i', 'o', 'u', 'y']
  consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z']
  count_vowels = 0
  count_consonants = 0
  for v in vowels:
    count_vowels += sstr.count(v)
  for c in consonants:
    count_consonants += sstr.count(c)
  print(count_vowels)
  print(count_consonants)

function(s)

"""### Задача 7
Из приложенного файла lab_2.txt считать текст.

Посчитайте количество предложений в нем и выведите.
"""

my_file = open('lab2.txt', 'r')
text = my_file.read()
count = text.count(".")
print(count)

"""### Задача 8
Заданы два вектора.

Напишите функцию которая принимает два списка и возвращает значение их скалярного произведения.
"""

vec_1 = [0, 1, 15]
vec_2 = [2, 4, 3]

vec_1 = [0, 1, 15]
vec_2 = [2, 4, 3]

def function(vec_1, vec_2):
  if len(vec_1) != len(vec_2):
    return "Разные длины векторов"

  result = 0
  for i in range(0, len(vec_1)):
    result += vec_1[i] * vec_2[i]
  return result

print(function(vec_1, vec_2))

"""### *Задача 9

Дан список состоящий из пар натуральных чисел и одного непарного числа. Найти это число и вывести.

Подсказка: можно и нужно использовать оператор XOR. Другие варианты тоже сойдут.
"""

list_with_forever_alone = [2, 1, 3, 3, 1, 5, 2, 6, 9, 8, 8, 9, 2, 6, 5, 3, 2]

list_with_forever_alone = [2, 1, 3, 3, 1, 5, 2, 6, 9, 8, 8, 9, 2, 6, 5, 3, 2]

my_stack = []

for i in range(0, len(list_with_forever_alone)):
  if list_with_forever_alone[i] in my_stack:
    my_stack.remove(list_with_forever_alone[i])
  else:
    my_stack.append(list_with_forever_alone[i])
print("Непарное число:", my_stack)

"""### *Задача 10

Дан список натуральных чисел. Вывести все числа, являющиеся степенью двойки.
"""

list_with_power_two = [24, 13, 25, 32, 17, 8, 2, 14, 0, 16, 1]

list_with_power_two = [24, 13, 25, 32, 17, 8, 2, 14, 0, 16, 1]
stepen = 0
max_stepen = pow(max(list_with_power_two), 1/2)
while stepen <= max_stepen:
    a = pow(2, stepen)
    if a in list_with_power_two:
        for i in range(0, list_with_power_two.count(a)):
            print(pow(2, stepen))
    stepen += 1