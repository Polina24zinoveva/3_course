{"cells":[{"cell_type":"markdown","id":"a83d3451","metadata":{"id":"a83d3451"},"source":["# Лабораторная работа №3"]},{"cell_type":"markdown","id":"c4626d84","metadata":{"id":"c4626d84"},"source":["Данная лабораторная предназначена для ознакомления с основными модулями Python используемыми в анализе данных.\n","\n","NumPy - модуль предназначенный для работы с многомерными массивами. Почитать можно [здесь](https://pythonworld.ru/numpy)\n","\n","Matplotlib - пакет модулей предназначенный для визуализации данных. Почитать можно [здесь](https://pythonworld.ru/novosti-mira-python/scientific-graphics-in-python.html)\n","\n","Pandas - модуль для анализа данных и поддерживающий их табличное представление. Почитать можно [здесь](https://pythonworld.ru/obrabotka-dannyx/pandas-cookbook-1-csv-reading.html)\n","\n","Для углубленного изучения можно почитать книгу J. VanderPlas Python Data science Handbook\n"]},{"cell_type":"markdown","id":"044a3a41","metadata":{"id":"044a3a41"},"source":["## NumPy\n","\n","Данный модуль создан для ускорения работы с массивами больших размерностей. Для примера рассмотрим сравнение скорости подсчета суммы случайного ряда при помощи встроенных инструментов и инструментов numpy:"]},{"cell_type":"code","execution_count":null,"id":"fb97f953","metadata":{"id":"fb97f953"},"outputs":[],"source":["# импортируем модуль и создадим ему короткий псевдоним для удобства обращения к нему\n","import numpy as np\n","\n","# импортируем этот модуль для генерации случайных данных\n","import random"]},{"cell_type":"code","execution_count":null,"id":"4d629828","metadata":{"id":"4d629828"},"outputs":[],"source":["# создадим список длиной 10_000 случайных целых чисел в диапазоне от -10_000 до 10_000\n","arr = random.sample(range(-10_000, 10_000),k=10_000)"]},{"cell_type":"code","execution_count":null,"id":"0701ca1a","metadata":{"id":"0701ca1a"},"outputs":[],"source":["# Подсчитаем время исполнения ячейки при помощи волшебного оператора %%time"]},{"cell_type":"code","execution_count":null,"id":"062a85f3","metadata":{"id":"062a85f3","outputId":"24115cd6-5f5c-4772-d15a-01aa584ce2c9"},"outputs":[{"name":"stdout","output_type":"stream","text":["101 µs ± 556 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n"]}],"source":["%timeit sum(arr)"]},{"cell_type":"code","execution_count":null,"id":"86298baf","metadata":{"id":"86298baf"},"outputs":[],"source":["# Подсчитаем теперь преобразованный список в NumPy-массив при помощи np.sum()"]},{"cell_type":"code","execution_count":null,"id":"ee277123","metadata":{"id":"ee277123"},"outputs":[],"source":["arr_2 = np.array(arr)"]},{"cell_type":"code","execution_count":null,"id":"e58e9290","metadata":{"id":"e58e9290","outputId":"6106f3e7-a0be-4d01-d3e2-ee2385f9a610"},"outputs":[{"name":"stdout","output_type":"stream","text":["5.18 µs ± 17.3 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n"]}],"source":["%timeit np.sum(arr_2)"]},{"cell_type":"markdown","id":"48501958","metadata":{"id":"48501958"},"source":["Как видно алгоритм подсчет суммы ускоряется почти в 20 раз"]},{"cell_type":"markdown","id":"06dd75f1","metadata":{"id":"06dd75f1"},"source":["NumPy позволяет создавать различного рода матрицы в одно действие:"]},{"cell_type":"code","execution_count":null,"id":"9930b6c6","metadata":{"id":"9930b6c6","outputId":"e7c68885-a8dd-4ab0-9821-641bfc06940e"},"outputs":[{"data":{"text/plain":["array([[0., 0.],\n","       [0., 0.]])"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["#создать матрицу размерности 2х2 заполненную нулями\n","np.zeros((2,2))"]},{"cell_type":"code","execution_count":null,"id":"55ed68ec","metadata":{"id":"55ed68ec","outputId":"51a86726-c651-407f-a216-ded5df4e45db"},"outputs":[{"data":{"text/plain":["array([[1., 1.],\n","       [1., 1.],\n","       [1., 1.]])"]},"execution_count":9,"metadata":{},"output_type":"execute_result"}],"source":["#создать матрицу размерности 3х2 заполненную единицами\n","np.ones((3,2))"]},{"cell_type":"code","execution_count":null,"id":"5e86bd15","metadata":{"id":"5e86bd15","outputId":"aad2d5c3-fa65-4702-b8b2-db999ce3b1a0"},"outputs":[{"name":"stdout","output_type":"stream","text":["[[1 2]\n"," [3 4]\n"," [5 6]]\n","(3, 2)\n"]}],"source":["# размерность массива можно посмотреть вызвав поле shape у np.array\n","\n","a = np.array([[1, 2], [3, 4], [5, 6]])\n","\n","print(a)\n","print(a.shape)"]},{"cell_type":"code","execution_count":null,"id":"166f7114","metadata":{"id":"166f7114","outputId":"0f83143c-0b7d-4bee-ba83-1376752f543a"},"outputs":[{"name":"stdout","output_type":"stream","text":["3\n"]}],"source":["# len вернет нам вернет размер по первому измерению\n","\n","print(len(a))"]},{"cell_type":"markdown","id":"885f11a7","metadata":{"id":"885f11a7"},"source":["### Задание\n","\n","Найдите в документации numpy функции для создания диагональной матрицы и заполнения матрицы пользовательским числом.\n","\n","1) Создайте диагональную единичную матрицу размерности 5х5\n","\n","2) Создайте матрицу размерности 4х4 заполненную тройками"]},{"cell_type":"code","execution_count":null,"id":"6b85793e","metadata":{"id":"6b85793e","executionInfo":{"status":"ok","timestamp":1695208222684,"user_tz":-240,"elapsed":9,"user":{"displayName":"","userId":""}},"outputId":"e6cc0e17-5578-4050-bd3d-a2ed1ad43f72","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["[[1. 0. 0. 0. 0.]\n"," [0. 1. 0. 0. 0.]\n"," [0. 0. 1. 0. 0.]\n"," [0. 0. 0. 1. 0.]\n"," [0. 0. 0. 0. 1.]]\n","\n","[[3 3 3 3]\n"," [3 3 3 3]\n"," [3 3 3 3]\n"," [3 3 3 3]]\n"]}],"source":["import numpy as np\n","print(np.eye(5))\n","print()\n","print(np.random.randint(low=3, high=4, size=(4, 4)))"]},{"cell_type":"markdown","id":"d8cd415d","metadata":{"id":"d8cd415d"},"source":["Массивы можно транспонировать и изменять размерности"]},{"cell_type":"code","execution_count":null,"id":"8c9ea473","metadata":{"id":"8c9ea473","outputId":"202e9326-27c2-4b0b-f67f-2495baaf2b69"},"outputs":[{"name":"stdout","output_type":"stream","text":["[[1 2]\n"," [3 4]\n"," [5 6]]\n"]}],"source":["a = np.array([[1,2],[3,4],[5,6]])\n","print(a)"]},{"cell_type":"code","execution_count":null,"id":"058cd289","metadata":{"id":"058cd289","outputId":"50ff66d1-df89-4a0b-a98f-ccc17197a3a1"},"outputs":[{"name":"stdout","output_type":"stream","text":["[[1 2 3]\n"," [4 5 6]]\n"]}],"source":["print(a.reshape((2,3)))"]},{"cell_type":"code","execution_count":null,"id":"0c2bd57d","metadata":{"id":"0c2bd57d","outputId":"07fc5eb9-7c2c-473b-c3f9-0e3f578d8c65"},"outputs":[{"name":"stdout","output_type":"stream","text":["[[1 3 5]\n"," [2 4 6]]\n"]}],"source":["print(a.T)"]},{"cell_type":"code","execution_count":null,"id":"8a51aa3b","metadata":{"id":"8a51aa3b"},"outputs":[],"source":["# можно так же расплющить массив в одномерный\n","print(a.flatten())"]},{"cell_type":"markdown","id":"5f356c97","metadata":{"id":"5f356c97"},"source":["### Задание\n","Создайте матрицу (любым известным вам способом) размерности 2х3х4 и транспонируйте ее. Попробуйте поменять очередность осей (по сути если представить трехмерную матрицу как куб, то это будет поворотом в пространстве на какой-то из боков) при помощи transpose"]},{"cell_type":"code","execution_count":null,"id":"66d95b4c","metadata":{"id":"66d95b4c","executionInfo":{"status":"ok","timestamp":1695208261621,"user_tz":-240,"elapsed":290,"user":{"displayName":"","userId":""}},"outputId":"45d52cbe-8fea-43b3-f7db-2e6b3d23dd9d","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["[[[0 1 1 5]\n","  [5 9 6 2]\n","  [2 8 3 6]]\n","\n"," [[4 2 6 9]\n","  [6 3 6 2]\n","  [5 8 9 6]]]\n","\n","[[[0 5 2]\n","  [1 9 8]\n","  [1 6 3]\n","  [5 2 6]]\n","\n"," [[4 6 5]\n","  [2 3 8]\n","  [6 6 9]\n","  [9 2 6]]]\n","\n","[[[0 5 2]\n","  [4 6 5]]\n","\n"," [[1 9 8]\n","  [2 3 8]]\n","\n"," [[1 6 3]\n","  [6 6 9]]\n","\n"," [[5 2 6]\n","  [9 2 6]]]\n","\n"]}],"source":["import numpy as np\n","arr = np.random.randint(low=0, high=10, size=(2, 3, 4))\n","print(arr)\n","print()\n","\n","arr2 = np.transpose(arr, (0, 2, 1))\n","arr3 = np.transpose(arr, (2, 0, 1))\n","print(arr2)\n","print()\n","print(arr3)\n","print()"]},{"cell_type":"markdown","id":"3e43e5ea","metadata":{"id":"3e43e5ea"},"source":["Массивы можно объединять и добавлять новые оси"]},{"cell_type":"code","execution_count":null,"id":"fff1f7a1","metadata":{"id":"fff1f7a1"},"outputs":[],"source":["a = np.array([[1,2],[3,4]])\n","b = np.array([[5,6]])"]},{"cell_type":"code","execution_count":null,"id":"7ae37c0a","metadata":{"id":"7ae37c0a","outputId":"b662f178-364f-408d-f9ed-7dcc18ff1f1b"},"outputs":[{"name":"stdout","output_type":"stream","text":["[[1 2]\n"," [3 4]\n"," [5 6]]\n"]}],"source":["print(np.concatenate((a,b)))"]},{"cell_type":"code","execution_count":null,"id":"4aafd0ee","metadata":{"id":"4aafd0ee","outputId":"45528c7f-d374-4f19-c22a-08698f3b957c"},"outputs":[{"name":"stdout","output_type":"stream","text":["old matrix\n","[[1 2]\n"," [3 4]]\n","(2, 2) \n","\n","new matrix\n","[[[1]\n","  [2]]\n","\n"," [[3]\n","  [4]]]\n","(2, 2, 1)\n"]}],"source":["print('old matrix')\n","print(a)\n","print(a.shape, '\\n') # отступим строку\n","\n","print('new matrix')\n","b = a[:,:,np.newaxis]\n","print(b)\n","print(b.shape)"]},{"cell_type":"markdown","id":"70b9a5c9","metadata":{"id":"70b9a5c9"},"source":["### Задание\n","Создайте матрицу размерности 3х4 и продублируйте ее так, чтобы ее размерность стала 2х3х4 (понадобится newaxis и concatenate или при помощи squeeze)"]},{"cell_type":"code","execution_count":null,"id":"90c9b02e","metadata":{"id":"90c9b02e","executionInfo":{"status":"ok","timestamp":1695208637299,"user_tz":-240,"elapsed":282,"user":{"displayName":"","userId":""}},"outputId":"23a2c93d-1c7f-4a1d-933a-0078b4d0b29f","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["[[2 0 6 3]\n"," [2 0 6 8]\n"," [5 8 3 8]]\n","(3, 4) \n","\n","new matrix\n","[[[2 0 6 3]\n","  [2 0 6 8]\n","  [5 8 3 8]]\n","\n"," [[2 0 6 3]\n","  [2 0 6 8]\n","  [5 8 3 8]]]\n","(2, 3, 4)\n"]}],"source":["import numpy as np\n","arr = np.random.randint(low=0, high=10, size=(3, 4))\n","print(arr)\n","print(arr.shape, '\\n')\n","\n","print('new matrix')\n","arr2 = arr[np.newaxis, :, :]\n","arr2 = np.concatenate((arr2, arr2))\n","print(arr2)\n","print(arr2.shape)"]},{"cell_type":"markdown","id":"4a2fc50b","metadata":{"id":"4a2fc50b"},"source":["### Операции над матрицами"]},{"cell_type":"code","execution_count":null,"id":"b799f6fb","metadata":{"id":"b799f6fb","outputId":"3975c922-ec9a-4e28-bd4f-31a463d89aa7"},"outputs":[{"name":"stdout","output_type":"stream","text":["[[1. 2.]\n"," [3. 4.]] \n","\n","[[1. 0.]\n"," [0. 1.]]\n"]}],"source":["# можно передавать тип данных, к которому требуется привести элементы матрицы, в данном случае float\n","a = np.array([[1,2],[3,4]], float)\n","# создадим единичную матрицу (на главной диагонали лежат единицы, все остальные элементы равны нулю)\n","b = np.eye(2,2)\n","\n","print(a, '\\n')\n","print(b)"]},{"cell_type":"code","execution_count":null,"id":"9b91dd3b","metadata":{"id":"9b91dd3b","outputId":"eceee175-c5d6-4b38-d993-d53eb1b3dd18"},"outputs":[{"data":{"text/plain":["array([[2., 2.],\n","       [3., 5.]])"]},"execution_count":20,"metadata":{},"output_type":"execute_result"}],"source":["a + b"]},{"cell_type":"code","execution_count":null,"id":"c173c930","metadata":{"id":"c173c930","outputId":"1136206b-81ad-40eb-8071-52e92d852bc6"},"outputs":[{"data":{"text/plain":["array([[0., 2.],\n","       [3., 3.]])"]},"execution_count":21,"metadata":{},"output_type":"execute_result"}],"source":["a - b"]},{"cell_type":"markdown","id":"aab1e5d7","metadata":{"id":"aab1e5d7"},"source":["умножение матриц через операнд * работает как поэлементное умножение"]},{"cell_type":"code","execution_count":null,"id":"a4b2adeb","metadata":{"id":"a4b2adeb","outputId":"3eff0406-244a-4e43-bf99-353f22f7fccb"},"outputs":[{"data":{"text/plain":["array([[1., 0.],\n","       [0., 4.]])"]},"execution_count":22,"metadata":{},"output_type":"execute_result"}],"source":["a * b"]},{"cell_type":"markdown","id":"9a1aaf78","metadata":{"id":"9a1aaf78"},"source":["матрицу можно домножать на скаляр"]},{"cell_type":"code","execution_count":null,"id":"d080e165","metadata":{"id":"d080e165","outputId":"8ccd990f-ffd4-4dad-adc2-39214137d63a"},"outputs":[{"data":{"text/plain":["array([[10., 20.],\n","       [30., 40.]])"]},"execution_count":23,"metadata":{},"output_type":"execute_result"}],"source":["a * 10"]},{"cell_type":"markdown","id":"642171cc","metadata":{"id":"642171cc"},"source":["и проводить все базовые математические операции со скалярами поэлементно"]},{"cell_type":"code","execution_count":null,"id":"caf040de","metadata":{"id":"caf040de","outputId":"036850d8-e259-4a45-d1d5-5543c9b4a0be"},"outputs":[{"data":{"text/plain":["array([[0., 0.],\n","       [1., 1.]])"]},"execution_count":24,"metadata":{},"output_type":"execute_result"}],"source":["a // 3"]},{"cell_type":"markdown","id":"7ca21353","metadata":{"id":"7ca21353"},"source":["Для матричного перемножения используется метод dot()"]},{"cell_type":"code","execution_count":null,"id":"97af84bd","metadata":{"id":"97af84bd","outputId":"1bac2e3b-1031-41d7-8f1d-dfb80b51b6cc"},"outputs":[{"data":{"text/plain":["array([[1., 2.],\n","       [3., 4.]])"]},"execution_count":25,"metadata":{},"output_type":"execute_result"}],"source":["# т.к. при умножение на единичную матрицу исходная матрица не меняется\n","a.dot(b)"]},{"cell_type":"markdown","id":"faf8a0f2","metadata":{"id":"faf8a0f2"},"source":["### Задание\n","\n","Создайте две матрицы размерности 2х3 и 3х2, перемножьте их"]},{"cell_type":"code","execution_count":null,"id":"c2ad3bc9","metadata":{"id":"c2ad3bc9","executionInfo":{"status":"ok","timestamp":1695208789415,"user_tz":-240,"elapsed":283,"user":{"displayName":"","userId":""}},"outputId":"b4e6d45e-be68-4a49-cf8e-25cfc29383a2","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["[[6 6 7]\n"," [3 6 1]]\n","[[7 9]\n"," [5 2]\n"," [3 9]]\n","[[ 93 129]\n"," [ 54  48]]\n"]}],"source":["import numpy as np\n","arr1 = np.random.randint(low=0, high=10, size=(2, 3))\n","print(arr1)\n","arr2 = np.random.randint(low=0, high=10, size=(3, 2))\n","print(arr2)\n","\n","print(arr1.dot(arr2))"]},{"cell_type":"markdown","id":"71bc90d2","metadata":{"id":"71bc90d2"},"source":["К массивам применимы те же операции, что и для списков. Их можно вызывать либо у массива, как метод, либо как функцию из numpy"]},{"cell_type":"code","execution_count":null,"id":"ef0317fc","metadata":{"id":"ef0317fc","outputId":"cb564b23-593a-4c51-968c-62e8395ce6f0"},"outputs":[{"name":"stdout","output_type":"stream","text":["4\n","4\n"]}],"source":["a = np.array([[1,2],[3,4]])\n","\n","print(a.max())\n","print(np.max(a))"]},{"cell_type":"markdown","id":"448de690","metadata":{"id":"448de690"},"source":["### Задание\n","\n","Используя возможности numpy (БЕЗ SET) напишите функции, которые принимают заданный массив чисел и возвращают:\n","\n","1) список уникальных значений\n","\n","2) кортеж из среднего, максимального и минимального"]},{"cell_type":"code","execution_count":null,"id":"dff1fd72","metadata":{"id":"dff1fd72","executionInfo":{"status":"ok","timestamp":1695209409137,"user_tz":-240,"elapsed":22,"user":{"displayName":"","userId":""}},"outputId":"8e77295c-1aa2-42da-c648-32ae5dbfc780","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["[ 1  2  3  4  5  6  7  8  9 17]\n","(5.8, 17, 1)\n"]}],"source":["arr = np.array([1,2,3,4,5,6,7,8,8,8,9,2,3,4,17])\n","\n","def unique_values(arr):\n","    return np.unique(arr)\n","\n","def mean_max_min(arr):\n","    tup = (arr.mean(), arr.max(), arr.min())\n","    return tup\n","\n","print(unique_values(arr))\n","print(mean_max_min(arr))"]},{"cell_type":"markdown","id":"faf2eea4","metadata":{"id":"faf2eea4"},"source":["## Matplotlib"]},{"cell_type":"markdown","id":"bc5e0963","metadata":{"id":"bc5e0963"},"source":["Данная библиотека используется для визуального представления данных (графики, гистограммы, изображения и т.д.)"]},{"cell_type":"code","execution_count":null,"id":"2bd5b586","metadata":{"id":"2bd5b586"},"outputs":[],"source":["# импортируем модуль pyplot из пакета matplotlib и дадим общепринятое сокращенное имя plt\n","from matplotlib import pyplot as plt"]},{"cell_type":"markdown","id":"225c8dee","metadata":{"id":"225c8dee"},"source":["Рассмотрим для примера отрисовку графика синусоиды"]},{"cell_type":"code","execution_count":null,"id":"1bf1604a","metadata":{"id":"1bf1604a","outputId":"86a41841-f24f-4400-8e14-fa7e37050bf7"},"outputs":[{"data":{"text/plain":["[<matplotlib.lines.Line2D at 0x169302e1cd0>]"]},"execution_count":30,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 720x216 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["# зададим функцию для подсчета значения синуса в точке\n","def func(x):\n","    return np.sin(x)\n","\n","# при помощи linspace создадим массив значений в 1000 шагов от минус 5Пи до плюс 5пи\n","x = np.linspace(-np.pi * 5, np.pi * 5, 1000)\n","\n","# зададим параметр пропорций и размеров нашего графика (можете поменять эти значения или вообще удалить эту строчку для интереса)\n","plt.figure(figsize=(10,3))\n","# выведем график при помощи функции plot\n","plt.plot(x, func(x))"]},{"cell_type":"code","execution_count":null,"id":"4ab380ee","metadata":{"id":"4ab380ee","outputId":"b90c823d-dddc-4ed7-e511-330cac1e6c3c"},"outputs":[{"data":{"text/plain":["[<matplotlib.lines.Line2D at 0x169303e0850>]"]},"execution_count":31,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 720x216 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["# в аргументы передается сначала значения оси Х (можно не задавать), а потом значения по оси Y\n","\n","# обратите внимание на значения оси Х, которые мы сами не задаем\n","plt.figure(figsize=(10,3))\n","plt.plot(func(x))"]},{"cell_type":"markdown","id":"4e3a173a","metadata":{"id":"4e3a173a"},"source":["графики можно накладывать друг на друга, менять цвета и тип линии"]},{"cell_type":"markdown","id":"2e7a25d0","metadata":{"id":"2e7a25d0"},"source":["### Задание\n","Постройте графики функции x^2+2x-1 и ее производной синего и оранжевого цвета соответственно"]},{"cell_type":"code","execution_count":16,"id":"edf87e95","metadata":{"id":"edf87e95","executionInfo":{"status":"ok","timestamp":1695463583356,"user_tz":-240,"elapsed":2782,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"73fbd8dd-b7d9-4402-a89c-38cbf47e5900","colab":{"base_uri":"https://localhost:8080/","height":428}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7facbe89ec50>]"]},"metadata":{},"execution_count":16},{"output_type":"display_data","data":{"text/plain":["<Figure size 200x200 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 200x200 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["from matplotlib import pyplot as plt\n","import numpy as np\n","\n","def func(x):\n","    return pow(x, 2) + 2*x - 1\n","\n","def func_pr(x):\n","    return 2*x + 2\n","\n","# при помощи linspace создадим массив значений в 1000 шагов от минус 5Пи до плюс 5пи\n","x = np.linspace(-10, 10, 100)\n","plt.figure(figsize=(2,2))\n","plt.plot(func(x), color='blue')\n","\n","x2 = np.linspace(-10, 10, 100)\n","plt.figure(figsize=(2,2))\n","plt.plot(func_pr(x2), color='orange')"]},{"cell_type":"markdown","id":"6183ff76","metadata":{"id":"6183ff76"},"source":["При помощи imshow можно смотреть на тепловые (высотные) карты двумерных данных. Например значения функций двух переменных или изображения."]},{"cell_type":"code","execution_count":null,"id":"fd9bad72","metadata":{"id":"fd9bad72","outputId":"702fb183-7448-47b0-b3f0-c528ddf37119"},"outputs":[{"data":{"text/plain":["<matplotlib.image.AxesImage at 0x169304b67c0>"]},"execution_count":33,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["arr = np.array([[0,1,0],[1,2,1],[0,1,0]])\n","plt.imshow(arr)"]},{"cell_type":"markdown","id":"420a9abe","metadata":{"id":"420a9abe"},"source":["При помощи hist можно отобразить сравнительное графическое представление данных в виде гистограммы.\n","\n","Указывая количество бинов, мы можем регулировать промежутки на которых будут формироваться столбцы"]},{"cell_type":"code","execution_count":null,"id":"f2c4d922","metadata":{"id":"f2c4d922","outputId":"89ccbc49-eb38-4b93-95d3-308c0dd4b6d1"},"outputs":[{"data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["data = np.array([10,4,26,17,8,45])\n","\n","plt.hist(data, bins=10)\n","plt.show()"]},{"cell_type":"markdown","id":"913b220c","metadata":{"id":"913b220c"},"source":["## Pandas"]},{"cell_type":"markdown","id":"af08b78f","metadata":{"id":"af08b78f"},"source":["Pandas позволяет обрабатывать и анализировать данные. Можно провести аналогию с Excel.\n","В данном разделе рассмотрим основные возможности (т.к. библиотека крайне объемная и всю документацию будет физически невозможно сюда уместить)"]},{"cell_type":"code","execution_count":null,"id":"7ebddb89","metadata":{"id":"7ebddb89"},"outputs":[],"source":["# Импортируем библотеку pandas и дадим ей сокращенное общепринятое имя pd\n","import pandas as pd"]},{"cell_type":"markdown","id":"e4199517","metadata":{"id":"e4199517"},"source":["Pandas позволяет считывать табличные данные из файлов в форматах .csv, .xml, .xlsx, .json и т.д.\n","\n","Скачаем для примера классический датасет с информацией о пассажирах титаника.\n","\n","Линк на датасет: https://github.com/datasciencedojo/datasets/blob/master/titanic.csv"]},{"cell_type":"code","execution_count":null,"id":"bbf38d57","metadata":{"id":"bbf38d57"},"outputs":[],"source":["\"\"\"\n","Загрузим данный датасет.\n","т.к. он в формате .csv то воспользуемся функцией read_csv()\n","в которой укажем относительный путь к этому файлу\n","\"\"\"\n","df = pd.read_csv('lab_3_titanic.csv')"]},{"cell_type":"code","execution_count":null,"id":"268d6ec7","metadata":{"id":"268d6ec7","outputId":"4f56ab00-e16a-4c5e-9822-2d8e500c2879"},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>373450</td>\n","      <td>8.0500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Moran, Mr. James</td>\n","      <td>male</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>330877</td>\n","      <td>8.4583</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>7</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>McCarthy, Mr. Timothy J</td>\n","      <td>male</td>\n","      <td>54.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>17463</td>\n","      <td>51.8625</td>\n","      <td>E46</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Palsson, Master. Gosta Leonard</td>\n","      <td>male</td>\n","      <td>2.0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>349909</td>\n","      <td>21.0750</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>9</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n","      <td>female</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>347742</td>\n","      <td>11.1333</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>10</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n","      <td>female</td>\n","      <td>14.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>237736</td>\n","      <td>30.0708</td>\n","      <td>NaN</td>\n","      <td>C</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Survived  Pclass  \\\n","0            1         0       3   \n","1            2         1       1   \n","2            3         1       3   \n","3            4         1       1   \n","4            5         0       3   \n","5            6         0       3   \n","6            7         0       1   \n","7            8         0       3   \n","8            9         1       3   \n","9           10         1       2   \n","\n","                                                Name     Sex   Age  SibSp  \\\n","0                            Braund, Mr. Owen Harris    male  22.0      1   \n","1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n","2                             Heikkinen, Miss. Laina  female  26.0      0   \n","3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n","4                           Allen, Mr. William Henry    male  35.0      0   \n","5                                   Moran, Mr. James    male   NaN      0   \n","6                            McCarthy, Mr. Timothy J    male  54.0      0   \n","7                     Palsson, Master. Gosta Leonard    male   2.0      3   \n","8  Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)  female  27.0      0   \n","9                Nasser, Mrs. Nicholas (Adele Achem)  female  14.0      1   \n","\n","   Parch            Ticket     Fare Cabin Embarked  \n","0      0         A/5 21171   7.2500   NaN        S  \n","1      0          PC 17599  71.2833   C85        C  \n","2      0  STON/O2. 3101282   7.9250   NaN        S  \n","3      0            113803  53.1000  C123        S  \n","4      0            373450   8.0500   NaN        S  \n","5      0            330877   8.4583   NaN        Q  \n","6      0             17463  51.8625   E46        S  \n","7      1            349909  21.0750   NaN        S  \n","8      2            347742  11.1333   NaN        S  \n","9      0            237736  30.0708   NaN        C  "]},"execution_count":37,"metadata":{},"output_type":"execute_result"}],"source":["# посмотрим первые 10 записей\n","df[:10]"]},{"cell_type":"code","execution_count":null,"id":"044a069c","metadata":{"id":"044a069c","outputId":"079f13cb-2363-4979-f158-60a71b780989"},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>373450</td>\n","      <td>8.0500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Moran, Mr. James</td>\n","      <td>male</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>330877</td>\n","      <td>8.4583</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>7</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>McCarthy, Mr. Timothy J</td>\n","      <td>male</td>\n","      <td>54.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>17463</td>\n","      <td>51.8625</td>\n","      <td>E46</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Palsson, Master. Gosta Leonard</td>\n","      <td>male</td>\n","      <td>2.0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>349909</td>\n","      <td>21.0750</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>9</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n","      <td>female</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>347742</td>\n","      <td>11.1333</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>10</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n","      <td>female</td>\n","      <td>14.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>237736</td>\n","      <td>30.0708</td>\n","      <td>NaN</td>\n","      <td>C</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Survived  Pclass  \\\n","0            1         0       3   \n","1            2         1       1   \n","2            3         1       3   \n","3            4         1       1   \n","4            5         0       3   \n","5            6         0       3   \n","6            7         0       1   \n","7            8         0       3   \n","8            9         1       3   \n","9           10         1       2   \n","\n","                                                Name     Sex   Age  SibSp  \\\n","0                            Braund, Mr. Owen Harris    male  22.0      1   \n","1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n","2                             Heikkinen, Miss. Laina  female  26.0      0   \n","3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n","4                           Allen, Mr. William Henry    male  35.0      0   \n","5                                   Moran, Mr. James    male   NaN      0   \n","6                            McCarthy, Mr. Timothy J    male  54.0      0   \n","7                     Palsson, Master. Gosta Leonard    male   2.0      3   \n","8  Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)  female  27.0      0   \n","9                Nasser, Mrs. Nicholas (Adele Achem)  female  14.0      1   \n","\n","   Parch            Ticket     Fare Cabin Embarked  \n","0      0         A/5 21171   7.2500   NaN        S  \n","1      0          PC 17599  71.2833   C85        C  \n","2      0  STON/O2. 3101282   7.9250   NaN        S  \n","3      0            113803  53.1000  C123        S  \n","4      0            373450   8.0500   NaN        S  \n","5      0            330877   8.4583   NaN        Q  \n","6      0             17463  51.8625   E46        S  \n","7      1            349909  21.0750   NaN        S  \n","8      2            347742  11.1333   NaN        S  \n","9      0            237736  30.0708   NaN        C  "]},"execution_count":38,"metadata":{},"output_type":"execute_result"}],"source":["# то же самое можно сделать и так\n","df.head(10)"]},{"cell_type":"markdown","id":"09d489ac","metadata":{"id":"09d489ac"},"source":["### Задание\n","Выведите последние 10 строк таблицы"]},{"cell_type":"code","execution_count":1,"id":"beb0df55","metadata":{"id":"beb0df55","executionInfo":{"status":"ok","timestamp":1695460798846,"user_tz":-240,"elapsed":824,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"1b1a29aa-53de-4216-d0e4-ce3e3485fba4"},"outputs":[{"output_type":"stream","name":"stdout","text":["     PassengerId  Survived  Pclass                                      Name  \\\n","881          882         0       3                        Markun, Mr. Johann   \n","882          883         0       3              Dahlberg, Miss. Gerda Ulrika   \n","883          884         0       2             Banfield, Mr. Frederick James   \n","884          885         0       3                    Sutehall, Mr. Henry Jr   \n","885          886         0       3      Rice, Mrs. William (Margaret Norton)   \n","886          887         0       2                     Montvila, Rev. Juozas   \n","887          888         1       1              Graham, Miss. Margaret Edith   \n","888          889         0       3  Johnston, Miss. Catherine Helen \"Carrie\"   \n","889          890         1       1                     Behr, Mr. Karl Howell   \n","890          891         0       3                       Dooley, Mr. Patrick   \n","\n","        Sex   Age  SibSp  Parch            Ticket     Fare Cabin Embarked  \n","881    male  33.0      0      0            349257   7.8958   NaN        S  \n","882  female  22.0      0      0              7552  10.5167   NaN        S  \n","883    male  28.0      0      0  C.A./SOTON 34068  10.5000   NaN        S  \n","884    male  25.0      0      0   SOTON/OQ 392076   7.0500   NaN        S  \n","885  female  39.0      0      5            382652  29.1250   NaN        Q  \n","886    male  27.0      0      0            211536  13.0000   NaN        S  \n","887  female  19.0      0      0            112053  30.0000   B42        S  \n","888  female   NaN      1      2        W./C. 6607  23.4500   NaN        S  \n","889    male  26.0      0      0            111369  30.0000  C148        C  \n","890    male  32.0      0      0            370376   7.7500   NaN        Q  \n"]}],"source":["import pandas as pd\n","df = pd.read_csv('lab_3_titanic.csv')\n","print(df.tail(10))"]},{"cell_type":"markdown","id":"ca5614f8","metadata":{"id":"ca5614f8"},"source":["Как видим, в таблице имеются столбцы, означающие некоторые признаки:\n","- PassengerId: уникальный идентификатор пассажира в данном наборе данных\n","- Survived: 0 - погиб, 1 - выжил\n","- Pclass: класс обслуживания пассажира\n","- Name: ФИО пассажира (как был записан в документах)\n","- Sex: пол пассажира\n","- Age: возраст пассажира\n","- SibSp: сколько братьев/сестер или супругов на борту\n","- Parch: сколько детей/родителей на борту\n","- Ticket: номер билета\n","- Fare: пассажирский тариф\n","- Cabin: номер каюты\n","- Embarked: порт погрузки. C - Cherbourg, Q - Queenstown, S - Southampton"]},{"cell_type":"code","execution_count":null,"id":"14180f18","metadata":{"id":"14180f18","outputId":"4bc137c2-abc5-45c7-f661-a21274b73ff9"},"outputs":[{"data":{"text/plain":["['PassengerId',\n"," 'Survived',\n"," 'Pclass',\n"," 'Name',\n"," 'Sex',\n"," 'Age',\n"," 'SibSp',\n"," 'Parch',\n"," 'Ticket',\n"," 'Fare',\n"," 'Cabin',\n"," 'Embarked']"]},"execution_count":39,"metadata":{},"output_type":"execute_result"}],"source":["# Получить список столбцов можно при помощи следующей функции\n","df.columns.to_list()"]},{"cell_type":"markdown","id":"0701d6db","metadata":{"id":"0701d6db"},"source":["Краткую статистику по всем данным можно получить при помощи метода describe().\n","\n","Она будет посчитана только для тех признаков, которые представлены численно."]},{"cell_type":"code","execution_count":null,"id":"d0cde577","metadata":{"id":"d0cde577","outputId":"07292b1f-8908-4312-9676-ec2df8a4bd7f"},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>714.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>446.000000</td>\n","      <td>0.383838</td>\n","      <td>2.308642</td>\n","      <td>29.699118</td>\n","      <td>0.523008</td>\n","      <td>0.381594</td>\n","      <td>32.204208</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>257.353842</td>\n","      <td>0.486592</td>\n","      <td>0.836071</td>\n","      <td>14.526497</td>\n","      <td>1.102743</td>\n","      <td>0.806057</td>\n","      <td>49.693429</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.420000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>223.500000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>20.125000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>7.910400</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>446.000000</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>28.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>14.454200</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>668.500000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>38.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>31.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>891.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>80.000000</td>\n","      <td>8.000000</td>\n","      <td>6.000000</td>\n","      <td>512.329200</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       PassengerId    Survived      Pclass         Age       SibSp  \\\n","count   891.000000  891.000000  891.000000  714.000000  891.000000   \n","mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n","std     257.353842    0.486592    0.836071   14.526497    1.102743   \n","min       1.000000    0.000000    1.000000    0.420000    0.000000   \n","25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n","50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n","75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n","max     891.000000    1.000000    3.000000   80.000000    8.000000   \n","\n","            Parch        Fare  \n","count  891.000000  891.000000  \n","mean     0.381594   32.204208  \n","std      0.806057   49.693429  \n","min      0.000000    0.000000  \n","25%      0.000000    7.910400  \n","50%      0.000000   14.454200  \n","75%      0.000000   31.000000  \n","max      6.000000  512.329200  "]},"execution_count":40,"metadata":{},"output_type":"execute_result"}],"source":["df.describe()"]},{"cell_type":"markdown","id":"e9c1c6b5","metadata":{"id":"e9c1c6b5"},"source":["Информацию по типам данных и количеству пропусков можно посмотреть при помощи info"]},{"cell_type":"code","execution_count":null,"id":"964c9588","metadata":{"id":"964c9588","outputId":"7f08ffb7-1393-4b20-9f46-ab89ad0eb2e2"},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 891 entries, 0 to 890\n","Data columns (total 12 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   PassengerId  891 non-null    int64  \n"," 1   Survived     891 non-null    int64  \n"," 2   Pclass       891 non-null    int64  \n"," 3   Name         891 non-null    object \n"," 4   Sex          891 non-null    object \n"," 5   Age          714 non-null    float64\n"," 6   SibSp        891 non-null    int64  \n"," 7   Parch        891 non-null    int64  \n"," 8   Ticket       891 non-null    object \n"," 9   Fare         891 non-null    float64\n"," 10  Cabin        204 non-null    object \n"," 11  Embarked     889 non-null    object \n","dtypes: float64(2), int64(5), object(5)\n","memory usage: 83.7+ KB\n"]}],"source":["df.info()"]},{"cell_type":"markdown","id":"13a039cc","metadata":{"id":"13a039cc"},"source":["Можно применять различные встроенные методы к определенным признакам, обращаясь двумя равнозначными способами:"]},{"cell_type":"code","execution_count":null,"id":"375462f9","metadata":{"id":"375462f9","outputId":"cafdcc12-0db9-41fc-e112-acb7062297d4"},"outputs":[{"data":{"text/plain":["0.3838383838383838"]},"execution_count":42,"metadata":{},"output_type":"execute_result"}],"source":["df.Survived.mean()"]},{"cell_type":"code","execution_count":null,"id":"a7fbc32b","metadata":{"id":"a7fbc32b","outputId":"d7236e4f-e0cf-417e-d031-182eaed2256d"},"outputs":[{"data":{"text/plain":["0.3838383838383838"]},"execution_count":43,"metadata":{},"output_type":"execute_result"}],"source":["df['Survived'].mean()"]},{"cell_type":"markdown","id":"b33c70db","metadata":{"id":"b33c70db"},"source":["### Задание\n","Выведите максимальный и минимальный возраст пассажиров"]},{"cell_type":"code","execution_count":2,"id":"5ef929a7","metadata":{"id":"5ef929a7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1695460807661,"user_tz":-240,"elapsed":417,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"77581f40-6b07-4ed6-841f-a66f72da4795"},"outputs":[{"output_type":"stream","name":"stdout","text":["80.0\n","0.42\n"]}],"source":["print(df.Age.max())\n","print(df.Age.min())"]},{"cell_type":"markdown","id":"bd46e44e","metadata":{"id":"bd46e44e"},"source":["### Задание\n","Воспользуйтесь встроенным методом value_counts для признака Pclass."]},{"cell_type":"code","execution_count":8,"id":"b38010e0","metadata":{"id":"b38010e0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1695461642958,"user_tz":-240,"elapsed":418,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"61993e2c-490e-4751-d6e8-9c2cc99322a0"},"outputs":[{"output_type":"stream","name":"stdout","text":["3    491\n","1    216\n","2    184\n","Name: Pclass, dtype: int64\n"]}],"source":["print(df.Pclass.value_counts())"]},{"cell_type":"markdown","id":"858da916","metadata":{"id":"858da916"},"source":["Для получения конкретной строки можно использовать индексацию:"]},{"cell_type":"code","execution_count":null,"id":"890e3a69","metadata":{"id":"890e3a69","outputId":"fb90d6cd-41e9-4238-f7d0-1d937d610337"},"outputs":[{"data":{"text/plain":["PassengerId                   6\n","Survived                      0\n","Pclass                        3\n","Name           Moran, Mr. James\n","Sex                        male\n","Age                         NaN\n","SibSp                         0\n","Parch                         0\n","Ticket                   330877\n","Fare                     8.4583\n","Cabin                       NaN\n","Embarked                      Q\n","Name: 5, dtype: object"]},"execution_count":44,"metadata":{},"output_type":"execute_result"}],"source":["df.iloc[5]"]},{"cell_type":"markdown","id":"6d365deb","metadata":{"id":"6d365deb"},"source":["### Задание\n","Выведите номер билета у 120-го пассажира"]},{"cell_type":"code","execution_count":9,"id":"5c8bea19","metadata":{"id":"5c8bea19","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1695461656195,"user_tz":-240,"elapsed":470,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"b584ecba-4a3f-435b-ea53-86933f3595eb"},"outputs":[{"output_type":"stream","name":"stdout","text":["347082\n"]}],"source":["print(df.iloc[119].Ticket)"]},{"cell_type":"markdown","id":"d024a508","metadata":{"id":"d024a508"},"source":["Возможно применение фильтрации для данных по какому-либо условию:"]},{"cell_type":"code","execution_count":null,"id":"a9f9500d","metadata":{"id":"a9f9500d","outputId":"dc70393b-529a-4500-88c7-74cd480e75eb"},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>6</th>\n","      <td>7</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>McCarthy, Mr. Timothy J</td>\n","      <td>male</td>\n","      <td>54.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>17463</td>\n","      <td>51.8625</td>\n","      <td>E46</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>12</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Bonnell, Miss. Elizabeth</td>\n","      <td>female</td>\n","      <td>58.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>113783</td>\n","      <td>26.5500</td>\n","      <td>C103</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>16</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>Hewlett, Mrs. (Mary D Kingcome)</td>\n","      <td>female</td>\n","      <td>55.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>248706</td>\n","      <td>16.0000</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>34</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>Wheadon, Mr. Edward H</td>\n","      <td>male</td>\n","      <td>66.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>C.A. 24579</td>\n","      <td>10.5000</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>54</th>\n","      <td>55</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Ostby, Mr. Engelhart Cornelius</td>\n","      <td>male</td>\n","      <td>65.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>113509</td>\n","      <td>61.9792</td>\n","      <td>B30</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>820</th>\n","      <td>821</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Hays, Mrs. Charles Melville (Clara Jennings Gr...</td>\n","      <td>female</td>\n","      <td>52.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>12749</td>\n","      <td>93.5000</td>\n","      <td>B69</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>829</th>\n","      <td>830</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Stone, Mrs. George Nelson (Martha Evelyn)</td>\n","      <td>female</td>\n","      <td>62.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>113572</td>\n","      <td>80.0000</td>\n","      <td>B28</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>851</th>\n","      <td>852</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Svensson, Mr. Johan</td>\n","      <td>male</td>\n","      <td>74.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>347060</td>\n","      <td>7.7750</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>857</th>\n","      <td>858</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Daly, Mr. Peter Denis</td>\n","      <td>male</td>\n","      <td>51.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>113055</td>\n","      <td>26.5500</td>\n","      <td>E17</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>879</th>\n","      <td>880</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)</td>\n","      <td>female</td>\n","      <td>56.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>11767</td>\n","      <td>83.1583</td>\n","      <td>C50</td>\n","      <td>C</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>64 rows × 12 columns</p>\n","</div>"],"text/plain":["     PassengerId  Survived  Pclass  \\\n","6              7         0       1   \n","11            12         1       1   \n","15            16         1       2   \n","33            34         0       2   \n","54            55         0       1   \n","..           ...       ...     ...   \n","820          821         1       1   \n","829          830         1       1   \n","851          852         0       3   \n","857          858         1       1   \n","879          880         1       1   \n","\n","                                                  Name     Sex   Age  SibSp  \\\n","6                              McCarthy, Mr. Timothy J    male  54.0      0   \n","11                            Bonnell, Miss. Elizabeth  female  58.0      0   \n","15                    Hewlett, Mrs. (Mary D Kingcome)   female  55.0      0   \n","33                               Wheadon, Mr. Edward H    male  66.0      0   \n","54                      Ostby, Mr. Engelhart Cornelius    male  65.0      0   \n","..                                                 ...     ...   ...    ...   \n","820  Hays, Mrs. Charles Melville (Clara Jennings Gr...  female  52.0      1   \n","829          Stone, Mrs. George Nelson (Martha Evelyn)  female  62.0      0   \n","851                                Svensson, Mr. Johan    male  74.0      0   \n","857                             Daly, Mr. Peter Denis     male  51.0      0   \n","879      Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)  female  56.0      0   \n","\n","     Parch      Ticket     Fare Cabin Embarked  \n","6        0       17463  51.8625   E46        S  \n","11       0      113783  26.5500  C103        S  \n","15       0      248706  16.0000   NaN        S  \n","33       0  C.A. 24579  10.5000   NaN        S  \n","54       1      113509  61.9792   B30        C  \n","..     ...         ...      ...   ...      ...  \n","820      1       12749  93.5000   B69        S  \n","829      0      113572  80.0000   B28      NaN  \n","851      0      347060   7.7750   NaN        S  \n","857      0      113055  26.5500   E17        S  \n","879      1       11767  83.1583   C50        C  \n","\n","[64 rows x 12 columns]"]},"execution_count":45,"metadata":{},"output_type":"execute_result"}],"source":["# посмотрим все данные пассажиров, которые старше 50\n","df[df.Age > 50]"]},{"cell_type":"markdown","id":"fd091601","metadata":{"id":"fd091601"},"source":["### Задание\n","Выведите имена всех мужчин в виде списка"]},{"cell_type":"code","execution_count":17,"id":"b52fd60b","metadata":{"id":"b52fd60b","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1695465334268,"user_tz":-240,"elapsed":510,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"9a545a4d-6fc4-4752-bdda-bf6bd7f89a7a"},"outputs":[{"output_type":"stream","name":"stdout","text":["['Braund, Mr. Owen Harris', 'Allen, Mr. William Henry', 'Moran, Mr. James', 'McCarthy, Mr. Timothy J', 'Palsson, Master. Gosta Leonard', 'Saundercock, Mr. William Henry', 'Andersson, Mr. Anders Johan', 'Rice, Master. Eugene', 'Williams, Mr. Charles Eugene', 'Fynney, Mr. Joseph J', 'Beesley, Mr. Lawrence', 'Sloper, Mr. William Thompson', 'Emir, Mr. Farred Chehab', 'Fortune, Mr. Charles Alexander', 'Todoroff, Mr. Lalio', 'Uruchurtu, Don. Manuel E', 'Wheadon, Mr. Edward H', 'Meyer, Mr. Edgar Joseph', 'Holverson, Mr. Alexander Oskar', 'Mamee, Mr. Hanna', 'Cann, Mr. Ernest Charles', 'Kraeff, Mr. Theodor', 'Rogers, Mr. William John', 'Lennon, Mr. Denis', 'Samaan, Mr. Youssef', 'Panula, Master. Juha Niilo', 'Nosworthy, Mr. Richard Cater', 'Ostby, Mr. Engelhart Cornelius', 'Woolner, Mr. Hugh', 'Novel, Mr. Mansouer', 'Goodwin, Master. William Frederick', 'Sirayanian, Mr. Orsen', 'Harris, Mr. Henry Birkhardt', 'Skoog, Master. Harald', 'Stewart, Mr. Albert A', 'Moubarek, Master. Gerios', 'Crease, Mr. Ernest James', 'Kink, Mr. Vincenz', 'Jenkin, Mr. Stephen Curnow', 'Hood, Mr. Ambrose Jr', 'Chronopoulos, Mr. Apostolos', 'Bing, Mr. Lee', 'Moen, Mr. Sigurd Hansen', 'Staneff, Mr. Ivan', 'Moutal, Mr. Rahamin Haim', 'Caldwell, Master. Alden Gates', 'Waelens, Mr. Achille', 'Sheerlinck, Mr. Jan Baptist', 'Carrau, Mr. Francisco M', 'Ford, Mr. William Neal', 'Slocovski, Mr. Selman Francis', 'Celotti, Mr. Francesco', 'Christmann, Mr. Emil', 'Andreasson, Mr. Paul Edvin', 'Chaffee, Mr. Herbert Fuller', 'Dean, Mr. Bertram Frank', 'Coxon, Mr. Daniel', 'Shorney, Mr. Charles Joseph', 'Goldschmidt, Mr. George B', 'Greenfield, Mr. William Bertram', 'Kantor, Mr. Sinai', 'Petroff, Mr. Pastcho (\"Pentcho\")', 'White, Mr. Richard Frasar', 'Johansson, Mr. Gustaf Joel', 'Gustafsson, Mr. Anders Vilhelm', 'Mionoff, Mr. Stoytcho', 'Moss, Mr. Albert Johan', 'Rekic, Mr. Tido', 'Porter, Mr. Walter Chamberlain', 'Barton, Mr. David John', 'Pekoniemi, Mr. Edvard', 'Connors, Mr. Patrick', 'Turpin, Mr. William John Robert', 'Baxter, Mr. Quigg Edmond', 'Hickman, Mr. Stanley George', 'Moore, Mr. Leonard Charles', 'Nasser, Mr. Nicholas', 'White, Mr. Percival Wayland', 'Nicola-Yarred, Master. Elias', 'McMahon, Mr. Martin', 'Madsen, Mr. Fridtjof Arne', 'Ekstrom, Mr. Johan', 'Drazenoic, Mr. Jozef', 'Coelho, Mr. Domingos Fernandeo', 'Sobey, Mr. Samuel James Hayden', 'Richard, Mr. Emile', 'Futrelle, Mr. Jacques Heath', 'Osen, Mr. Olaf Elon', 'Giglio, Mr. Victor', 'Burke, Mr. Jeremiah', 'Andrew, Mr. Edgardo Samuel', 'Nicholls, Mr. Joseph Charles', 'Andersson, Mr. August Edvard (\"Wennerstrom\")', 'Navratil, Mr. Michel (\"Louis M Hoffman\")', 'Byles, Rev. Thomas Roussel Davids', 'Bateman, Rev. Robert James', 'Meo, Mr. Alfonzo', 'van Billiard, Mr. Austin Blyler', 'Olsen, Mr. Ole Martin', 'Williams, Mr. Charles Duane', 'Corn, Mr. Harry', 'Smiljanic, Mr. Mile', 'Sage, Master. Thomas Henry', 'Cribb, Mr. John Hatfield', 'Bengtsson, Mr. John Viktor', 'Calic, Mr. Jovo', 'Panula, Master. Eino Viljami', 'Goldsmith, Master. Frank John William \"Frankie\"', 'Baumann, Mr. John D', 'Ling, Mr. Lee', 'Van der hoef, Mr. Wyckoff', 'Rice, Master. Arthur', 'Sivola, Mr. Antti Wilhelm', 'Smith, Mr. James Clinch', 'Klasen, Mr. Klas Albin', 'Lefebre, Master. Henry Forbes', 'Hale, Mr. Reginald', 'Leonard, Mr. Lionel', 'Pernot, Mr. Rene', 'Asplund, Master. Clarence Gustaf Hugo', 'Becker, Master. Richard F', 'Rood, Mr. Hugh Roscoe', 'Romaine, Mr. Charles Hallace (\"Mr C Rolmane\")', 'Bourke, Mr. John', 'Turcin, Mr. Stjepan', 'Carbines, Mr. William', 'Navratil, Master. Michel M', 'Mernagh, Mr. Robert', 'Olsen, Mr. Karl Siegwart Andreas', 'Vande Walle, Mr. Nestor Cyriel', 'Sage, Mr. Frederick', 'Johanson, Mr. Jakob Alfred', 'Youseff, Mr. Gerious', 'Cohen, Mr. Gurshon \"Gus\"', 'Backstrom, Mr. Karl Alfred', 'Albimona, Mr. Nassef Cassem', 'Blank, Mr. Henry', 'Ali, Mr. Ahmed', 'Perkin, Mr. John Henry', 'Givard, Mr. Hans Kristensen', 'Kiernan, Mr. Philip', 'Jacobsohn, Mr. Sidney Samuel', 'Harris, Mr. Walter', 'Sunderland, Mr. Victor Francis', 'Bracken, Mr. James H', 'Green, Mr. George Henry', 'Nenkoff, Mr. Christo', 'Hoyt, Mr. Frederick Maxfield', 'Berglund, Mr. Karl Ivar Sven', 'Mellors, Mr. William John', 'Lovell, Mr. John Hall (\"Henry\")', 'Fahlstrom, Mr. Arne Jonas', 'Larsson, Mr. Bengt Edvin', 'Sjostedt, Mr. Ernst Adolf', 'Leyson, Mr. Robert William Norman', 'Hold, Mr. Stephen', 'Pengelly, Mr. Frederick William', 'Hunt, Mr. George Henry', 'Coleridge, Mr. Reginald Charles', 'Maenpaa, Mr. Matti Alexanteri', 'Attalah, Mr. Sleiman', 'Minahan, Dr. William Edward', 'Beckwith, Mr. Richard Leonard', 'Carter, Rev. Ernest Courtenay', 'Reed, Mr. James George', 'Stead, Mr. William Thomas', 'Lobb, Mr. William Arthur', 'Smith, Mr. Thomas', 'Asplund, Master. Edvin Rojj Felix', 'Taussig, Mr. Emil', 'Harrison, Mr. William', 'Reeves, Mr. David', 'Panula, Mr. Ernesti Arvid', 'Persson, Mr. Ernst Ulrik', 'Cairns, Mr. Alexander', 'Tornquist, Mr. William Henry', 'Natsch, Mr. Charles H', 'Parkes, Mr. Francis \"Frank\"', 'Rice, Master. Eric', 'Duane, Mr. Frank', 'Olsson, Mr. Nils Johan Goransson', 'de Pelsmaeker, Mr. Alfons', 'Dorking, Mr. Edward Arthur', 'Smith, Mr. Richard William', 'Stankovic, Mr. Ivan', 'de Mulder, Mr. Theodore', 'Naidenoff, Mr. Penko', 'Hosono, Mr. Masabumi', 'Levy, Mr. Rene Jacques', 'Mineff, Mr. Ivan', 'Lewy, Mr. Ervin G', 'Hanna, Mr. Mansour', 'Saalfeld, Mr. Adolphe', 'McCoy, Mr. Bernard', 'Johnson, Mr. William Cahoone Jr', 'Williams, Mr. Howard Hugh \"Harry\"', 'Allison, Master. Hudson Trevor', 'Abelson, Mr. Samuel', 'Hendekovic, Mr. Ignjac', 'Hart, Mr. Benjamin', 'Moraweck, Dr. Ernest', 'Dennis, Mr. Samuel', 'Danoff, Mr. Yoto', 'Sage, Mr. George John Jr', 'Nysveen, Mr. Johan Hansen', 'Partner, Mr. Austen', 'Graham, Mr. George Edward', 'Vander Planke, Mr. Leo Edmondus', 'Denkoff, Mr. Mitto', 'Pears, Mr. Thomas Clinton', 'Dahl, Mr. Karl Edwart', 'Blackwell, Mr. Stephen Weart', 'Navratil, Master. Edmond Roger', 'Collander, Mr. Erik Gustaf', 'Sedgwick, Mr. Charles Frederick Waddington', 'Fox, Mr. Stanley Hubert', 'Coutts, Master. William Loch \"William\"', 'Dimic, Mr. Jovan', 'Odahl, Mr. Nils Martin', 'Williams-Lambert, Mr. Fletcher Fellows', 'Elias, Mr. Tannous', 'Arnold-Franchi, Mr. Josef', 'Yousif, Mr. Wazli', 'Vanden Steen, Mr. Leo Peter', 'Skoog, Mr. Wilhelm', 'del Carlo, Mr. Sebastiano', 'Asim, Mr. Adola', \"O'Brien, Mr. Thomas\", 'Adahl, Mr. Mauritz Nils Martin', 'Harder, Mr. George Achilles', 'Wiklund, Mr. Jakob Alfred', 'Beavan, Mr. William Thomas', 'Ringhini, Mr. Sante', 'Widener, Mr. Harry Elkins', 'Betros, Mr. Tannous', 'Gustafsson, Mr. Karl Gideon', 'Tikkanen, Mr. Juho', 'Plotcharsky, Mr. Vasil', 'Davies, Mr. Charles Henry', 'Goodwin, Master. Sidney Leonard', 'Sadlier, Mr. Matthew', 'Carter, Mr. William Ernest', 'Jansson, Mr. Carl Olof', 'Gustafsson, Mr. Johan Birger', 'Johansson, Mr. Erik', 'McKane, Mr. Peter David', 'Pain, Dr. Alfred', 'Niskanen, Mr. Juha', 'Adams, Mr. John', 'Hakkarainen, Mr. Pekka Pietari', 'Gale, Mr. Shadrach', 'Widegren, Mr. Carl/Charles Peter', 'Richards, Master. William Rowe', 'Birkeland, Mr. Hans Martin Monsen', 'Sdycoff, Mr. Todor', 'Hart, Mr. Henry', 'Cunningham, Mr. Alfred Fleming', 'Sundman, Mr. Johan Julian', 'Matthews, Mr. William John', 'Gheorgheff, Mr. Stanio', 'Charters, Mr. David', 'Zimmerman, Mr. Leo', 'Rosblom, Mr. Viktor Richard', 'Wiseman, Mr. Phillippe', 'Flynn, Mr. James', 'Pickard, Mr. Berk (Berk Trembisky)', 'Bjornstrom-Steffansson, Mr. Mauritz Hakan', 'Kallio, Mr. Nikolai Erland', 'Silvey, Mr. William Baird', 'Fortune, Mr. Mark', 'Kvillner, Mr. Johan Henrik Johannesson', 'Hampe, Mr. Leon', 'Petterson, Mr. Johan Emil', 'Johannesen-Bratthammer, Mr. Bernt', 'Dodge, Master. Washington', 'Seward, Mr. Frederic Kimber', 'Peuchen, Major. Arthur Godfrey', 'West, Mr. Edwy Arthur', 'Hagland, Mr. Ingvald Olai Olsen', 'Foreman, Mr. Benjamin Laventall', 'Goldenberg, Mr. Samuel L', 'Peduzzi, Mr. Joseph', 'Jalsevac, Mr. Ivan', 'Millet, Mr. Francis Davis', \"O'Connor, Mr. Maurice\", 'Anderson, Mr. Harry', 'Morley, Mr. William', 'Gee, Mr. Arthur H', 'Milling, Mr. Jacob Christian', 'Maisner, Mr. Simon', 'Goncalves, Mr. Manuel Estanslas', 'Campbell, Mr. William', 'Smart, Mr. John Montgomery', 'Scanlan, Mr. James', 'Keefe, Mr. Arthur', 'Cacic, Mr. Luka', 'Clifford, Mr. George Quincy', 'Renouf, Mr. Peter Henry', 'Braund, Mr. Lewis Richard', 'Karlsson, Mr. Nils August', 'Goodwin, Master. Harold Victor', 'Frost, Mr. Anthony Wood \"Archie\"', 'Rouse, Mr. Richard Henry', 'Bishop, Mr. Dickinson H', 'Kent, Mr. Edward Austin', 'Somerton, Mr. Francis William', 'Coutts, Master. Eden Leslie \"Neville\"', 'Hagland, Mr. Konrad Mathias Reiersen', 'Windelov, Mr. Einar', 'Molson, Mr. Harry Markland', 'Artagaveytia, Mr. Ramon', 'Stanley, Mr. Edward Roland', 'Yousseff, Mr. Gerious', 'Shellard, Mr. Frederick William', 'Svensson, Mr. Olof', 'Calic, Mr. Petar', 'Penasco y Castellana, Mr. Victor de Satode', 'Bradley, Mr. George (\"George Arthur Brayton\")', 'Olsen, Mr. Henry Margido', 'Lang, Mr. Fang', 'Daly, Mr. Eugene Patrick', 'Webber, Mr. James', 'McGough, Mr. James Robert', 'Coleff, Mr. Satio', 'Walker, Mr. William Anderson', 'Ryan, Mr. Patrick', 'Pavlovic, Mr. Stefo', 'Vovk, Mr. Janko', 'Lahoud, Mr. Sarkis', 'Kassem, Mr. Fared', 'Farrell, Mr. James', 'Farthing, Mr. John', 'Salonen, Mr. Johan Werner', 'Hocking, Mr. Richard George', 'Toufik, Mr. Nakli', 'Elias, Mr. Joseph Jr', 'Butt, Major. Archibald Willingham', 'Risien, Mr. Samuel Beard', 'Beane, Mr. Edward', 'Douglas, Mr. Walter Donald', 'Nicholson, Mr. Arthur Ernest', 'Padro y Manent, Mr. Julian', 'Goldsmith, Mr. Frank John', 'Davies, Master. John Morgan Jr', 'Thayer, Mr. John Borland Jr', 'Sharp, Mr. Percival James R', \"O'Brien, Mr. Timothy\", 'Leeni, Mr. Fahim (\"Philip Zenni\")', 'Wright, Mr. George', 'Robbins, Mr. Victor', 'Morrow, Mr. Thomas Rowan', 'Sivic, Mr. Husein', 'Norman, Mr. Robert Douglas', 'Simmons, Mr. John', 'Davies, Mr. Alfred J', 'Stoytcheff, Mr. Ilia', 'Doharr, Mr. Tannous', 'Jonsson, Mr. Carl', 'Harris, Mr. George', 'Flynn, Mr. John Irwin (\"Irving\")', 'Rush, Mr. Alfred George John', 'Patchett, Mr. George', 'Jussila, Mr. Eiriik', 'Downton, Mr. William James', 'Ross, Mr. John Hugo', 'Paulner, Mr. Uscher', 'Jarvis, Mr. John Denzil', 'Frolicher-Stehli, Mr. Maxmillian', 'Gilinski, Mr. Eliezer', 'Murdlin, Mr. Joseph', 'Rintamaki, Mr. Matti', 'Elsbury, Mr. William James', 'Chapman, Mr. John Henry', 'Van Impe, Mr. Jean Baptiste', 'Johnson, Mr. Alfred', 'Boulos, Mr. Hanna', 'Duff Gordon, Sir. Cosmo Edmund (\"Mr Morgan\")', 'Slabenoff, Mr. Petco', 'Harrington, Mr. Charles H', 'Torber, Mr. Ernst William', 'Homer, Mr. Harry (\"Mr E Haven\")', 'Lindell, Mr. Edvard Bengtsson', 'Karaic, Mr. Milan', 'Daniel, Mr. Robert Williams', 'Jardin, Mr. Jose Neto', 'Horgan, Mr. John', 'Brocklebank, Mr. William Alfred', 'Danbom, Mr. Ernst Gilbert', 'Gavey, Mr. Lawrence', 'Yasbeck, Mr. Antoni', 'Kimball, Mr. Edwin Nelson Jr', 'Nakid, Mr. Sahid', 'Hansen, Mr. Henry Damsgaard', 'Bowen, Mr. David John \"Dai\"', 'Sutton, Mr. Frederick', 'Kirkland, Rev. Charles Leonard', 'Bostandyeff, Mr. Guentcho', \"O'Connell, Mr. Patrick D\", 'Barkworth, Mr. Algernon Henry Wilson', 'Lundahl, Mr. Johan Svensson', 'Stahelin-Maeglin, Dr. Max', 'Parr, Mr. William Henry Marsh', 'Leinonen, Mr. Antti Gustaf', 'Collyer, Mr. Harvey', 'Thorneycroft, Mr. Percival', 'Jensen, Mr. Hans Peder', 'Foo, Mr. Choong', 'Harper, Mr. Henry Sleeper', 'Cor, Mr. Liudevit', 'Simonius-Blumer, Col. Oberst Alfons', 'Willey, Mr. Edward', 'Mitkoff, Mr. Mito', 'Kalvik, Mr. Johannes Halvorsen', 'Hickman, Mr. Leonard Mark', 'Radeff, Mr. Alexander', 'Eitemiller, Mr. George Floyd', 'Newell, Mr. Arthur Webster', 'Frauenthal, Dr. Henry William', 'Badt, Mr. Mohamed', 'Colley, Mr. Edward Pomeroy', 'Coleff, Mr. Peju', 'Lindqvist, Mr. Eino William', 'Hickman, Mr. Lewis', 'Butler, Mr. Reginald Fenton', 'Rommetvedt, Mr. Knud Paust', 'Cook, Mr. Jacob', 'Davidson, Mr. Thornton', 'Mitchell, Mr. Henry Michael', 'Wilhelms, Mr. Charles', 'Watson, Mr. Ennis Hastings', 'Edvardsson, Mr. Gustaf Hjalmar', 'Sawyer, Mr. Frederick Charles', 'Cardeza, Mr. Thomas Drake Martinez', 'Hassab, Mr. Hammad', 'Olsvigen, Mr. Thor Anderson', 'Goodwin, Mr. Charles Edward', 'Brown, Mr. Thomas William Solomon', 'Laroche, Mr. Joseph Philippe Lemercier', 'Panula, Mr. Jaako Arnold', 'Dakic, Mr. Branko', 'Fischer, Mr. Eberhard Thelander', 'Dick, Mr. Albert Adrian', 'Lam, Mr. Ali', 'Saad, Mr. Khalil', 'Weir, Col. John', 'Chapman, Mr. Charles Henry', 'Kelly, Mr. James', 'Thayer, Mr. John Borland', 'Humblen, Mr. Adolf Mathias Nicolai Olsen', 'Silverthorne, Mr. Spencer Victor', 'Gallagher, Mr. Martin', 'Hansen, Mr. Henrik Juul', 'Morley, Mr. Henry Samuel (\"Mr Henry Marshall\")', 'Calderhead, Mr. Edward Pennington', 'Moubarek, Master. Halim Gonios (\"William George\")', 'Klaber, Mr. Herman', 'Taylor, Mr. Elmer Zebley', 'Larsson, Mr. August Viktor', 'Greenberg, Mr. Samuel', 'Soholt, Mr. Peter Andreas Lauritz Andersen', 'McEvoy, Mr. Michael', 'Johnson, Mr. Malkolm Joackim', 'Jensen, Mr. Svend Lauritz', 'Gillespie, Mr. William Henry', 'Hodges, Mr. Henry Price', 'Chambers, Mr. Norman Campbell', 'Oreskovic, Mr. Luka', 'Bryhl, Mr. Kurt Arnold Gottfrid', 'Hassan, Mr. Houssein G N', 'Knight, Mr. Robert J', 'Berriman, Mr. William John', 'Troupiansky, Mr. Moses Aaron', 'Williams, Mr. Leslie', 'Lesurer, Mr. Gustave J', 'Ivanoff, Mr. Kanio', 'Nankoff, Mr. Minko', 'Hawksford, Mr. Walter James', 'Cavendish, Mr. Tyrell William', 'McNamee, Mr. Neal', 'Stranden, Mr. Juho', 'Crosby, Capt. Edward Gifford', 'Abbott, Mr. Rossmore Edward', 'Marvin, Mr. Daniel Warner', 'Connaghton, Mr. Michael', 'Moor, Master. Meier', 'Vande Velde, Mr. Johannes Joseph', 'Jonkoff, Mr. Lalio', 'Hamalainen, Master. Viljo', 'Carlsson, Mr. August Sigfrid', 'Bailey, Mr. Percy Andrew', 'Theobald, Mr. Thomas Leonard', 'Garfirth, Mr. John', 'Nirva, Mr. Iisakki Antino Aijo', 'Barah, Mr. Hanna Assi', 'Eklund, Mr. Hans Linus', 'Brewe, Dr. Arthur Jackson', 'Moran, Mr. Daniel J', 'Gronnestad, Mr. Daniel Danielsen', 'Lievens, Mr. Rene Aime', 'Jensen, Mr. Niels Peder', 'Elias, Mr. Dibo', 'Myhrman, Mr. Pehr Fabian Oliver Malkolm', 'Tobin, Mr. Roger', 'Kilgannon, Mr. Thomas J', 'Long, Mr. Milton Clyde', 'Johnston, Mr. Andrew G', 'Ali, Mr. William', 'Harmer, Mr. Abraham (David Lishin)', 'Rice, Master. George Hugh', 'Dean, Master. Bertram Vere', 'Guggenheim, Mr. Benjamin', 'Keane, Mr. Andrew \"Andy\"', 'Gaskell, Mr. Alfred', 'Hoyt, Mr. William Fisher', 'Dantcheff, Mr. Ristiu', 'Otter, Mr. Richard', 'Ibrahim Shawah, Mr. Yousseff', 'Ponesell, Mr. Martin', 'Carter, Master. William Thornton II', 'Thomas, Master. Assad Alexander', 'Hedman, Mr. Oskar Arvid', 'Johansson, Mr. Karl Johan', 'Andrews, Mr. Thomas Jr', 'Meyer, Mr. August', 'Alexander, Mr. William', 'Lester, Mr. James', 'Slemen, Mr. Richard James', 'Tomlin, Mr. Ernest Portage', 'Fry, Mr. Richard', 'Mallet, Mr. Albert', 'Holm, Mr. John Fredrik Alexander', 'Skoog, Master. Karl Thorsten', 'Lulic, Mr. Nikola', 'Reuchlin, Jonkheer. John George', 'Panula, Master. Urho Abraham', 'Flynn, Mr. John', 'Lam, Mr. Len', 'Mallet, Master. Andre', 'McCormack, Mr. Thomas Joseph', 'Richards, Master. George Sibley', 'Saad, Mr. Amin', 'Augustsson, Mr. Albert', 'Allum, Mr. Owen George', 'Pasic, Mr. Jakob', 'Sirota, Mr. Maurice', 'Chip, Mr. Chang', 'Marechal, Mr. Pierre', 'Alhomaki, Mr. Ilmari Rudolf', 'Mudd, Mr. Thomas Charles', 'Lemberopolous, Mr. Peter L', 'Culumovic, Mr. Jeso', 'Abbing, Mr. Anthony', 'Sage, Mr. Douglas Bullen', 'Markoff, Mr. Marin', 'Harper, Rev. John', 'Andersson, Master. Sigvard Harald Elias', 'Svensson, Mr. Johan', 'Daly, Mr. Peter Denis ', 'Razi, Mr. Raihed', 'Hansen, Mr. Claus Peter', 'Giles, Mr. Frederick Edward', 'Gill, Mr. John William', 'Roebling, Mr. Washington Augustus II', 'van Melkebeke, Mr. Philemon', 'Johnson, Master. Harold Theodor', 'Balkic, Mr. Cerin', 'Carlsson, Mr. Frans Olof', 'Vander Cruyssen, Mr. Victor', 'Gustafsson, Mr. Alfred Ossian', 'Petroff, Mr. Nedelio', 'Laleff, Mr. Kristo', 'Markun, Mr. Johann', 'Banfield, Mr. Frederick James', 'Sutehall, Mr. Henry Jr', 'Montvila, Rev. Juozas', 'Behr, Mr. Karl Howell', 'Dooley, Mr. Patrick']\n"]}],"source":["print(df[df.Sex == 'male'].Name.tolist())"]},{"cell_type":"markdown","id":"c2a8a119","metadata":{"id":"c2a8a119"},"source":["Можно использовать встроенные графики для отображения данных"]},{"cell_type":"code","execution_count":null,"id":"d1066e4c","metadata":{"id":"d1066e4c","outputId":"285bf367-2615-4b26-d74b-3b820d4fadde"},"outputs":[{"data":{"text/plain":["<AxesSubplot:>"]},"execution_count":46,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["df.Parch.hist()"]},{"cell_type":"markdown","id":"92e95229","metadata":{"id":"92e95229"},"source":["### Задание\n","Постройте гистограмму на которой будет отображено количество людей в каждом из классов обслуживания"]},{"cell_type":"code","execution_count":3,"id":"f3b54a84","metadata":{"id":"f3b54a84","colab":{"base_uri":"https://localhost:8080/","height":447},"executionInfo":{"status":"ok","timestamp":1695460911906,"user_tz":-240,"elapsed":348,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"d13bea49-3261-4351-c4db-6ce19357169c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Axes(0.125,0.11;0.775x0.77)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["print(df.Pclass.hist())"]},{"cell_type":"markdown","id":"1ed5afe4","metadata":{"id":"1ed5afe4"},"source":["Из датафрейма можно выделять подвыборки и делать их самостоятельными датафреймами:"]},{"cell_type":"code","execution_count":null,"id":"b7c07681","metadata":{"id":"b7c07681","outputId":"bc887a4a-97fb-453e-90f0-1101efe103ad"},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>9</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n","      <td>female</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>347742</td>\n","      <td>11.1333</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>10</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n","      <td>female</td>\n","      <td>14.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>237736</td>\n","      <td>30.0708</td>\n","      <td>NaN</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>880</th>\n","      <td>881</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>Shelley, Mrs. William (Imanita Parrish Hall)</td>\n","      <td>female</td>\n","      <td>25.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>230433</td>\n","      <td>26.0000</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>882</th>\n","      <td>883</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Dahlberg, Miss. Gerda Ulrika</td>\n","      <td>female</td>\n","      <td>22.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7552</td>\n","      <td>10.5167</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>885</th>\n","      <td>886</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Rice, Mrs. William (Margaret Norton)</td>\n","      <td>female</td>\n","      <td>39.0</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>382652</td>\n","      <td>29.1250</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>887</th>\n","      <td>888</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Graham, Miss. Margaret Edith</td>\n","      <td>female</td>\n","      <td>19.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>112053</td>\n","      <td>30.0000</td>\n","      <td>B42</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>888</th>\n","      <td>889</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n","      <td>female</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>W./C. 6607</td>\n","      <td>23.4500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>314 rows × 12 columns</p>\n","</div>"],"text/plain":["     PassengerId  Survived  Pclass  \\\n","1              2         1       1   \n","2              3         1       3   \n","3              4         1       1   \n","8              9         1       3   \n","9             10         1       2   \n","..           ...       ...     ...   \n","880          881         1       2   \n","882          883         0       3   \n","885          886         0       3   \n","887          888         1       1   \n","888          889         0       3   \n","\n","                                                  Name     Sex   Age  SibSp  \\\n","1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n","2                               Heikkinen, Miss. Laina  female  26.0      0   \n","3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n","8    Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)  female  27.0      0   \n","9                  Nasser, Mrs. Nicholas (Adele Achem)  female  14.0      1   \n","..                                                 ...     ...   ...    ...   \n","880       Shelley, Mrs. William (Imanita Parrish Hall)  female  25.0      0   \n","882                       Dahlberg, Miss. Gerda Ulrika  female  22.0      0   \n","885               Rice, Mrs. William (Margaret Norton)  female  39.0      0   \n","887                       Graham, Miss. Margaret Edith  female  19.0      0   \n","888           Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n","\n","     Parch            Ticket     Fare Cabin Embarked  \n","1        0          PC 17599  71.2833   C85        C  \n","2        0  STON/O2. 3101282   7.9250   NaN        S  \n","3        0            113803  53.1000  C123        S  \n","8        2            347742  11.1333   NaN        S  \n","9        0            237736  30.0708   NaN        C  \n","..     ...               ...      ...   ...      ...  \n","880      1            230433  26.0000   NaN        S  \n","882      0              7552  10.5167   NaN        S  \n","885      5            382652  29.1250   NaN        Q  \n","887      0            112053  30.0000   B42        S  \n","888      2        W./C. 6607  23.4500   NaN        S  \n","\n","[314 rows x 12 columns]"]},"execution_count":47,"metadata":{},"output_type":"execute_result"}],"source":["# Выделим в отдельную таблицу всех женщин\n","df_2 = df[df.Sex == 'female']\n","df_2"]},{"cell_type":"code","execution_count":null,"id":"15eef0ed","metadata":{"id":"15eef0ed","outputId":"ac8aa9bc-bbaf-49b0-fe17-28ffc29cb8e5"},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Name</th>\n","      <th>Age</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>22.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>38.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>26.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>35.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>35.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>886</th>\n","      <td>Montvila, Rev. Juozas</td>\n","      <td>27.0</td>\n","    </tr>\n","    <tr>\n","      <th>887</th>\n","      <td>Graham, Miss. Margaret Edith</td>\n","      <td>19.0</td>\n","    </tr>\n","    <tr>\n","      <th>888</th>\n","      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>889</th>\n","      <td>Behr, Mr. Karl Howell</td>\n","      <td>26.0</td>\n","    </tr>\n","    <tr>\n","      <th>890</th>\n","      <td>Dooley, Mr. Patrick</td>\n","      <td>32.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>891 rows × 2 columns</p>\n","</div>"],"text/plain":["                                                  Name   Age\n","0                              Braund, Mr. Owen Harris  22.0\n","1    Cumings, Mrs. John Bradley (Florence Briggs Th...  38.0\n","2                               Heikkinen, Miss. Laina  26.0\n","3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  35.0\n","4                             Allen, Mr. William Henry  35.0\n","..                                                 ...   ...\n","886                              Montvila, Rev. Juozas  27.0\n","887                       Graham, Miss. Margaret Edith  19.0\n","888           Johnston, Miss. Catherine Helen \"Carrie\"   NaN\n","889                              Behr, Mr. Karl Howell  26.0\n","890                                Dooley, Mr. Patrick  32.0\n","\n","[891 rows x 2 columns]"]},"execution_count":48,"metadata":{},"output_type":"execute_result"}],"source":["# Выделим датафрейм хранящий только имена и возраст\n","df_3 = df[['Name', 'Age']]\n","df_3"]},{"cell_type":"markdown","id":"985f01cf","metadata":{"id":"985f01cf"},"source":["### Задание\n","Создайте датафрейм где будут поля Name и Survived для пассажиров без детей"]},{"cell_type":"code","execution_count":11,"id":"6b462754","metadata":{"id":"6b462754","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1695461685954,"user_tz":-240,"elapsed":478,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"b55b62ec-b13f-408a-b6a0-e621917b2fbd"},"outputs":[{"output_type":"stream","name":"stdout","text":["                                                  Name  Survived\n","0                              Braund, Mr. Owen Harris         0\n","1    Cumings, Mrs. John Bradley (Florence Briggs Th...         1\n","2                               Heikkinen, Miss. Laina         1\n","3         Futrelle, Mrs. Jacques Heath (Lily May Peel)         1\n","4                             Allen, Mr. William Henry         0\n","..                                                 ...       ...\n","884                             Sutehall, Mr. Henry Jr         0\n","886                              Montvila, Rev. Juozas         0\n","887                       Graham, Miss. Margaret Edith         1\n","889                              Behr, Mr. Karl Howell         1\n","890                                Dooley, Mr. Patrick         0\n","\n","[678 rows x 2 columns]\n"]}],"source":["df_2 = df[df.Parch == 0]\n","df_3 = df_2[['Name', 'Survived']]\n","print(df_3)"]},{"cell_type":"markdown","id":"c73eba53","metadata":{"id":"c73eba53"},"source":["Для преобразования значений столбца можно применять метод .apply с указанием в нем функции, применяемой к значению каждой строки. В данном примере применяется анонимная функция (лямбда-функция)."]},{"cell_type":"code","execution_count":null,"id":"4d58666a","metadata":{"id":"4d58666a","outputId":"2063f59c-52f4-4a35-e1ea-fb63452a950c"},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","      <th>isAdult</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>373450</td>\n","      <td>8.0500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>886</th>\n","      <td>887</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>Montvila, Rev. Juozas</td>\n","      <td>male</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>211536</td>\n","      <td>13.0000</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>887</th>\n","      <td>888</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Graham, Miss. Margaret Edith</td>\n","      <td>female</td>\n","      <td>19.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>112053</td>\n","      <td>30.0000</td>\n","      <td>B42</td>\n","      <td>S</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>888</th>\n","      <td>889</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n","      <td>female</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>W./C. 6607</td>\n","      <td>23.4500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>889</th>\n","      <td>890</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Behr, Mr. Karl Howell</td>\n","      <td>male</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>111369</td>\n","      <td>30.0000</td>\n","      <td>C148</td>\n","      <td>C</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>890</th>\n","      <td>891</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Dooley, Mr. Patrick</td>\n","      <td>male</td>\n","      <td>32.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>370376</td>\n","      <td>7.7500</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","      <td>True</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>891 rows × 13 columns</p>\n","</div>"],"text/plain":["     PassengerId  Survived  Pclass  \\\n","0              1         0       3   \n","1              2         1       1   \n","2              3         1       3   \n","3              4         1       1   \n","4              5         0       3   \n","..           ...       ...     ...   \n","886          887         0       2   \n","887          888         1       1   \n","888          889         0       3   \n","889          890         1       1   \n","890          891         0       3   \n","\n","                                                  Name     Sex   Age  SibSp  \\\n","0                              Braund, Mr. Owen Harris    male  22.0      1   \n","1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n","2                               Heikkinen, Miss. Laina  female  26.0      0   \n","3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n","4                             Allen, Mr. William Henry    male  35.0      0   \n","..                                                 ...     ...   ...    ...   \n","886                              Montvila, Rev. Juozas    male  27.0      0   \n","887                       Graham, Miss. Margaret Edith  female  19.0      0   \n","888           Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n","889                              Behr, Mr. Karl Howell    male  26.0      0   \n","890                                Dooley, Mr. Patrick    male  32.0      0   \n","\n","     Parch            Ticket     Fare Cabin Embarked  isAdult  \n","0        0         A/5 21171   7.2500   NaN        S     True  \n","1        0          PC 17599  71.2833   C85        C     True  \n","2        0  STON/O2. 3101282   7.9250   NaN        S     True  \n","3        0            113803  53.1000  C123        S     True  \n","4        0            373450   8.0500   NaN        S     True  \n","..     ...               ...      ...   ...      ...      ...  \n","886      0            211536  13.0000   NaN        S     True  \n","887      0            112053  30.0000   B42        S     True  \n","888      2        W./C. 6607  23.4500   NaN        S    False  \n","889      0            111369  30.0000  C148        C     True  \n","890      0            370376   7.7500   NaN        Q     True  \n","\n","[891 rows x 13 columns]"]},"execution_count":49,"metadata":{},"output_type":"execute_result"}],"source":["df['isAdult'] = df['Age'].apply(lambda x: x > 18)\n","df"]},{"cell_type":"markdown","id":"51e5b6be","metadata":{"id":"51e5b6be"},"source":["### Задание\n","Посчитайте среднее значение цены билета на корабле. Введите новый столбец, который будет показывать дешевле или дороже средней цены был купленный билет у каждого человека. Можете заполнить поля значениями True/False или строчными представлениями \"дешевле\"/\"дороже\""]},{"cell_type":"code","execution_count":12,"id":"167386f6","metadata":{"id":"167386f6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1695461692728,"user_tz":-240,"elapsed":480,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"1642a492-e7a3-4717-f2ac-2d4342bbfcf4"},"outputs":[{"output_type":"stream","name":"stdout","text":["32.204207968574636\n","     PassengerId  Survived  Pclass  \\\n","0              1         0       3   \n","1              2         1       1   \n","2              3         1       3   \n","3              4         1       1   \n","4              5         0       3   \n","..           ...       ...     ...   \n","886          887         0       2   \n","887          888         1       1   \n","888          889         0       3   \n","889          890         1       1   \n","890          891         0       3   \n","\n","                                                  Name     Sex   Age  SibSp  \\\n","0                              Braund, Mr. Owen Harris    male  22.0      1   \n","1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n","2                               Heikkinen, Miss. Laina  female  26.0      0   \n","3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n","4                             Allen, Mr. William Henry    male  35.0      0   \n","..                                                 ...     ...   ...    ...   \n","886                              Montvila, Rev. Juozas    male  27.0      0   \n","887                       Graham, Miss. Margaret Edith  female  19.0      0   \n","888           Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n","889                              Behr, Mr. Karl Howell    male  26.0      0   \n","890                                Dooley, Mr. Patrick    male  32.0      0   \n","\n","     Parch            Ticket     Fare Cabin Embarked  Дороже средней цены  \n","0        0         A/5 21171   7.2500   NaN        S                False  \n","1        0          PC 17599  71.2833   C85        C                 True  \n","2        0  STON/O2. 3101282   7.9250   NaN        S                False  \n","3        0            113803  53.1000  C123        S                 True  \n","4        0            373450   8.0500   NaN        S                False  \n","..     ...               ...      ...   ...      ...                  ...  \n","886      0            211536  13.0000   NaN        S                False  \n","887      0            112053  30.0000   B42        S                False  \n","888      2        W./C. 6607  23.4500   NaN        S                False  \n","889      0            111369  30.0000  C148        C                False  \n","890      0            370376   7.7500   NaN        Q                False  \n","\n","[891 rows x 13 columns]\n"]}],"source":["average_cost = df.Fare.mean()\n","print(average_cost)\n","df['Дороже средней цены'] = df['Fare'].apply(lambda x: x > average_cost)\n","print(df)"]}],"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.7"},"colab":{"provenance":[{"file_id":"https://github.com/Daikon46/AISys_SamU/blob/main/Labs1-Python/03_Lab_3.ipynb","timestamp":1695215227847}]}},"nbformat":4,"nbformat_minor":5}