{"cells":[{"cell_type":"markdown","metadata":{"id":"HfmqltY6W4ov"},"source":["# Лабораторная работа 3"]},{"cell_type":"markdown","metadata":{"id":"97Omp9xMW4oz"},"source":["1) Полносвязная нейронная сеть ( Fully-Connected Neural Network)\n","\n","2) Нормализация по мини-батчам (Batch normalization)\n","\n","3) Dropout\n","\n","4) Сверточные нейронные сети (Convolutional Networks)"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"ZsDkZG07W4o0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702373942035,"user_tz":-240,"elapsed":2309,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"0c82024b-00f5-45d4-843b-138ced1d7f16"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","/content/drive/MyDrive/Colab Notebooks/scripts3\n"]}],"source":["# This mounts your Google Drive to the Colab VM.\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","FOLDERNAME = '/Colab Notebooks/scripts3'\n","assert FOLDERNAME is not None, \"[!] Enter the foldername.\"\n","\n","# Now that we've mounted your Drive, this ensures that\n","# the Python interpreter of the Colab VM can load\n","# python files from within it.\n","import sys\n","sys.path.append('/content/drive/MyDrive/{}'.format(FOLDERNAME))\n","\n","%cd /content/drive/MyDrive/$FOLDERNAME"]},{"cell_type":"markdown","metadata":{"id":"MgISljFtW4o0"},"source":["Лабораторные работы можно выполнять с использованием сервиса Google Colaboratory (https://medium.com/deep-learning-turkey/google-colab-free-gpu-tutorial-e113627b9f5d) или на локальном компьютере."]},{"cell_type":"markdown","metadata":{"id":"OBEFE5glW4o1"},"source":["# Полносвязная нейронная сеть"]},{"cell_type":"markdown","metadata":{"id":"mouzCoPVW4o1"},"source":["В данной лабораторной работе необходимо будет реализовать полносвязную нейронную сеть, используя модульный подход. Для каждого  слоя реализации прямого и обратного проходов алгоритма обратного распространения ошибки будут иметь следующий вид:\n","\n","```python\n","def layer_forward(x, w):\n","  \"\"\" Receive inputs x and weights w \"\"\"\n","  # Do some computations ...\n","  z = # ... some intermediate value\n","  # Do some more computations ...\n","  out = # the output\n","   \n","  cache = (x, w, z, out) # Values we need to compute gradients\n","   \n","  return out, cache\n","```\n","\n","\n","\n","```python\n","def layer_backward(dout, cache):\n","  \"\"\"\n","  Receive dout (derivative of loss with respect to outputs) and cache,\n","  and compute derivative with respect to inputs.\n","  \"\"\"\n","  # Unpack cache values\n","  x, w, z, out = cache\n","  \n","  # Use values in cache to compute derivatives\n","  dx = # Derivative of loss with respect to x\n","  dw = # Derivative of loss with respect to w\n","  \n","  return dx, dw\n","```\n","\n","    "]},{"cell_type":"code","execution_count":2,"metadata":{"id":"uYsehdP7W4o3","executionInfo":{"status":"ok","timestamp":1702373947744,"user_tz":-240,"elapsed":277,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}}},"outputs":[],"source":["from __future__ import print_function\n","import time\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from scripts.classifiers.fc_net import *\n","\n","from scripts.gradient_check import eval_numerical_gradient, eval_numerical_gradient_array\n","from scripts.solver import Solver\n","from scripts.classifiers.cnn import *\n","from scripts.layers import *\n","from scripts.fast_layers import *\n","\n","\n","%matplotlib inline\n","plt.rcParams['figure.figsize'] = (10.0, 8.0)\n","plt.rcParams['image.interpolation'] = 'nearest'\n","plt.rcParams['image.cmap'] = 'gray'\n","\n","# for auto-reloading external modules\n","# see http://stackoverflow.com/questions/1907993/autoreload-of-modules-in-ipython\n","%load_ext autoreload\n","%autoreload 2\n","\n","def rel_error(x, y):\n","  \"\"\" returns relative error \"\"\"\n","  return np.max(np.abs(x - y) / (np.maximum(1e-8, np.abs(x) + np.abs(y))))\n","def print_mean_std(x,axis=0):\n","    print('  means: ', x.mean(axis=axis))\n","    print('  stds:  ', x.std(axis=axis))\n","    print()"]},{"cell_type":"markdown","metadata":{"id":"vgmV6uj9W4o6"},"source":["Загрузите данные из предыдущей лабораторной работы."]},{"cell_type":"code","execution_count":3,"metadata":{"id":"T1X_C6rXW4o7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702373955076,"user_tz":-240,"elapsed":4765,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"03ad5f61-07da-4ef1-dfc6-dad3d85103b9"},"outputs":[{"output_type":"stream","name":"stdout","text":["X_train:  (48000, 28, 28)\n","y_train:  (48000,)\n","X_val:  (12000, 28, 28)\n","y_val:  (12000,)\n","X_test:  (10000, 28, 28)\n","y_test:  (10000,)\n"]}],"source":["import tensorflow as tf\n","from sklearn.model_selection import train_test_split\n","\n","# Загрузка данных MNIST\n","mnist = tf.keras.datasets.mnist\n","(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n","\n","# Разделение данных на обучающий, валидационный и тестовый наборы\n","train_images, val_images, train_labels, val_labels = train_test_split(train_images, train_labels, test_size=0.2, random_state=42)\n","\n","# Создание структуры данных, подобной CIFAR10\n","data = {\n","    'X_train': train_images,\n","    'y_train': train_labels,\n","    'X_val': val_images,\n","    'y_val': val_labels,\n","    'X_test': test_images,\n","    'y_test': test_labels\n","}\n","\n","# Вывод размеров каждого набора данных\n","for k, v in data.items():\n","    print('%s: ' % k, v.shape)\n"]},{"cell_type":"markdown","metadata":{"id":"j3jjUeJxW4o7"},"source":["Для полносвязного слоя реализуйте прямой проход (метод affine_forward в scripts/layers.py). Протестируйте свою реализацию."]},{"cell_type":"code","execution_count":4,"metadata":{"id":"APmTHIhgW4o7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702366768953,"user_tz":-240,"elapsed":322,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"1850f587-6aa6-4523-f22f-b7b59c4181b5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Testing affine_forward function:\n","difference:  9.769849468192957e-10\n"]}],"source":["num_inputs = 2\n","input_shape = (4, 5, 6)\n","output_dim = 3\n","\n","input_size = num_inputs * np.prod(input_shape)\n","weight_size = output_dim * np.prod(input_shape)\n","\n","x = np.linspace(-0.1, 0.5, num=input_size).reshape(num_inputs, *input_shape)\n","w = np.linspace(-0.2, 0.3, num=weight_size).reshape(np.prod(input_shape), output_dim)\n","b = np.linspace(-0.3, 0.1, num=output_dim)\n","\n","out, _ = affine_forward(x, w, b)\n","correct_out = np.array([[ 1.49834967,  1.70660132,  1.91485297],\n","                        [ 3.25553199,  3.5141327,   3.77273342]])\n","\n","\n","print('Testing affine_forward function:')\n","print('difference: ', rel_error(out, correct_out))"]},{"cell_type":"markdown","metadata":{"id":"8Dz0AFlzW4o8"},"source":["Для полносвязного слоя реализуйте обратный проход (метод affine_backward в scripts/layers.py). Протестируйте свою реализацию."]},{"cell_type":"code","execution_count":5,"metadata":{"id":"4_ZoIHysW4o8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702366772227,"user_tz":-240,"elapsed":333,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"a89620a9-8847-446f-da84-4656ec2f2234"},"outputs":[{"output_type":"stream","name":"stdout","text":["Testing affine_backward function:\n","dx error:  5.399100368651805e-11\n","dw error:  9.904211865398145e-11\n","db error:  2.4122867568119087e-11\n"]}],"source":["np.random.seed(231)\n","x = np.random.randn(10, 2, 3)\n","w = np.random.randn(6, 5)\n","b = np.random.randn(5)\n","dout = np.random.randn(10, 5)\n","\n","dx_num = eval_numerical_gradient_array(lambda x: affine_forward(x, w, b)[0], x, dout)\n","dw_num = eval_numerical_gradient_array(lambda w: affine_forward(x, w, b)[0], w, dout)\n","db_num = eval_numerical_gradient_array(lambda b: affine_forward(x, w, b)[0], b, dout)\n","\n","_, cache = affine_forward(x, w, b)\n","dx, dw, db = affine_backward(dout, cache)\n","\n","print('Testing affine_backward function:')\n","print('dx error: ', rel_error(dx_num, dx))\n","print('dw error: ', rel_error(dw_num, dw))\n","print('db error: ', rel_error(db_num, db))"]},{"cell_type":"markdown","metadata":{"id":"Fg2ndjRdW4o8"},"source":["Реализуйте прямой проход для слоя активации ReLU (relu_forward) и протестируйте его."]},{"cell_type":"code","execution_count":6,"metadata":{"id":"C3s-c0-WW4o8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702366776324,"user_tz":-240,"elapsed":318,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"352ead92-c3e1-47ef-ba05-0d90371f0d27"},"outputs":[{"output_type":"stream","name":"stdout","text":["Testing relu_forward function:\n","difference:  4.999999798022158e-08\n"]}],"source":["x = np.linspace(-0.5, 0.5, num=12).reshape(3, 4)\n","\n","out, _ = relu_forward(x)\n","correct_out = np.array([[ 0.,          0.,          0.,          0.,        ],\n","                        [ 0.,          0.,          0.04545455,  0.13636364,],\n","                        [ 0.22727273,  0.31818182,  0.40909091,  0.5,       ]])\n","\n","# Compare your output with ours. The error should be on the order of e-8\n","print('Testing relu_forward function:')\n","print('difference: ', rel_error(out, correct_out))"]},{"cell_type":"markdown","metadata":{"id":"Z_jhDfUZW4o8"},"source":["Реализуйте обратный проход для слоя активации ReLU (relu_backward ) и протестируйте его."]},{"cell_type":"code","execution_count":7,"metadata":{"id":"lnAjokomW4o8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702366780205,"user_tz":-240,"elapsed":294,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"f3e330a7-5000-45ba-e1a0-38ffa30dbcb0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Testing relu_backward function:\n","dx error:  3.2756349136310288e-12\n"]}],"source":["np.random.seed(231)\n","x = np.random.randn(10, 10)\n","dout = np.random.randn(*x.shape)\n","\n","dx_num = eval_numerical_gradient_array(lambda x: relu_forward(x)[0], x, dout)\n","\n","_, cache = relu_forward(x)\n","dx = relu_backward(dout, cache)\n","\n","# The error should be on the order of e-12\n","print('Testing relu_backward function:')\n","print('dx error: ', rel_error(dx_num, dx))"]},{"cell_type":"markdown","metadata":{"id":"bHhsywyRW4o9"},"source":["В скрипте /layer_utils.py приведены реализации прямого и обратного проходов для часто используемых комбинаций слоев. Например, за полносвязным слоем часто следует слой активации. Ознакомьтесь с функциями affine_relu_forward и affine_relu_backward, запустите код ниже и убедитесь, что ошибка порядка e-10 или ниже."]},{"cell_type":"code","execution_count":8,"metadata":{"id":"yIMBPGqrW4o9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702366785194,"user_tz":-240,"elapsed":391,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"74ebc4db-0147-4a29-8566-8782368390f1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Testing affine_relu_forward and affine_relu_backward:\n","dx error:  2.299579177309368e-11\n","dw error:  8.162011105764925e-11\n","db error:  7.826724021458994e-12\n"]}],"source":["from scripts.layer_utils import affine_relu_forward, affine_relu_backward\n","np.random.seed(231)\n","x = np.random.randn(2, 3, 4)\n","w = np.random.randn(12, 10)\n","b = np.random.randn(10)\n","dout = np.random.randn(2, 10)\n","\n","out, cache = affine_relu_forward(x, w, b)\n","dx, dw, db = affine_relu_backward(dout, cache)\n","\n","dx_num = eval_numerical_gradient_array(lambda x: affine_relu_forward(x, w, b)[0], x, dout)\n","dw_num = eval_numerical_gradient_array(lambda w: affine_relu_forward(x, w, b)[0], w, dout)\n","db_num = eval_numerical_gradient_array(lambda b: affine_relu_forward(x, w, b)[0], b, dout)\n","\n","# Relative error should be around e-10 or less\n","print('Testing affine_relu_forward and affine_relu_backward:')\n","print('dx error: ', rel_error(dx_num, dx))\n","print('dw error: ', rel_error(dw_num, dw))\n","print('db error: ', rel_error(db_num, db))"]},{"cell_type":"markdown","metadata":{"id":"zLPTSwWHW4o9"},"source":["Реализуйте двухслойную полносвязную сеть - класс TwoLayerNet в scripts/classifiers/fc_net.py . Проверьте свою реализацию, запустив код ниже."]},{"cell_type":"code","execution_count":9,"metadata":{"id":"kgUnglTwW4o9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702366796480,"user_tz":-240,"elapsed":1107,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"1343a4ad-36e1-44c2-b7e8-66558d2c31cf"},"outputs":[{"output_type":"stream","name":"stdout","text":["Testing initialization ... \n","Testing test-time forward pass ... \n","Testing training loss (no regularization)\n","Running numeric gradient check with reg =  0.0\n","W1 relative error: 1.83e-08\n","W2 relative error: 3.12e-10\n","b1 relative error: 9.83e-09\n","b2 relative error: 4.33e-10\n","Running numeric gradient check with reg =  0.7\n","W1 relative error: 2.53e-07\n","W2 relative error: 2.85e-08\n","b1 relative error: 1.56e-08\n","b2 relative error: 7.76e-10\n"]}],"source":["\n","np.random.seed(231)\n","N, D, H, C = 3, 5, 50, 7\n","X = np.random.randn(N, D)\n","y = np.random.randint(C, size=N)\n","\n","std = 1e-3\n","model = TwoLayerNet(input_dim=D, hidden_dim=H, num_classes=C, weight_scale=std)\n","\n","print('Testing initialization ... ')\n","W1_std = abs(model.params['W1'].std() - std)\n","b1 = model.params['b1']\n","W2_std = abs(model.params['W2'].std() - std)\n","b2 = model.params['b2']\n","assert W1_std < std / 10, 'First layer weights do not seem right'\n","assert np.all(b1 == 0), 'First layer biases do not seem right'\n","assert W2_std < std / 10, 'Second layer weights do not seem right'\n","assert np.all(b2 == 0), 'Second layer biases do not seem right'\n","\n","print('Testing test-time forward pass ... ')\n","model.params['W1'] = np.linspace(-0.7, 0.3, num=D*H).reshape(D, H)\n","model.params['b1'] = np.linspace(-0.1, 0.9, num=H)\n","model.params['W2'] = np.linspace(-0.3, 0.4, num=H*C).reshape(H, C)\n","model.params['b2'] = np.linspace(-0.9, 0.1, num=C)\n","X = np.linspace(-5.5, 4.5, num=N*D).reshape(D, N).T\n","scores = model.loss(X)\n","correct_scores = np.asarray(\n","  [[11.53165108,  12.2917344,   13.05181771,  13.81190102,  14.57198434, 15.33206765,  16.09215096],\n","   [12.05769098,  12.74614105,  13.43459113,  14.1230412,   14.81149128, 15.49994135,  16.18839143],\n","   [12.58373087,  13.20054771,  13.81736455,  14.43418138,  15.05099822, 15.66781506,  16.2846319 ]])\n","scores_diff = np.abs(scores - correct_scores).sum()\n","assert scores_diff < 1e-6, 'Problem with test-time forward pass'\n","\n","print('Testing training loss (no regularization)')\n","y = np.asarray([0, 5, 1])\n","loss, grads = model.loss(X, y)\n","correct_loss = 3.4702243556\n","assert abs(loss - correct_loss) < 1e-10, 'Problem with training-time loss'\n","\n","model.reg = 1.0\n","loss, grads = model.loss(X, y)\n","correct_loss = 26.5948426952\n","assert abs(loss - correct_loss) < 1e-10, 'Problem with regularization loss'\n","\n","# Errors should be around e-7 or less\n","for reg in [0.0, 0.7]:\n","  print('Running numeric gradient check with reg = ', reg)\n","  model.reg = reg\n","  loss, grads = model.loss(X, y)\n","\n","  for name in sorted(grads):\n","    f = lambda _: model.loss(X, y)[0]\n","    grad_num = eval_numerical_gradient(f, model.params[name], verbose=False)\n","    print('%s relative error: %.2e' % (name, rel_error(grad_num, grads[name])))"]},{"cell_type":"markdown","metadata":{"id":"7W_wg0i9W4o9"},"source":["Ознакомьтесь с API для обучения и тестирования моделей в scripts/solver.py . Используйте экземпляр класса Solver для обучения двухслойной полносвязной сети. Необходимо достичь минимум 50% верно классифицированных объектов на валидационном наборе."]},{"cell_type":"code","execution_count":10,"metadata":{"id":"wwxgS032W4o9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702367052909,"user_tz":-240,"elapsed":195139,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"a2d0d6a0-e581-454e-a807-78ff2fe6e73b"},"outputs":[{"output_type":"stream","name":"stdout","text":[" 1) lr = 4.91e-04 | reg = 1.571 | hidden_dim = 155 | epochs = 10 | Accuracy = 0.9422\n"," 2) lr = 4.15e-04 | reg = 1.034 | hidden_dim = 128 | epochs = 17 | Accuracy = 0.9515\n"," 3) lr = 5.02e-04 | reg = 1.665 | hidden_dim = 147 | epochs = 12 | Accuracy = 0.9435\n"," 4) lr = 5.78e-04 | reg = 1.373 | hidden_dim = 185 | epochs = 10 | Accuracy = 0.9497\n"," 5) lr = 5.37e-04 | reg = 1.137 | hidden_dim = 114 | epochs = 15 | Accuracy = 0.9507\n","\n","Best solver accuracy on the validation set is: 0.9515\n"]}],"source":["model = TwoLayerNet()\n","solver = None\n","\n","##############################################################################\n","# TODO: Use a Solver instance to train a TwoLayerNet that achieves at least  #\n","# 50% accuracy on the validation set.                                        #\n","##############################################################################\n","# *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","# As explained in the course lectures, random search is a better strategy for\n","# hyperparameters tuning than the grid search.\n","def params_random_values(lr_range, reg_range, hidden_dim_range, epochs_range):\n","  lr = np.random.uniform(*lr_range)\n","  reg = np.random.uniform(*reg_range)\n","  hidden_dim = np.random.randint(*hidden_dim_range)\n","  epochs = np.random.randint(*epochs_range)\n","\n","  return lr, reg, hidden_dim, epochs\n","\n","# Define parameter values ranges for random search.\n","# Note that these ranges were adjusted during tests.\n","lr_range = (3e-4, 6e-4)\n","reg_range = (1, 2)\n","hidden_dim_range = (100, 200)\n","epochs_range = (10, 20)\n","# Generate 5 random parameter values combinations.\n","# Note that combinations number was adjusted during tests.\n","test_params_values = []\n","for _ in range(5):\n","  curr_comb = params_random_values(lr_range, reg_range, hidden_dim_range, epochs_range)\n","  test_params_values.append(curr_comb)\n","\n","# Keep track of the best solver (such with the highest validation accuracy) during tests.\n","best_accuracy, best_solver = 0.0, None\n","\n","# Test each combination.\n","for idx, params_value in enumerate(test_params_values):\n","  lr, reg, hidden_dim, epochs = params_value\n","\n","  model = TwoLayerNet(reg=reg, hidden_dim=hidden_dim)\n","  solver = Solver(model, data,\n","                  update_rule='sgd',\n","                  optim_config={'learning_rate': lr},\n","                  lr_decay=0.9, num_epochs=epochs,\n","                  batch_size=100, verbose=False)\n","\n","  solver.train()\n","\n","  print('%2d) lr = %.2e | reg = %.3f | hidden_dim = %3d | epochs = %2d | '\n","        % (idx+1, *params_value) + 'Accuracy = %.4f' % solver.best_val_acc)\n","\n","  if solver.best_val_acc > best_accuracy:\n","    best_accuracy = solver.best_val_acc\n","    best_solver = solver\n","\n","# Mark the best solver as the main one.\n","solver = best_solver\n","\n","print('\\nBest solver accuracy on the validation set is: %.4f' % solver.best_val_acc)\n","\n","# *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","##############################################################################\n","#                             END OF YOUR CODE                               #\n","##############################################################################"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"jPzXTL3ZW4o-","colab":{"base_uri":"https://localhost:8080/","height":755},"executionInfo":{"status":"ok","timestamp":1702367381288,"user_tz":-240,"elapsed":861,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"eefbd844-7685-4025-d5ad-e66af30f0aa2"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x1200 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.subplot(2, 1, 1)\n","plt.title('Training loss')\n","plt.plot(solver.loss_history, 'o')\n","plt.xlabel('Iteration')\n","\n","plt.subplot(2, 1, 2)\n","plt.title('Accuracy')\n","plt.plot(solver.train_acc_history, '-o', label='train')\n","plt.plot(solver.val_acc_history, '-o', label='val')\n","plt.plot([0.5] * len(solver.val_acc_history), 'k--')\n","plt.xlabel('Epoch')\n","plt.legend(loc='lower right')\n","plt.gcf().set_size_inches(15, 12)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"LZqsJLb3W4o-"},"source":["Теперь реализуйте полносвязную сеть с произвольным числом скрытых слоев. Ознакомьтесь с классом FullyConnectedNet в scripts/classifiers/fc_net.py . Реализуйте инициализацию, прямой и обратный проходы."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"s9gbEg83W4o-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701873778620,"user_tz":-240,"elapsed":2237,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"4c19d2d7-4286-4cf6-bbae-1a19af082346"},"outputs":[{"output_type":"stream","name":"stdout","text":["Running check with reg =  0\n","Initial loss:  2.3004790897684924\n","W1 relative error: 1.48e-07\n","W2 relative error: 2.21e-05\n","W3 relative error: 3.53e-07\n","b1 relative error: 5.38e-09\n","b2 relative error: 2.09e-09\n","b3 relative error: 5.80e-11\n","Running check with reg =  3.14\n","Initial loss:  7.052114776533016\n","W1 relative error: 6.86e-09\n","W2 relative error: 3.52e-08\n","W3 relative error: 1.32e-08\n","b1 relative error: 1.48e-08\n","b2 relative error: 1.72e-09\n","b3 relative error: 1.80e-10\n"]}],"source":["np.random.seed(231)\n","N, D, H1, H2, C = 2, 15, 20, 30, 10\n","X = np.random.randn(N, D)\n","y = np.random.randint(C, size=(N,))\n","\n","for reg in [0, 3.14]:\n","  print('Running check with reg = ', reg)\n","  model = FullyConnectedNet([H1, H2], input_dim=D, num_classes=C,\n","                            reg=reg, weight_scale=5e-2, dtype=np.float64)\n","\n","  loss, grads = model.loss(X, y)\n","  print('Initial loss: ', loss)\n","\n","  # Most of the errors should be on the order of e-7 or smaller.\n","  # NOTE: It is fine however to see an error for W2 on the order of e-5\n","  # for the check when reg = 0.0\n","  for name in sorted(grads):\n","    f = lambda _: model.loss(X, y)[0]\n","    grad_num = eval_numerical_gradient(f, model.params[name], verbose=False, h=1e-5)\n","    print('%s relative error: %.2e' % (name, rel_error(grad_num, grads[name])))"]},{"cell_type":"markdown","metadata":{"id":"Rp9SkUTzW4o-"},"source":["Попробуйте добиться эффекта переобучения на небольшом наборе изображений (например, 50). Используйте трехслойную сеть со 100 нейронами на каждом скрытом слое. Попробуйте переобучить сеть, достигнув 100 % accuracy за 20 эпох. Для этого поэкспериментируйте с параметрами weight_scale и learning_rate."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"R8irwTf0W4o_","colab":{"base_uri":"https://localhost:8080/","height":926},"executionInfo":{"status":"ok","timestamp":1701873822219,"user_tz":-240,"elapsed":41604,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"a743f273-c2a6-4bc3-c1d4-50c177746389"},"outputs":[{"output_type":"stream","name":"stdout","text":[" 1) weight_scale = 9.45e-03 | learning_rate = 7.70e-03 | Accuracy = 1.0000\n"," 2) weight_scale = 9.56e-03 | learning_rate = 8.69e-03 | Accuracy = 1.0000\n"," 3) weight_scale = 9.91e-03 | learning_rate = 8.71e-03 | Accuracy = 1.0000\n"," 4) weight_scale = 9.33e-03 | learning_rate = 8.99e-03 | Accuracy = 1.0000\n"," 5) weight_scale = 9.85e-03 | learning_rate = 8.38e-03 | Accuracy = 1.0000\n"," 6) weight_scale = 9.41e-03 | learning_rate = 7.16e-03 | Accuracy = 0.9000\n"," 7) weight_scale = 9.89e-03 | learning_rate = 8.75e-03 | Accuracy = 0.9800\n"," 8) weight_scale = 9.11e-03 | learning_rate = 7.04e-03 | Accuracy = 1.0000\n"," 9) weight_scale = 9.18e-03 | learning_rate = 8.03e-03 | Accuracy = 1.0000\n","10) weight_scale = 9.77e-03 | learning_rate = 8.87e-03 | Accuracy = 1.0000\n","\n","Best solver accuracy on the train set is: 1.0000\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["num_train = 50\n","small_data = {\n","  'X_train': data['X_train'][:num_train],\n","  'y_train': data['y_train'][:num_train],\n","  'X_val': data['X_val'],\n","  'y_val': data['y_val'],\n","}\n","\n","best_accuracy, best_solver = 0.0, None\n","\n","# Generate 10 random values of 'weight_scale' and 'learning_rate'.\n","# Note that the range (for both hyperparameters) was adjusted during tests.\n","num_combinations = 10\n","\n","weight_scale_values = np.random.uniform(9e-3, 1e-2, num_combinations)\n","learning_rate_values = np.random.uniform(7e-3, 9e-3, num_combinations)\n","\n","for idx in range(num_combinations):\n","  weight_scale = weight_scale_values[idx]\n","  learning_rate = learning_rate_values[idx]\n","\n","  model = FullyConnectedNet([100, 100],\n","                weight_scale=weight_scale, dtype=np.float64)\n","  solver = Solver(model, small_data,\n","                  print_every=10, num_epochs=20, batch_size=25,\n","                  update_rule='sgd',\n","                  optim_config={\n","                    'learning_rate': learning_rate,\n","                  },\n","                  verbose=False\n","          )\n","\n","  solver.train()\n","\n","  train_acc = solver.check_accuracy(small_data['X_train'], small_data['y_train'],\n","                                    batch_size=num_train)\n","\n","  print('%2d) weight_scale = %.2e | learning_rate = %.2e ' % (idx+1, weight_scale, learning_rate) +\n","        '| Accuracy = %.4f' % train_acc)\n","\n","  if train_acc > best_accuracy:\n","    best_accuracy = train_acc\n","    best_solver = solver\n","\n","solver = best_solver\n","print('\\nBest solver accuracy on the train set is: %.4f' % best_accuracy)\n","\n","plt.plot(solver.loss_history, 'o')\n","plt.title('Training loss history')\n","plt.xlabel('Iteration')\n","plt.ylabel('Training loss')\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"4JdRmJ4sW4o_"},"source":["Повторите эксперимент, описанный выше, для пятислойной сети."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DSqBc16DW4o_","colab":{"base_uri":"https://localhost:8080/","height":926},"executionInfo":{"status":"ok","timestamp":1701873936397,"user_tz":-240,"elapsed":58202,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"b401fc4b-357d-4b2a-f1f8-95dd81f71578"},"outputs":[{"output_type":"stream","name":"stdout","text":[" 1) weight_scale = 9.25e-02 | learning_rate = 3.99e-03 | Accuracy = 1.0000\n"," 2) weight_scale = 9.57e-02 | learning_rate = 3.41e-03 | Accuracy = 1.0000\n"," 3) weight_scale = 9.72e-02 | learning_rate = 2.24e-03 | Accuracy = 1.0000\n"," 4) weight_scale = 9.54e-02 | learning_rate = 1.46e-03 | Accuracy = 1.0000\n"," 5) weight_scale = 9.54e-02 | learning_rate = 3.45e-03 | Accuracy = 1.0000\n"," 6) weight_scale = 9.11e-02 | learning_rate = 1.88e-03 | Accuracy = 1.0000\n"," 7) weight_scale = 9.89e-02 | learning_rate = 1.47e-03 | Accuracy = 1.0000\n"," 8) weight_scale = 9.81e-02 | learning_rate = 2.03e-03 | Accuracy = 1.0000\n"," 9) weight_scale = 9.25e-02 | learning_rate = 3.50e-03 | Accuracy = 1.0000\n","10) weight_scale = 9.31e-02 | learning_rate = 1.48e-03 | Accuracy = 1.0000\n","\n","Best solver accuracy on the train set is: 1.0000\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# TODO: Use a five-layer Net to overfit 50 training examples by\n","# tweaking just the learning rate and initialization scale.\n","\n","num_train = 50\n","small_data = {\n","  'X_train': data['X_train'][:num_train],\n","  'y_train': data['y_train'][:num_train],\n","  'X_val': data['X_val'],\n","  'y_val': data['y_val'],\n","}\n","\n","best_accuracy, best_solver = 0.0, None\n","\n","# Generate 10 random values of 'weight_scale' and 'learning_rate'.\n","# Note that the range (for both hyperparameters) was adjusted during tests.\n","num_combinations = 10\n","\n","weight_scale_values = np.random.uniform(9e-2, 1e-1, num_combinations)\n","learning_rate_values = np.random.uniform(1e-3, 4e-3, num_combinations)\n","\n","for idx in range(num_combinations):\n","  weight_scale = weight_scale_values[idx]\n","  learning_rate = learning_rate_values[idx]\n","\n","  model = FullyConnectedNet([100, 100, 100, 100],\n","                  weight_scale=weight_scale, dtype=np.float64)\n","  solver = Solver(model, small_data,\n","                  print_every=10, num_epochs=20, batch_size=25,\n","                  update_rule='sgd',\n","                  optim_config={\n","                    'learning_rate': learning_rate,\n","                  },\n","                  verbose=False\n","          )\n","\n","  solver.train()\n","\n","  train_acc = solver.check_accuracy(small_data['X_train'], small_data['y_train'],\n","                                    batch_size=num_train)\n","\n","  print('%2d) weight_scale = %.2e | learning_rate = %.2e ' % (idx+1, weight_scale, learning_rate) +\n","        '| Accuracy = %.4f' % train_acc)\n","\n","  if train_acc > best_accuracy:\n","    best_accuracy = train_acc\n","    best_solver = solver\n","\n","solver = best_solver\n","print('\\nBest solver accuracy on the train set is: %.4f' % best_accuracy)\n","\n","plt.plot(solver.loss_history, 'o')\n","plt.title('Training loss history')\n","plt.xlabel('Iteration')\n","plt.ylabel('Training loss')\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"Y8Dl44AyW4o_"},"source":["Сделайте выводы по проведенному эксперименту."]},{"cell_type":"markdown","source":["*Этот эксперемент помогает добиться эффекта переобучения, т.е. модель успешно запомнила обучающие данные,  но ее способность обобщения на новые данные может быть ограничена.*"],"metadata":{"id":"mGg528m4iG2T"}},{"cell_type":"markdown","metadata":{"id":"rOk7QNcrW4o_"},"source":["Ранее обновление весов проходило по правилу SGD. Теперь попробуйте реализовать стохастический градиентный спуск с импульсом (SGD+momentum). http://cs231n.github.io/neural-networks-3/#sgd Реализуйте sgd_momentum в scripts/optim.py  и запустите проверку."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JPpjWn2CW4o_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701874640564,"user_tz":-240,"elapsed":311,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"276999f2-1f9e-4e0a-a0c4-206ce39f37cb"},"outputs":[{"output_type":"stream","name":"stdout","text":["next_w error:  8.882347033505819e-09\n","velocity error:  4.269287743278663e-09\n"]}],"source":["from scripts.optim import sgd_momentum\n","\n","N, D = 4, 5\n","w = np.linspace(-0.4, 0.6, num=N*D).reshape(N, D)\n","dw = np.linspace(-0.6, 0.4, num=N*D).reshape(N, D)\n","v = np.linspace(0.6, 0.9, num=N*D).reshape(N, D)\n","\n","config = {'learning_rate': 1e-3, 'velocity': v}\n","next_w, _ = sgd_momentum(w, dw, config=config)\n","\n","expected_next_w = np.asarray([\n","  [ 0.1406,      0.20738947,  0.27417895,  0.34096842,  0.40775789],\n","  [ 0.47454737,  0.54133684,  0.60812632,  0.67491579,  0.74170526],\n","  [ 0.80849474,  0.87528421,  0.94207368,  1.00886316,  1.07565263],\n","  [ 1.14244211,  1.20923158,  1.27602105,  1.34281053,  1.4096    ]])\n","expected_velocity = np.asarray([\n","  [ 0.5406,      0.55475789,  0.56891579, 0.58307368,  0.59723158],\n","  [ 0.61138947,  0.62554737,  0.63970526,  0.65386316,  0.66802105],\n","  [ 0.68217895,  0.69633684,  0.71049474,  0.72465263,  0.73881053],\n","  [ 0.75296842,  0.76712632,  0.78128421,  0.79544211,  0.8096    ]])\n","\n","# Should see relative errors around e-8 or less\n","print('next_w error: ', rel_error(next_w, expected_next_w))\n","print('velocity error: ', rel_error(expected_velocity, config['velocity']))"]},{"cell_type":"markdown","metadata":{"id":"yH1pTQ95W4pA"},"source":["Сравните результаты обучения шестислойной сети, обученной классическим градиентным спуском и адаптивным алгоритмом с импульсом. Какой алгоритм сходится быстрее."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KVdUsCpWW4pA","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1701874691312,"user_tz":-240,"elapsed":10228,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"b0dca007-3b05-420c-9042-567c0481aa36"},"outputs":[{"output_type":"stream","name":"stdout","text":["running with  sgd\n","(Iteration 1 / 200) loss: 2.351784\n","(Epoch 0 / 5) train acc: 0.132000; val_acc: 0.131250\n","(Iteration 11 / 200) loss: 2.067363\n","(Iteration 21 / 200) loss: 1.771828\n","(Iteration 31 / 200) loss: 1.475145\n","(Epoch 1 / 5) train acc: 0.658000; val_acc: 0.648083\n","(Iteration 41 / 200) loss: 1.327304\n","(Iteration 51 / 200) loss: 1.073787\n","(Iteration 61 / 200) loss: 0.950042\n","(Iteration 71 / 200) loss: 1.026552\n","(Epoch 2 / 5) train acc: 0.686000; val_acc: 0.701250\n","(Iteration 81 / 200) loss: 0.876313\n","(Iteration 91 / 200) loss: 0.778701\n","(Iteration 101 / 200) loss: 0.805489\n","(Iteration 111 / 200) loss: 0.576722\n","(Epoch 3 / 5) train acc: 0.812000; val_acc: 0.787917\n","(Iteration 121 / 200) loss: 0.635299\n","(Iteration 131 / 200) loss: 0.549968\n","(Iteration 141 / 200) loss: 0.447246\n","(Iteration 151 / 200) loss: 0.619522\n","(Epoch 4 / 5) train acc: 0.863000; val_acc: 0.837250\n","(Iteration 161 / 200) loss: 0.596989\n","(Iteration 171 / 200) loss: 0.414118\n","(Iteration 181 / 200) loss: 0.570320\n","(Iteration 191 / 200) loss: 0.426930\n","(Epoch 5 / 5) train acc: 0.845000; val_acc: 0.821750\n","\n","running with  sgd_momentum\n","(Iteration 1 / 200) loss: 2.360736\n","(Epoch 0 / 5) train acc: 0.087000; val_acc: 0.104083\n","(Iteration 11 / 200) loss: 1.443954\n","(Iteration 21 / 200) loss: 0.724813\n","(Iteration 31 / 200) loss: 0.622581\n","(Epoch 1 / 5) train acc: 0.783000; val_acc: 0.772750\n","(Iteration 41 / 200) loss: 0.476013\n","(Iteration 51 / 200) loss: 0.519612\n","(Iteration 61 / 200) loss: 0.367881\n","(Iteration 71 / 200) loss: 0.247650\n","(Epoch 2 / 5) train acc: 0.891000; val_acc: 0.871833\n","(Iteration 81 / 200) loss: 0.285533\n","(Iteration 91 / 200) loss: 0.323037\n","(Iteration 101 / 200) loss: 0.314961\n","(Iteration 111 / 200) loss: 0.130628\n","(Epoch 3 / 5) train acc: 0.925000; val_acc: 0.890833\n","(Iteration 121 / 200) loss: 0.201059\n","(Iteration 131 / 200) loss: 0.165656\n","(Iteration 141 / 200) loss: 0.129568\n","(Iteration 151 / 200) loss: 0.205875\n","(Epoch 4 / 5) train acc: 0.976000; val_acc: 0.903250\n","(Iteration 161 / 200) loss: 0.109146\n","(Iteration 171 / 200) loss: 0.243177\n","(Iteration 181 / 200) loss: 0.117221\n","(Iteration 191 / 200) loss: 0.225335\n","(Epoch 5 / 5) train acc: 0.967000; val_acc: 0.909250\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x1500 with 3 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["num_train = 4000\n","small_data = {\n","  'X_train': data['X_train'][:num_train],\n","  'y_train': data['y_train'][:num_train],\n","  'X_val': data['X_val'],\n","  'y_val': data['y_val'],\n","}\n","\n","solvers = {}\n","\n","for update_rule in ['sgd', 'sgd_momentum']:\n","  print('running with ', update_rule)\n","  model = FullyConnectedNet([100, 100, 100, 100, 100], weight_scale=5e-2)\n","\n","  solver = Solver(model, small_data,\n","                  num_epochs=5, batch_size=100,\n","                  update_rule=update_rule,\n","                  optim_config={\n","                    'learning_rate': 5e-3,\n","                  },\n","                  verbose=True)\n","  solvers[update_rule] = solver\n","  solver.train()\n","  print()\n","\n","plt.subplot(3, 1, 1)\n","plt.title('Training loss')\n","plt.xlabel('Iteration')\n","\n","plt.subplot(3, 1, 2)\n","plt.title('Training accuracy')\n","plt.xlabel('Epoch')\n","\n","plt.subplot(3, 1, 3)\n","plt.title('Validation accuracy')\n","plt.xlabel('Epoch')\n","\n","for update_rule, solver in solvers.items():\n","  plt.subplot(3, 1, 1)\n","  plt.plot(solver.loss_history, 'o', label=\"loss_%s\" % update_rule)\n","\n","  plt.subplot(3, 1, 2)\n","  plt.plot(solver.train_acc_history, '-o', label=\"train_acc_%s\" % update_rule)\n","\n","  plt.subplot(3, 1, 3)\n","  plt.plot(solver.val_acc_history, '-o', label=\"val_acc_%s\" % update_rule)\n","\n","for i in [1, 2, 3]:\n","  plt.subplot(3, 1, i)\n","  plt.legend(loc='upper center', ncol=4)\n","plt.gcf().set_size_inches(15, 15)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"pC4Uq4vBW4pA"},"source":["Реализуйте алгоритмы RMSProp [1] and Adam [2] с коррекцией смещения  - методы rmsprop и adam .\n","\n","\n","[1] Tijmen Tieleman and Geoffrey Hinton. \"Lecture 6.5-rmsprop: Divide the gradient by a running average of its recent magnitude.\" COURSERA: Neural Networks for Machine Learning 4 (2012).\n","\n","[2] Diederik Kingma and Jimmy Ba, \"Adam: A Method for Stochastic Optimization\", ICLR 2015."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Doyj8PNSW4pA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701874755178,"user_tz":-240,"elapsed":354,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"167fd05b-129e-476a-88e0-e1b20099f824"},"outputs":[{"output_type":"stream","name":"stdout","text":["next_w error:  9.524687511038133e-08\n","cache error:  2.6477955807156126e-09\n"]}],"source":["# Test RMSProp implementation\n","from scripts.optim import rmsprop\n","\n","N, D = 4, 5\n","w = np.linspace(-0.4, 0.6, num=N*D).reshape(N, D)\n","dw = np.linspace(-0.6, 0.4, num=N*D).reshape(N, D)\n","cache = np.linspace(0.6, 0.9, num=N*D).reshape(N, D)\n","\n","config = {'learning_rate': 1e-2, 'cache': cache}\n","next_w, _ = rmsprop(w, dw, config=config)\n","\n","expected_next_w = np.asarray([\n","  [-0.39223849, -0.34037513, -0.28849239, -0.23659121, -0.18467247],\n","  [-0.132737,   -0.08078555, -0.02881884,  0.02316247,  0.07515774],\n","  [ 0.12716641,  0.17918792,  0.23122175,  0.28326742,  0.33532447],\n","  [ 0.38739248,  0.43947102,  0.49155973,  0.54365823,  0.59576619]])\n","expected_cache = np.asarray([\n","  [ 0.5976,      0.6126277,   0.6277108,   0.64284931,  0.65804321],\n","  [ 0.67329252,  0.68859723,  0.70395734,  0.71937285,  0.73484377],\n","  [ 0.75037008,  0.7659518,   0.78158892,  0.79728144,  0.81302936],\n","  [ 0.82883269,  0.84469141,  0.86060554,  0.87657507,  0.8926    ]])\n","\n","# You should see relative errors around e-7 or less\n","print('next_w error: ', rel_error(expected_next_w, next_w))\n","print('cache error: ', rel_error(expected_cache, config['cache']))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"emat7RtAW4pA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701874771806,"user_tz":-240,"elapsed":277,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"028d6b63-7226-4e4f-b719-5a58e8c1a262"},"outputs":[{"output_type":"stream","name":"stdout","text":["next_w error:  1.1395691798535431e-07\n","v error:  4.208314038113071e-09\n","m error:  4.214963193114416e-09\n"]}],"source":["# Test Adam implementation\n","from scripts.optim import adam\n","\n","N, D = 4, 5\n","w = np.linspace(-0.4, 0.6, num=N*D).reshape(N, D)\n","dw = np.linspace(-0.6, 0.4, num=N*D).reshape(N, D)\n","m = np.linspace(0.6, 0.9, num=N*D).reshape(N, D)\n","v = np.linspace(0.7, 0.5, num=N*D).reshape(N, D)\n","\n","config = {'learning_rate': 1e-2, 'm': m, 'v': v, 't': 5}\n","next_w, _ = adam(w, dw, config=config)\n","\n","expected_next_w = np.asarray([\n","  [-0.40094747, -0.34836187, -0.29577703, -0.24319299, -0.19060977],\n","  [-0.1380274,  -0.08544591, -0.03286534,  0.01971428,  0.0722929],\n","  [ 0.1248705,   0.17744702,  0.23002243,  0.28259667,  0.33516969],\n","  [ 0.38774145,  0.44031188,  0.49288093,  0.54544852,  0.59801459]])\n","expected_v = np.asarray([\n","  [ 0.69966,     0.68908382,  0.67851319,  0.66794809,  0.65738853,],\n","  [ 0.64683452,  0.63628604,  0.6257431,   0.61520571,  0.60467385,],\n","  [ 0.59414753,  0.58362676,  0.57311152,  0.56260183,  0.55209767,],\n","  [ 0.54159906,  0.53110598,  0.52061845,  0.51013645,  0.49966,   ]])\n","expected_m = np.asarray([\n","  [ 0.48,        0.49947368,  0.51894737,  0.53842105,  0.55789474],\n","  [ 0.57736842,  0.59684211,  0.61631579,  0.63578947,  0.65526316],\n","  [ 0.67473684,  0.69421053,  0.71368421,  0.73315789,  0.75263158],\n","  [ 0.77210526,  0.79157895,  0.81105263,  0.83052632,  0.85      ]])\n","\n","# You should see relative errors around e-7 or less\n","print('next_w error: ', rel_error(expected_next_w, next_w))\n","print('v error: ', rel_error(expected_v, config['v']))\n","print('m error: ', rel_error(expected_m, config['m']))"]},{"cell_type":"markdown","metadata":{"id":"NzzX-c-EW4pB"},"source":["Обучите пару глубоких сетей с испольованием RMSProp и Adam алгоритмов обновления весов и сравните результаты обучения."]},{"cell_type":"markdown","metadata":{"id":"-lYjPmkaW4pC"},"source":["Получите лучшую полносвязную сеть для классификации вашего набора данных. На наборе CIFAR-10 необходимо получить accuracy не ниже 50 % на валидационном наборе."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"j2K8rQKhW4pC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701876075228,"user_tz":-240,"elapsed":941532,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"4e47f3da-5ebd-4abc-b91d-df468525416a"},"outputs":[{"output_type":"stream","name":"stdout","text":[" 1) hsize=2 | hdim=387 | dp=0.88 | wscale=6.42e-04 | lr=2.247e-04 | val_acc=0.9785\n"," 2) hsize=2 | hdim=484 | dp=0.97 | wscale=1.22e-04 | lr=9.135e-04 | val_acc=0.9783\n"," 3) hsize=2 | hdim=315 | dp=0.85 | wscale=2.05e-04 | lr=2.814e-04 | val_acc=0.9607\n"," 4) hsize=2 | hdim=371 | dp=0.94 | wscale=1.86e-04 | lr=1.817e-04 | val_acc=0.9793\n"," 5) hsize=2 | hdim=418 | dp=0.84 | wscale=1.69e-04 | lr=1.014e-04 | val_acc=0.9730\n"," 6) hsize=2 | hdim=458 | dp=0.90 | wscale=2.80e-04 | lr=1.533e-04 | val_acc=0.9786\n"," 7) hsize=1 | hdim=484 | dp=0.87 | wscale=6.37e-04 | lr=1.913e-04 | val_acc=0.9687\n"," 8) hsize=1 | hdim=341 | dp=0.93 | wscale=3.53e-04 | lr=4.721e-04 | val_acc=0.9712\n"," 9) hsize=2 | hdim=351 | dp=0.85 | wscale=2.52e-04 | lr=7.584e-04 | val_acc=0.9788\n","10) hsize=2 | hdim=460 | dp=0.85 | wscale=3.84e-04 | lr=8.160e-04 | val_acc=0.9713\n","\n","Best validation accuracy: 0.9793\n"]}],"source":["best_model = None\n","################################################################################\n","# TODO: Train the best FullyConnectedNet that you can on CIFAR-10. You might   #\n","# find batch/layer normalization and dropout useful. Store your best model in  #\n","# the best_model variable.                                                     #\n","################################################################################\n","# *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","def random_search(sample_size):\n","  for _ in range(sample_size):\n","    hsize = np.random.randint(low=1, high=3)\n","    hdim = np.random.randint(low=300, high=500)\n","    dp = np.around(np.random.uniform(low=8, high=10) / 10, decimals=2)\n","    wscale = 10 ** np.random.uniform(low=-4, high=-3)\n","    lr = 10 ** np.random.uniform(low=-4, high=-3)\n","\n","    yield hsize, hdim, dp, wscale, lr\n","\n","# Initialize the best validation accuracy.\n","best_val_acc = 0.0\n","\n","# Batch size (bsize) is kept unchanged during the random search.\n","bsize = 100\n","\n","# Test 10 parameter combinations.\n","for i, params in enumerate(random_search(10)):\n","  hsize, hdim, dp, wscale, lr = params\n","\n","  # Define 'hdim' hidden layers with size 'hsize'\n","  hidden_layers = [hdim] * hsize\n","  model = FullyConnectedNet(hidden_layers, weight_scale=wscale,\n","                            normalization=\"batchnorm\", dropout=dp)\n","\n","  solver = Solver(model, data,\n","                  num_epochs=5, batch_size=bsize,\n","                  update_rule='adam',\n","                  optim_config={'learning_rate': lr},\n","                  verbose=False)\n","\n","  solver.train()\n","\n","  y_val_pred = np.argmax(model.loss(data['X_val']), axis=1)\n","  val_acc = (y_val_pred == data['y_val']).mean()\n","\n","  print('%2d) hsize=%1d | hdim=%3d | dp=%.2f | wscale=%.2e | lr=%.3e | val_acc=%.4f' %\n","        (i+1, hsize, hdim, dp, wscale, lr, val_acc))\n","\n","  if val_acc > best_val_acc:\n","    best_val_acc = val_acc\n","    best_model = model\n","\n","print('\\nBest validation accuracy: %.4f' % best_val_acc)\n","\n","# *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","################################################################################\n","#                              END OF YOUR CODE                                #\n","################################################################################"]},{"cell_type":"markdown","metadata":{"id":"7gqYjif0W4pD"},"source":["Получите оценку accuracy для валидационной и тестовой выборок."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HpTYD4gCW4pD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701876746551,"user_tz":-240,"elapsed":699,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"392a1be3-f64b-4cc2-f2c2-5ac8100f6a45"},"outputs":[{"output_type":"stream","name":"stdout","text":["Validation set accuracy:  0.9675833333333334\n","Test set accuracy:  0.9709\n"]}],"source":["y_test_pred = np.argmax(best_model.loss(data['X_test']), axis=1)\n","y_val_pred = np.argmax(best_model.loss(data['X_val']), axis=1)\n","print('Validation set accuracy: ', (y_val_pred == data['y_val']).mean())\n","print('Test set accuracy: ', (y_test_pred == data['y_test']).mean())"]},{"cell_type":"markdown","metadata":{"id":"FGT6CC13W4pD"},"source":["# Нормализация по мини-батчам\n","\n","Идея нормализации по мини-батчам предложена в работе [1]\n","\n","[1] Sergey Ioffe and Christian Szegedy, \"Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift\", ICML 2015."]},{"cell_type":"markdown","metadata":{"id":"xGdcGsKKW4pD"},"source":["Реализуйте прямой проход для слоя батч-нормализации - функция batchnorm_forward в scripts/layers.py . Проверьте свою реализацию, запустив следующий код:"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"50kVWP_0W4pD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702367646426,"user_tz":-240,"elapsed":338,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"1d1d72dc-f9b9-49f6-d1a8-46f9e9ba6b5e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Before batch normalization:\n","  means:  [ -2.3814598  -13.18038246   1.91780462]\n","  stds:   [27.18502186 34.21455511 37.68611762]\n","\n","After batch normalization (gamma=1, beta=0)\n","  means:  [5.99520433e-17 7.16093851e-17 8.32667268e-19]\n","  stds:   [0.99999999 1.         1.        ]\n","\n","After batch normalization (gamma= [1. 2. 3.] , beta= [11. 12. 13.] )\n","  means:  [11. 12. 13.]\n","  stds:   [0.99999999 1.99999999 2.99999999]\n","\n"]}],"source":["# Check the training-time forward pass by checking means and variances\n","# of features both before and after batch normalization\n","\n","# Simulate the forward pass for a two-layer network\n","np.random.seed(231)\n","N, D1, D2, D3 = 200, 50, 60, 3\n","X = np.random.randn(N, D1)\n","W1 = np.random.randn(D1, D2)\n","W2 = np.random.randn(D2, D3)\n","a = np.maximum(0, X.dot(W1)).dot(W2)\n","\n","print('Before batch normalization:')\n","print_mean_std(a,axis=0)\n","\n","gamma = np.ones((D3,))\n","beta = np.zeros((D3,))\n","# Means should be close to zero and stds close to one\n","print('After batch normalization (gamma=1, beta=0)')\n","a_norm, _ = batchnorm_forward(a, gamma, beta, {'mode': 'train'})\n","print_mean_std(a_norm,axis=0)\n","\n","gamma = np.asarray([1.0, 2.0, 3.0])\n","beta = np.asarray([11.0, 12.0, 13.0])\n","# Now means should be close to beta and stds close to gamma\n","print('After batch normalization (gamma=', gamma, ', beta=', beta, ')')\n","a_norm, _ = batchnorm_forward(a, gamma, beta, {'mode': 'train'})\n","print_mean_std(a_norm,axis=0)"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"VaDrQsAnW4pE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702367665841,"user_tz":-240,"elapsed":298,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"9e18e8a9-aa54-4ffc-c031-105e8a58cc90"},"outputs":[{"output_type":"stream","name":"stdout","text":["After batch normalization (test-time):\n","  means:  [-0.03927353 -0.04349151 -0.10452686]\n","  stds:   [1.01531399 1.01238345 0.97819961]\n","\n"]}],"source":["# Check the test-time forward pass by running the training-time\n","# forward pass many times to warm up the running averages, and then\n","# checking the means and variances of activations after a test-time\n","# forward pass.\n","\n","np.random.seed(231)\n","N, D1, D2, D3 = 200, 50, 60, 3\n","W1 = np.random.randn(D1, D2)\n","W2 = np.random.randn(D2, D3)\n","\n","bn_param = {'mode': 'train'}\n","gamma = np.ones(D3)\n","beta = np.zeros(D3)\n","\n","for t in range(50):\n","  X = np.random.randn(N, D1)\n","  a = np.maximum(0, X.dot(W1)).dot(W2)\n","  batchnorm_forward(a, gamma, beta, bn_param)\n","\n","bn_param['mode'] = 'test'\n","X = np.random.randn(N, D1)\n","a = np.maximum(0, X.dot(W1)).dot(W2)\n","a_norm, _ = batchnorm_forward(a, gamma, beta, bn_param)\n","\n","# Means should be close to zero and stds close to one, but will be\n","# noisier than training-time forward passes.\n","print('After batch normalization (test-time):')\n","print_mean_std(a_norm,axis=0)"]},{"cell_type":"markdown","metadata":{"id":"sFRgSoQzW4pE"},"source":["Реализуйте обратный проход в функции batchnorm_backward."]},{"cell_type":"code","execution_count":14,"metadata":{"id":"uf1qEBG_W4pE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702367690880,"user_tz":-240,"elapsed":334,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"048f1e6b-8973-42b9-9938-244668b8ab95"},"outputs":[{"output_type":"stream","name":"stdout","text":["dx error:  1.6674604875341426e-09\n","dgamma error:  7.417225040694815e-13\n","dbeta error:  2.379446949959628e-12\n"]}],"source":["# Gradient check batchnorm backward pass\n","np.random.seed(231)\n","N, D = 4, 5\n","x = 5 * np.random.randn(N, D) + 12\n","gamma = np.random.randn(D)\n","beta = np.random.randn(D)\n","dout = np.random.randn(N, D)\n","\n","bn_param = {'mode': 'train'}\n","fx = lambda x: batchnorm_forward(x, gamma, beta, bn_param)[0]\n","fg = lambda a: batchnorm_forward(x, a, beta, bn_param)[0]\n","fb = lambda b: batchnorm_forward(x, gamma, b, bn_param)[0]\n","\n","dx_num = eval_numerical_gradient_array(fx, x, dout)\n","da_num = eval_numerical_gradient_array(fg, gamma.copy(), dout)\n","db_num = eval_numerical_gradient_array(fb, beta.copy(), dout)\n","\n","_, cache = batchnorm_forward(x, gamma, beta, bn_param)\n","dx, dgamma, dbeta = batchnorm_backward(dout, cache)\n","#You should expect to see relative errors between 1e-13 and 1e-8\n","print('dx error: ', rel_error(dx_num, dx))\n","print('dgamma error: ', rel_error(da_num, dgamma))\n","print('dbeta error: ', rel_error(db_num, dbeta))"]},{"cell_type":"markdown","metadata":{"id":"ub4yYfLbW4pF"},"source":["Измените реализацию класса FullyConnectedNet, добавив батч-нормализацию.\n","Если флаг normalization == \"batchnorm\", то вам необходимо вставить слой батч-нормализации перед каждым слоем активации ReLU, кроме выхода сети."]},{"cell_type":"code","execution_count":15,"metadata":{"id":"V9x3nKbXW4pF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702367810624,"user_tz":-240,"elapsed":3412,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"195401f2-c50f-40b6-b65d-9dfb7e7f9530"},"outputs":[{"output_type":"stream","name":"stdout","text":["Running check with reg =  0\n","Initial loss:  2.2611955101340957\n","W1 relative error: 1.10e-04\n","W2 relative error: 3.11e-06\n","W3 relative error: 4.05e-10\n","b1 relative error: 2.66e-07\n","b2 relative error: 2.72e-07\n","b3 relative error: 1.01e-10\n","beta1 relative error: 7.33e-09\n","beta2 relative error: 1.89e-09\n","gamma1 relative error: 6.96e-09\n","gamma2 relative error: 2.41e-09\n","\n","Running check with reg =  3.14\n","Initial loss:  6.996533220108303\n","W1 relative error: 1.98e-06\n","W2 relative error: 2.29e-06\n","W3 relative error: 2.79e-08\n","b1 relative error: 1.38e-08\n","b2 relative error: 7.99e-07\n","b3 relative error: 2.10e-10\n","beta1 relative error: 6.65e-09\n","beta2 relative error: 3.39e-09\n","gamma1 relative error: 6.27e-09\n","gamma2 relative error: 5.28e-09\n"]}],"source":["np.random.seed(231)\n","N, D, H1, H2, C = 2, 15, 20, 30, 10\n","X = np.random.randn(N, D)\n","y = np.random.randint(C, size=(N,))\n","\n","# You should expect losses between 1e-4~1e-10 for W,\n","# losses between 1e-08~1e-10 for b,\n","# and losses between 1e-08~1e-09 for beta and gammas.\n","for reg in [0, 3.14]:\n","  print('Running check with reg = ', reg)\n","  model = FullyConnectedNet([H1, H2], input_dim=D, num_classes=C,\n","                            reg=reg, weight_scale=5e-2, dtype=np.float64,\n","                            normalization='batchnorm')\n","\n","  loss, grads = model.loss(X, y)\n","  print('Initial loss: ', loss)\n","\n","  for name in sorted(grads):\n","    f = lambda _: model.loss(X, y)[0]\n","    grad_num = eval_numerical_gradient(f, model.params[name], verbose=False, h=1e-5)\n","    print('%s relative error: %.2e' % (name, rel_error(grad_num, grads[name])))\n","  if reg == 0: print()"]},{"cell_type":"markdown","metadata":{"id":"KPu1Sqp8W4pF"},"source":["Обучите 6-ти слойную сеть на наборе из 1000 изображений с батч-нормализацией и без нее"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"JWeuOWWZW4pF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702367882095,"user_tz":-240,"elapsed":14859,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"a5e4e98a-78d3-4da0-86ff-5a18dde44bd2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Solver with batch norm:\n","(Iteration 1 / 200) loss: 2.348602\n","(Epoch 0 / 10) train acc: 0.074000; val_acc: 0.092167\n","(Epoch 1 / 10) train acc: 0.774000; val_acc: 0.727417\n","(Iteration 21 / 200) loss: 1.372737\n","(Epoch 2 / 10) train acc: 0.933000; val_acc: 0.859917\n","(Iteration 41 / 200) loss: 0.713416\n","(Epoch 3 / 10) train acc: 0.959000; val_acc: 0.881083\n","(Iteration 61 / 200) loss: 0.533002\n","(Epoch 4 / 10) train acc: 0.981000; val_acc: 0.887333\n","(Iteration 81 / 200) loss: 0.330474\n","(Epoch 5 / 10) train acc: 0.973000; val_acc: 0.879333\n","(Iteration 101 / 200) loss: 0.368210\n","(Epoch 6 / 10) train acc: 0.978000; val_acc: 0.877750\n","(Iteration 121 / 200) loss: 0.196951\n","(Epoch 7 / 10) train acc: 0.979000; val_acc: 0.872917\n","(Iteration 141 / 200) loss: 0.095423\n","(Epoch 8 / 10) train acc: 0.989000; val_acc: 0.868750\n","(Iteration 161 / 200) loss: 0.121772\n","(Epoch 9 / 10) train acc: 0.992000; val_acc: 0.892583\n","(Iteration 181 / 200) loss: 0.062703\n","(Epoch 10 / 10) train acc: 0.995000; val_acc: 0.895417\n","\n","Solver without batch norm:\n","(Iteration 1 / 200) loss: 2.302590\n","(Epoch 0 / 10) train acc: 0.150000; val_acc: 0.154583\n","(Epoch 1 / 10) train acc: 0.195000; val_acc: 0.191167\n","(Iteration 21 / 200) loss: 2.066000\n","(Epoch 2 / 10) train acc: 0.350000; val_acc: 0.332500\n","(Iteration 41 / 200) loss: 1.565551\n","(Epoch 3 / 10) train acc: 0.448000; val_acc: 0.424417\n","(Iteration 61 / 200) loss: 1.209196\n","(Epoch 4 / 10) train acc: 0.489000; val_acc: 0.445083\n","(Iteration 81 / 200) loss: 1.231482\n","(Epoch 5 / 10) train acc: 0.594000; val_acc: 0.530000\n","(Iteration 101 / 200) loss: 0.987545\n","(Epoch 6 / 10) train acc: 0.650000; val_acc: 0.571167\n","(Iteration 121 / 200) loss: 0.818723\n","(Epoch 7 / 10) train acc: 0.603000; val_acc: 0.527083\n","(Iteration 141 / 200) loss: 0.811725\n","(Epoch 8 / 10) train acc: 0.767000; val_acc: 0.644000\n","(Iteration 161 / 200) loss: 0.884110\n","(Epoch 9 / 10) train acc: 0.871000; val_acc: 0.755583\n","(Iteration 181 / 200) loss: 0.519301\n","(Epoch 10 / 10) train acc: 0.928000; val_acc: 0.797750\n"]}],"source":["np.random.seed(231)\n","# Try training a very deep net with batchnorm\n","hidden_dims = [100, 100, 100, 100, 100]\n","\n","num_train = 1000\n","small_data = {\n","  'X_train': data['X_train'][:num_train],\n","  'y_train': data['y_train'][:num_train],\n","  'X_val': data['X_val'],\n","  'y_val': data['y_val'],\n","}\n","\n","weight_scale = 2e-2\n","bn_model = FullyConnectedNet(hidden_dims, weight_scale=weight_scale, normalization='batchnorm')\n","model = FullyConnectedNet(hidden_dims, weight_scale=weight_scale, normalization=None)\n","\n","print('Solver with batch norm:')\n","bn_solver = Solver(bn_model, small_data,\n","                num_epochs=10, batch_size=50,\n","                update_rule='adam',\n","                optim_config={\n","                  'learning_rate': 1e-3,\n","                },\n","                verbose=True,print_every=20)\n","bn_solver.train()\n","\n","print('\\nSolver without batch norm:')\n","solver = Solver(model, small_data,\n","                num_epochs=10, batch_size=50,\n","                update_rule='adam',\n","                optim_config={\n","                  'learning_rate': 1e-3,\n","                },\n","                verbose=True, print_every=20)\n","solver.train()"]},{"cell_type":"markdown","metadata":{"id":"KN5ED2zoW4pG"},"source":["Визуализируйте процесс обучения для двух сетей. Увеличилась ли скорость сходимости в случае с батч-нормализацией? Сделайте выводы."]},{"cell_type":"code","execution_count":17,"metadata":{"id":"_rqQl6dDW4pG","colab":{"base_uri":"https://localhost:8080/","height":924},"executionInfo":{"status":"ok","timestamp":1702367916072,"user_tz":-240,"elapsed":1358,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"4518e8bb-c266-4437-c707-0c787b3639ba"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x1500 with 3 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["def plot_training_history(title, label, baseline, bn_solvers, plot_fn, bl_marker='.', bn_marker='.', labels=None):\n","    \"\"\"utility function for plotting training history\"\"\"\n","    plt.title(title)\n","    plt.xlabel(label)\n","    bn_plots = [plot_fn(bn_solver) for bn_solver in bn_solvers]\n","    bl_plot = plot_fn(baseline)\n","    num_bn = len(bn_plots)\n","    for i in range(num_bn):\n","        label='with_norm'\n","        if labels is not None:\n","            label += str(labels[i])\n","        plt.plot(bn_plots[i], bn_marker, label=label)\n","    label='baseline'\n","    if labels is not None:\n","        label += str(labels[0])\n","    plt.plot(bl_plot, bl_marker, label=label)\n","    plt.legend(loc='lower center', ncol=num_bn+1)\n","\n","\n","plt.subplot(3, 1, 1)\n","plot_training_history('Training loss','Iteration', solver, [bn_solver], \\\n","                      lambda x: x.loss_history, bl_marker='o', bn_marker='o')\n","plt.subplot(3, 1, 2)\n","plot_training_history('Training accuracy','Epoch', solver, [bn_solver], \\\n","                      lambda x: x.train_acc_history, bl_marker='-o', bn_marker='-o')\n","plt.subplot(3, 1, 3)\n","plot_training_history('Validation accuracy','Epoch', solver, [bn_solver], \\\n","                      lambda x: x.val_acc_history, bl_marker='-o', bn_marker='-o')\n","\n","plt.gcf().set_size_inches(15, 15)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"EL4ASHQlW4pH"},"source":["Обучите 6-тислойную сеть с батч-нормализацией и без нее, используя разные размеры батча. Визуализируйте графики обучения. Сделайте выводы по результатам эксперимента."]},{"cell_type":"code","execution_count":18,"metadata":{"id":"ztDRzRPuW4pH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702368122094,"user_tz":-240,"elapsed":60954,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"1119635b-8247-4e52-ef01-50fdc98d8777"},"outputs":[{"output_type":"stream","name":"stdout","text":["No normalization: batch size =  5\n","Normalization: batch size =  5\n","Normalization: batch size =  10\n","Normalization: batch size =  50\n"]}],"source":["def run_batchsize_experiments(normalization_mode):\n","    np.random.seed(231)\n","    # Try training a very deep net with batchnorm\n","    hidden_dims = [100, 100, 100, 100, 100]\n","    num_train = 1000\n","    small_data = {\n","      'X_train': data['X_train'][:num_train],\n","      'y_train': data['y_train'][:num_train],\n","      'X_val': data['X_val'],\n","      'y_val': data['y_val'],\n","    }\n","    n_epochs=10\n","    weight_scale = 2e-2\n","    batch_sizes = [5,10,50]\n","    lr = 10**(-3.5)\n","    solver_bsize = batch_sizes[0]\n","\n","    print('No normalization: batch size = ',solver_bsize)\n","    model = FullyConnectedNet(hidden_dims, weight_scale=weight_scale, normalization=None)\n","    solver = Solver(model, small_data,\n","                    num_epochs=n_epochs, batch_size=solver_bsize,\n","                    update_rule='adam',\n","                    optim_config={\n","                      'learning_rate': lr,\n","                    },\n","                    verbose=False)\n","    solver.train()\n","\n","    bn_solvers = []\n","    for i in range(len(batch_sizes)):\n","        b_size=batch_sizes[i]\n","        print('Normalization: batch size = ',b_size)\n","        bn_model = FullyConnectedNet(hidden_dims, weight_scale=weight_scale, normalization=normalization_mode)\n","        bn_solver = Solver(bn_model, small_data,\n","                        num_epochs=n_epochs, batch_size=b_size,\n","                        update_rule='adam',\n","                        optim_config={\n","                          'learning_rate': lr,\n","                        },\n","                        verbose=False)\n","        bn_solver.train()\n","        bn_solvers.append(bn_solver)\n","\n","    return bn_solvers, solver, batch_sizes\n","\n","batch_sizes = [5,10,50]\n","bn_solvers_bsize, solver_bsize, batch_sizes = run_batchsize_experiments('batchnorm')"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"NstPNsuPW4pH","colab":{"base_uri":"https://localhost:8080/","height":643},"executionInfo":{"status":"ok","timestamp":1702368130982,"user_tz":-240,"elapsed":1544,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"71eb502e-a2cf-4fe1-f375-8b5f45e021cf"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x1000 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.subplot(2, 1, 1)\n","plot_training_history('Training accuracy (Batch Normalization)','Epoch', solver_bsize, bn_solvers_bsize, \\\n","                      lambda x: x.train_acc_history, bl_marker='-^', bn_marker='-o', labels=batch_sizes)\n","plt.subplot(2, 1, 2)\n","plot_training_history('Validation accuracy (Batch Normalization)','Epoch', solver_bsize, bn_solvers_bsize, \\\n","                      lambda x: x.val_acc_history, bl_marker='-^', bn_marker='-o', labels=batch_sizes)\n","\n","plt.gcf().set_size_inches(15, 10)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"grZvzIGTW4pI"},"source":["# Dropout"]},{"cell_type":"markdown","metadata":{"id":"Tuoc3DeuW4pJ"},"source":["Реализуйте прямой проход для dropout-слоя в scripts/layers.py\n","\n","http://cs231n.github.io/neural-networks-2/#reg"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"a0JTgYlsW4pJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702368220148,"user_tz":-240,"elapsed":300,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"1d450f5a-b1b3-4f85-87e3-b275180925df"},"outputs":[{"output_type":"stream","name":"stdout","text":["Running tests with p =  0.25\n","Mean of input:  10.000207878477502\n","Mean of train-time output:  10.014059116977283\n","Mean of test-time output:  10.000207878477502\n","Fraction of train-time output set to zero:  0.749784\n","Fraction of test-time output set to zero:  0.0\n","\n","Running tests with p =  0.4\n","Mean of input:  10.000207878477502\n","Mean of train-time output:  9.977917658761159\n","Mean of test-time output:  10.000207878477502\n","Fraction of train-time output set to zero:  0.600796\n","Fraction of test-time output set to zero:  0.0\n","\n","Running tests with p =  0.7\n","Mean of input:  10.000207878477502\n","Mean of train-time output:  9.987811912159426\n","Mean of test-time output:  10.000207878477502\n","Fraction of train-time output set to zero:  0.30074\n","Fraction of test-time output set to zero:  0.0\n","\n"]}],"source":["np.random.seed(231)\n","x = np.random.randn(500, 500) + 10\n","\n","for p in [0.25, 0.4, 0.7]:\n","  out, _ = dropout_forward(x, {'mode': 'train', 'p': p})\n","  out_test, _ = dropout_forward(x, {'mode': 'test', 'p': p})\n","\n","  print('Running tests with p = ', p)\n","  print('Mean of input: ', x.mean())\n","  print('Mean of train-time output: ', out.mean())\n","  print('Mean of test-time output: ', out_test.mean())\n","  print('Fraction of train-time output set to zero: ', (out == 0).mean())\n","  print('Fraction of test-time output set to zero: ', (out_test == 0).mean())\n","  print()"]},{"cell_type":"markdown","metadata":{"id":"618mCqHyW4pK"},"source":["Реализуйте обратный проход для dropout-слоя"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"99OHpeInW4pK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702368235753,"user_tz":-240,"elapsed":446,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"9eb8e8f2-4f94-4b86-90ac-9d2a31ef0e64"},"outputs":[{"output_type":"stream","name":"stdout","text":["dx relative error:  5.44560814873387e-11\n"]}],"source":["np.random.seed(231)\n","x = np.random.randn(10, 10) + 10\n","dout = np.random.randn(*x.shape)\n","\n","dropout_param = {'mode': 'train', 'p': 0.2, 'seed': 123}\n","out, cache = dropout_forward(x, dropout_param)\n","dx = dropout_backward(dout, cache)\n","dx_num = eval_numerical_gradient_array(lambda xx: dropout_forward(xx, dropout_param)[0], x, dout)\n","\n","# Error should be around e-10 or less\n","print('dx relative error: ', rel_error(dx, dx_num))"]},{"cell_type":"markdown","metadata":{"id":"JQdAFCb7W4pL"},"source":["Добавьте в реализацию класса FullyConnectedNet поддержку dropout. Если параметр dropout != 1, то добавьте в модель dropout-слой после каждого слоя активации. Проверьте свою реализацию"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"yhuIVASeW4pL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702368264684,"user_tz":-240,"elapsed":2275,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"3a12980b-1389-40f7-cb19-5774bc1215ea"},"outputs":[{"output_type":"stream","name":"stdout","text":["Running check with dropout =  1\n","Initial loss:  2.3004790897684924\n","W1 relative error: 1.48e-07\n","W2 relative error: 2.21e-05\n","W3 relative error: 3.53e-07\n","b1 relative error: 5.38e-09\n","b2 relative error: 2.09e-09\n","b3 relative error: 5.80e-11\n","\n","Running check with dropout =  0.75\n","Initial loss:  2.302371489704412\n","W1 relative error: 1.90e-07\n","W2 relative error: 4.76e-06\n","W3 relative error: 2.60e-08\n","b1 relative error: 4.73e-09\n","b2 relative error: 1.82e-09\n","b3 relative error: 1.70e-10\n","\n","Running check with dropout =  0.5\n","Initial loss:  2.3042759220785896\n","W1 relative error: 3.11e-07\n","W2 relative error: 1.84e-08\n","W3 relative error: 5.35e-08\n","b1 relative error: 5.37e-09\n","b2 relative error: 2.99e-09\n","b3 relative error: 1.13e-10\n","\n"]}],"source":["np.random.seed(231)\n","N, D, H1, H2, C = 2, 15, 20, 30, 10\n","X = np.random.randn(N, D)\n","y = np.random.randint(C, size=(N,))\n","\n","for dropout in [1, 0.75, 0.5]:\n","  print('Running check with dropout = ', dropout)\n","  model = FullyConnectedNet([H1, H2], input_dim=D, num_classes=C,\n","                            weight_scale=5e-2, dtype=np.float64,\n","                            dropout=dropout, seed=123)\n","\n","  loss, grads = model.loss(X, y)\n","  print('Initial loss: ', loss)\n","\n","  # Relative errors should be around e-6 or less; Note that it's fine\n","  # if for dropout=1 you have W2 error be on the order of e-5.\n","  for name in sorted(grads):\n","    f = lambda _: model.loss(X, y)[0]\n","    grad_num = eval_numerical_gradient(f, model.params[name], verbose=False, h=1e-5)\n","    print('%s relative error: %.2e' % (name, rel_error(grad_num, grads[name])))\n","  print()"]},{"cell_type":"markdown","metadata":{"id":"LefX5l3rW4pL"},"source":["Обучите две двухслойные сети с dropout-слоем (вероятность отсева 0,25) и без на наборе из 500 изображений. Визуализируйте графики обучения. Сделайте выводы по результатам эксперимента"]},{"cell_type":"code","execution_count":23,"metadata":{"id":"s29RhtwIW4pL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702368335058,"user_tz":-240,"elapsed":46007,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"07211d66-5a67-4497-c2e9-f904b3389cb6"},"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","(Iteration 1 / 125) loss: 4.812551\n","(Epoch 0 / 25) train acc: 0.306000; val_acc: 0.242333\n","(Epoch 1 / 25) train acc: 0.724000; val_acc: 0.658750\n","(Epoch 2 / 25) train acc: 0.856000; val_acc: 0.752417\n","(Epoch 3 / 25) train acc: 0.916000; val_acc: 0.809000\n","(Epoch 4 / 25) train acc: 0.930000; val_acc: 0.794500\n","(Epoch 5 / 25) train acc: 0.968000; val_acc: 0.816583\n","(Epoch 6 / 25) train acc: 0.980000; val_acc: 0.821750\n","(Epoch 7 / 25) train acc: 0.992000; val_acc: 0.829417\n","(Epoch 8 / 25) train acc: 0.992000; val_acc: 0.841333\n","(Epoch 9 / 25) train acc: 0.998000; val_acc: 0.844167\n","(Epoch 10 / 25) train acc: 1.000000; val_acc: 0.845500\n","(Epoch 11 / 25) train acc: 1.000000; val_acc: 0.845833\n","(Epoch 12 / 25) train acc: 1.000000; val_acc: 0.849250\n","(Epoch 13 / 25) train acc: 1.000000; val_acc: 0.850500\n","(Epoch 14 / 25) train acc: 1.000000; val_acc: 0.851500\n","(Epoch 15 / 25) train acc: 1.000000; val_acc: 0.852250\n","(Epoch 16 / 25) train acc: 1.000000; val_acc: 0.853583\n","(Epoch 17 / 25) train acc: 1.000000; val_acc: 0.854250\n","(Epoch 18 / 25) train acc: 1.000000; val_acc: 0.855167\n","(Epoch 19 / 25) train acc: 1.000000; val_acc: 0.855750\n","(Epoch 20 / 25) train acc: 1.000000; val_acc: 0.855667\n","(Iteration 101 / 125) loss: 0.000556\n","(Epoch 21 / 25) train acc: 1.000000; val_acc: 0.855417\n","(Epoch 22 / 25) train acc: 1.000000; val_acc: 0.855667\n","(Epoch 23 / 25) train acc: 1.000000; val_acc: 0.855750\n","(Epoch 24 / 25) train acc: 1.000000; val_acc: 0.856083\n","(Epoch 25 / 25) train acc: 1.000000; val_acc: 0.855833\n","\n","0.25\n","(Iteration 1 / 125) loss: 10.911254\n","(Epoch 0 / 25) train acc: 0.362000; val_acc: 0.263417\n","(Epoch 1 / 25) train acc: 0.722000; val_acc: 0.647500\n","(Epoch 2 / 25) train acc: 0.858000; val_acc: 0.760667\n","(Epoch 3 / 25) train acc: 0.880000; val_acc: 0.788083\n","(Epoch 4 / 25) train acc: 0.900000; val_acc: 0.795500\n","(Epoch 5 / 25) train acc: 0.948000; val_acc: 0.829583\n","(Epoch 6 / 25) train acc: 0.962000; val_acc: 0.850917\n","(Epoch 7 / 25) train acc: 0.972000; val_acc: 0.855083\n","(Epoch 8 / 25) train acc: 0.984000; val_acc: 0.866333\n","(Epoch 9 / 25) train acc: 0.988000; val_acc: 0.860917\n","(Epoch 10 / 25) train acc: 0.988000; val_acc: 0.861750\n","(Epoch 11 / 25) train acc: 0.990000; val_acc: 0.865917\n","(Epoch 12 / 25) train acc: 0.992000; val_acc: 0.869250\n","(Epoch 13 / 25) train acc: 0.990000; val_acc: 0.869667\n","(Epoch 14 / 25) train acc: 0.992000; val_acc: 0.871333\n","(Epoch 15 / 25) train acc: 0.992000; val_acc: 0.867333\n","(Epoch 16 / 25) train acc: 1.000000; val_acc: 0.871583\n","(Epoch 17 / 25) train acc: 1.000000; val_acc: 0.877167\n","(Epoch 18 / 25) train acc: 1.000000; val_acc: 0.874583\n","(Epoch 19 / 25) train acc: 0.998000; val_acc: 0.867250\n","(Epoch 20 / 25) train acc: 0.998000; val_acc: 0.863167\n","(Iteration 101 / 125) loss: 0.110900\n","(Epoch 21 / 25) train acc: 1.000000; val_acc: 0.870167\n","(Epoch 22 / 25) train acc: 1.000000; val_acc: 0.879333\n","(Epoch 23 / 25) train acc: 1.000000; val_acc: 0.881667\n","(Epoch 24 / 25) train acc: 0.998000; val_acc: 0.879917\n","(Epoch 25 / 25) train acc: 0.996000; val_acc: 0.880583\n","\n"]}],"source":["# Train two identical nets, one with dropout and one without\n","np.random.seed(231)\n","num_train = 500\n","small_data = {\n","  'X_train': data['X_train'][:num_train],\n","  'y_train': data['y_train'][:num_train],\n","  'X_val': data['X_val'],\n","  'y_val': data['y_val'],\n","}\n","\n","solvers = {}\n","dropout_choices = [1, 0.25]\n","for dropout in dropout_choices:\n","  model = FullyConnectedNet([500], dropout=dropout)\n","  print(dropout)\n","\n","  solver = Solver(model, small_data,\n","                  num_epochs=25, batch_size=100,\n","                  update_rule='adam',\n","                  optim_config={\n","                    'learning_rate': 5e-4,\n","                  },\n","                  verbose=True, print_every=100)\n","  solver.train()\n","  solvers[dropout] = solver\n","  print()"]},{"cell_type":"code","execution_count":24,"metadata":{"id":"N66a-mN6W4pL","colab":{"base_uri":"https://localhost:8080/","height":616},"executionInfo":{"status":"ok","timestamp":1702368342402,"user_tz":-240,"elapsed":798,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"565a132b-35a9-4398-beed-9f2ca3f694f9"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x1500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Plot train and validation accuracies of the two models\n","\n","train_accs = []\n","val_accs = []\n","for dropout in dropout_choices:\n","  solver = solvers[dropout]\n","  train_accs.append(solver.train_acc_history[-1])\n","  val_accs.append(solver.val_acc_history[-1])\n","\n","plt.subplot(3, 1, 1)\n","for dropout in dropout_choices:\n","  plt.plot(solvers[dropout].train_acc_history, 'o', label='%.2f dropout' % dropout)\n","plt.title('Train accuracy')\n","plt.xlabel('Epoch')\n","plt.ylabel('Accuracy')\n","plt.legend(ncol=2, loc='lower right')\n","\n","plt.subplot(3, 1, 2)\n","for dropout in dropout_choices:\n","  plt.plot(solvers[dropout].val_acc_history, 'o', label='%.2f dropout' % dropout)\n","plt.title('Val accuracy')\n","plt.xlabel('Epoch')\n","plt.ylabel('Accuracy')\n","plt.legend(ncol=2, loc='lower right')\n","\n","plt.gcf().set_size_inches(15, 15)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"YJR9B1esW4pM"},"source":["# Сверточные нейронные сети (CNN)"]},{"cell_type":"markdown","metadata":{"id":"l_c3q0AFW4pM"},"source":["Реализуйте прямой проход для сверточного слоя - функция conv_forward_naive в scripts/layers.py юПроверьте свою реализацию, запустив код ниже"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"bGz1RXNfW4pM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702373967277,"user_tz":-240,"elapsed":342,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"bae9e920-1a52-43ec-bb47-0dd80fa113b1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Testing conv_forward_naive\n","difference:  2.2121476417505994e-08\n"]}],"source":["x_shape = (2, 3, 4, 4)\n","w_shape = (3, 3, 4, 4)\n","x = np.linspace(-0.1, 0.5, num=np.prod(x_shape)).reshape(x_shape)\n","w = np.linspace(-0.2, 0.3, num=np.prod(w_shape)).reshape(w_shape)\n","b = np.linspace(-0.1, 0.2, num=3)\n","\n","conv_param = {'stride': 2, 'pad': 1}\n","out, _ = conv_forward_naive(x, w, b, conv_param)\n","correct_out = np.array([[[[-0.08759809, -0.10987781],\n","                           [-0.18387192, -0.2109216 ]],\n","                          [[ 0.21027089,  0.21661097],\n","                           [ 0.22847626,  0.23004637]],\n","                          [[ 0.50813986,  0.54309974],\n","                           [ 0.64082444,  0.67101435]]],\n","                         [[[-0.98053589, -1.03143541],\n","                           [-1.19128892, -1.24695841]],\n","                          [[ 0.69108355,  0.66880383],\n","                           [ 0.59480972,  0.56776003]],\n","                          [[ 2.36270298,  2.36904306],\n","                           [ 2.38090835,  2.38247847]]]])\n","\n","# Compare your output to ours; difference should be around e-8\n","print('Testing conv_forward_naive')\n","print('difference: ', rel_error(out, correct_out))"]},{"cell_type":"markdown","metadata":{"id":"XmsPatC5W4pM"},"source":["Реализуйте обратный проход - функция conv_backward_naive в scripts/layers.py"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"cYtcl1THW4pM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702373970301,"user_tz":-240,"elapsed":1137,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"c7ad4ab4-7bb2-4ac4-ad2c-b1105a76d0c0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Testing conv_backward_naive function\n","dx error:  1.159803161159293e-08\n","dw error:  2.2471264748452487e-10\n","db error:  3.37264006649648e-11\n"]}],"source":["np.random.seed(231)\n","x = np.random.randn(4, 3, 5, 5)\n","w = np.random.randn(2, 3, 3, 3)\n","b = np.random.randn(2,)\n","dout = np.random.randn(4, 2, 5, 5)\n","conv_param = {'stride': 1, 'pad': 1}\n","\n","dx_num = eval_numerical_gradient_array(lambda x: conv_forward_naive(x, w, b, conv_param)[0], x, dout)\n","dw_num = eval_numerical_gradient_array(lambda w: conv_forward_naive(x, w, b, conv_param)[0], w, dout)\n","db_num = eval_numerical_gradient_array(lambda b: conv_forward_naive(x, w, b, conv_param)[0], b, dout)\n","\n","out, cache = conv_forward_naive(x, w, b, conv_param)\n","dx, dw, db = conv_backward_naive(dout, cache)\n","\n","# Your errors should be around e-8 or less.\n","print('Testing conv_backward_naive function')\n","print('dx error: ', rel_error(dx, dx_num))\n","print('dw error: ', rel_error(dw, dw_num))\n","print('db error: ', rel_error(db, db_num))"]},{"cell_type":"markdown","metadata":{"id":"wpg1UyvmW4pM"},"source":["Реализуйте прямой проход для max-pooling слоя -функция  max_pool_forward_naive в scripts/layers.py"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"F1ucf8uqW4pN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702373991535,"user_tz":-240,"elapsed":308,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"426fe080-d19e-4766-a838-863cfe05ade7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Testing max_pool_forward_naive function:\n","difference:  4.1666665157267834e-08\n"]}],"source":["x_shape = (2, 3, 4, 4)\n","x = np.linspace(-0.3, 0.4, num=np.prod(x_shape)).reshape(x_shape)\n","pool_param = {'pool_width': 2, 'pool_height': 2, 'stride': 2}\n","\n","out, _ = max_pool_forward_naive(x, pool_param)\n","\n","correct_out = np.array([[[[-0.26315789, -0.24842105],\n","                          [-0.20421053, -0.18947368]],\n","                         [[-0.14526316, -0.13052632],\n","                          [-0.08631579, -0.07157895]],\n","                         [[-0.02736842, -0.01263158],\n","                          [ 0.03157895,  0.04631579]]],\n","                        [[[ 0.09052632,  0.10526316],\n","                          [ 0.14947368,  0.16421053]],\n","                         [[ 0.20842105,  0.22315789],\n","                          [ 0.26736842,  0.28210526]],\n","                         [[ 0.32631579,  0.34105263],\n","                          [ 0.38526316,  0.4       ]]]])\n","\n","# Compare your output with ours. Difference should be on the order of e-8.\n","print('Testing max_pool_forward_naive function:')\n","print('difference: ', rel_error(out, correct_out))"]},{"cell_type":"markdown","metadata":{"id":"OcoRxe6DW4pN"},"source":["Реализуйте обратный проход для max-pooling слоя в max_pool_backward_naive ."]},{"cell_type":"code","execution_count":7,"metadata":{"id":"tlHwQPFJW4pN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702373995798,"user_tz":-240,"elapsed":319,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"f5ce2938-b73c-4462-ca48-eb54269ecbec"},"outputs":[{"output_type":"stream","name":"stdout","text":["Testing max_pool_backward_naive function:\n","dx error:  3.27562514223145e-12\n"]}],"source":["np.random.seed(231)\n","x = np.random.randn(3, 2, 8, 8)\n","dout = np.random.randn(3, 2, 4, 4)\n","pool_param = {'pool_height': 2, 'pool_width': 2, 'stride': 2}\n","\n","dx_num = eval_numerical_gradient_array(lambda x: max_pool_forward_naive(x, pool_param)[0], x, dout)\n","\n","out, cache = max_pool_forward_naive(x, pool_param)\n","dx = max_pool_backward_naive(dout, cache)\n","\n","# Your error should be on the order of e-12\n","print('Testing max_pool_backward_naive function:')\n","print('dx error: ', rel_error(dx, dx_num))"]},{"cell_type":"markdown","metadata":{"id":"m8w9ka1KW4pN"},"source":["В скрипте scripts/fast_layers.py представлены быстрые реализации слоев свертки и пуллинга, написанных с использованием  Cython.\n","\n","Для компиляции выполните следующую команду в директории scripts\n","\n","```bash\n","python setup.py build_ext --inplace\n","```\n"]},{"cell_type":"code","source":["%cd /content/drive/MyDrive/Colab\\ Notebooks/scripts3/scripts/\n","!python setup.py build_ext --inplace"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RpCZYZPjFxEU","executionInfo":{"status":"ok","timestamp":1702377820808,"user_tz":-240,"elapsed":1790,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"cf568f64-3e4f-4326-e6e5-edea7b9a0f82"},"execution_count":64,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/Colab Notebooks/scripts3/scripts\n"]}]},{"cell_type":"markdown","metadata":{"id":"HCx0XIRHW4pQ"},"source":["Сравните ваши реализации слоев свертки и пуллинга с быстрыми реализациями."]},{"cell_type":"code","execution_count":9,"metadata":{"id":"CsAn_lqFW4pQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702374032083,"user_tz":-240,"elapsed":10847,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"39910e48-ab66-405a-b52c-bf0d833db23b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Testing conv_forward_fast:\n","Naive: 2.906989s\n","Fast: 0.014299s\n","Speedup: 203.297974x\n","Difference:  4.926407851494105e-11\n","\n","Testing conv_backward_fast:\n","Naive: 7.440304s\n","Fast: 0.039191s\n","Speedup: 189.849541x\n","dx difference:  1.949764775345631e-11\n","dw difference:  3.681156828004736e-13\n","db difference:  3.481354613192702e-14\n"]}],"source":["# Rel errors should be around e-9 or less\n","from scripts.fast_layers import conv_forward_fast, conv_backward_fast\n","from time import time\n","np.random.seed(231)\n","x = np.random.randn(100, 3, 31, 31)\n","w = np.random.randn(25, 3, 3, 3)\n","b = np.random.randn(25,)\n","dout = np.random.randn(100, 25, 16, 16)\n","conv_param = {'stride': 2, 'pad': 1}\n","\n","t0 = time()\n","out_naive, cache_naive = conv_forward_naive(x, w, b, conv_param)\n","t1 = time()\n","out_fast, cache_fast = conv_forward_fast(x, w, b, conv_param)\n","t2 = time()\n","\n","print('Testing conv_forward_fast:')\n","print('Naive: %fs' % (t1 - t0))\n","print('Fast: %fs' % (t2 - t1))\n","print('Speedup: %fx' % ((t1 - t0) / (t2 - t1)))\n","print('Difference: ', rel_error(out_naive, out_fast))\n","\n","t0 = time()\n","dx_naive, dw_naive, db_naive = conv_backward_naive(dout, cache_naive)\n","t1 = time()\n","dx_fast, dw_fast, db_fast = conv_backward_fast(dout, cache_fast)\n","t2 = time()\n","\n","print('\\nTesting conv_backward_fast:')\n","print('Naive: %fs' % (t1 - t0))\n","print('Fast: %fs' % (t2 - t1))\n","print('Speedup: %fx' % ((t1 - t0) / (t2 - t1)))\n","print('dx difference: ', rel_error(dx_naive, dx_fast))\n","print('dw difference: ', rel_error(dw_naive, dw_fast))\n","print('db difference: ', rel_error(db_naive, db_fast))"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"nkiUm85xW4pR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702374048128,"user_tz":-240,"elapsed":2177,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"e28098eb-65e6-409c-d954-d5a793bf2e6e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Testing pool_forward_fast:\n","Naive: 0.380510s\n","fast: 0.007828s\n","speedup: 48.608900x\n","difference:  0.0\n","\n","Testing pool_backward_fast:\n","Naive: 1.010138s\n","fast: 0.022493s\n","speedup: 44.908758x\n","dx difference:  0.0\n"]}],"source":["# Relative errors should be close to 0.0\n","from scripts.fast_layers import max_pool_forward_fast, max_pool_backward_fast\n","np.random.seed(231)\n","x = np.random.randn(100, 3, 32, 32)\n","dout = np.random.randn(100, 3, 16, 16)\n","pool_param = {'pool_height': 2, 'pool_width': 2, 'stride': 2}\n","\n","t0 = time()\n","out_naive, cache_naive = max_pool_forward_naive(x, pool_param)\n","t1 = time()\n","out_fast, cache_fast = max_pool_forward_fast(x, pool_param)\n","t2 = time()\n","\n","print('Testing pool_forward_fast:')\n","print('Naive: %fs' % (t1 - t0))\n","print('fast: %fs' % (t2 - t1))\n","print('speedup: %fx' % ((t1 - t0) / (t2 - t1)))\n","print('difference: ', rel_error(out_naive, out_fast))\n","\n","t0 = time()\n","dx_naive = max_pool_backward_naive(dout, cache_naive)\n","t1 = time()\n","dx_fast = max_pool_backward_fast(dout, cache_fast)\n","t2 = time()\n","\n","print('\\nTesting pool_backward_fast:')\n","print('Naive: %fs' % (t1 - t0))\n","print('fast: %fs' % (t2 - t1))\n","print('speedup: %fx' % ((t1 - t0) / (t2 - t1)))\n","print('dx difference: ', rel_error(dx_naive, dx_fast))"]},{"cell_type":"markdown","metadata":{"id":"D0bM4UHPW4pR"},"source":["В layer_utils.py вы можете найти  часто используемые комбинации слоев, используемых в сверточных сетях. Ознакомьтесь с ними и запустите код ниже для проверки их работы"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"5Taiq7zbW4pR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702374053411,"user_tz":-240,"elapsed":7,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"8235d7ed-f442-40d8-8fa7-e9576e25d7c1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Testing conv_relu_pool\n","dx error:  9.591132621921372e-09\n","dw error:  5.802391137330214e-09\n","db error:  1.0146343411762047e-09\n"]}],"source":["from scripts.layer_utils import conv_relu_pool_forward, conv_relu_pool_backward\n","np.random.seed(231)\n","x = np.random.randn(2, 3, 16, 16)\n","w = np.random.randn(3, 3, 3, 3)\n","b = np.random.randn(3,)\n","dout = np.random.randn(2, 3, 8, 8)\n","conv_param = {'stride': 1, 'pad': 1}\n","pool_param = {'pool_height': 2, 'pool_width': 2, 'stride': 2}\n","\n","out, cache = conv_relu_pool_forward(x, w, b, conv_param, pool_param)\n","dx, dw, db = conv_relu_pool_backward(dout, cache)\n","\n","dx_num = eval_numerical_gradient_array(lambda x: conv_relu_pool_forward(x, w, b, conv_param, pool_param)[0], x, dout)\n","dw_num = eval_numerical_gradient_array(lambda w: conv_relu_pool_forward(x, w, b, conv_param, pool_param)[0], w, dout)\n","db_num = eval_numerical_gradient_array(lambda b: conv_relu_pool_forward(x, w, b, conv_param, pool_param)[0], b, dout)\n","\n","# Relative errors should be around e-8 or less\n","print('Testing conv_relu_pool')\n","print('dx error: ', rel_error(dx_num, dx))\n","print('dw error: ', rel_error(dw_num, dw))\n","print('db error: ', rel_error(db_num, db))"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"-ahDjbUlW4pR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702374058512,"user_tz":-240,"elapsed":604,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"1aefc8f1-533f-43a4-ac59-04538a8e92d1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Testing conv_relu:\n","dx error:  1.5218619980349303e-09\n","dw error:  2.702022646099404e-10\n","db error:  1.451272393591721e-10\n"]}],"source":["from scripts.layer_utils import conv_relu_forward, conv_relu_backward\n","np.random.seed(231)\n","x = np.random.randn(2, 3, 8, 8)\n","w = np.random.randn(3, 3, 3, 3)\n","b = np.random.randn(3,)\n","dout = np.random.randn(2, 3, 8, 8)\n","conv_param = {'stride': 1, 'pad': 1}\n","\n","out, cache = conv_relu_forward(x, w, b, conv_param)\n","dx, dw, db = conv_relu_backward(dout, cache)\n","\n","dx_num = eval_numerical_gradient_array(lambda x: conv_relu_forward(x, w, b, conv_param)[0], x, dout)\n","dw_num = eval_numerical_gradient_array(lambda w: conv_relu_forward(x, w, b, conv_param)[0], w, dout)\n","db_num = eval_numerical_gradient_array(lambda b: conv_relu_forward(x, w, b, conv_param)[0], b, dout)\n","\n","# Relative errors should be around e-8 or less\n","print('Testing conv_relu:')\n","print('dx error: ', rel_error(dx_num, dx))\n","print('dw error: ', rel_error(dw_num, dw))\n","print('db error: ', rel_error(db_num, db))"]},{"cell_type":"markdown","metadata":{"id":"wYl_gmZtW4pR"},"source":["Напишите реализацию класса ThreeLayerConvNet в scripts/classifiers/cnn.py . Вы можете использовать готовые реализации слоев и их комбинаций."]},{"cell_type":"markdown","metadata":{"id":"LZ5Xb8qzW4pR"},"source":["Проверьте вашу реализацию. Ожидается, что значение функции потерь softmax будет порядка `log(C)` для `C` классов для случая без регуляризации. В случае регуляризации значение функции потерь должно немного возрасти."]},{"cell_type":"code","execution_count":19,"metadata":{"id":"xJUxGP63W4pS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702374491091,"user_tz":-240,"elapsed":870,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"8afba7fe-6e60-410a-b2ac-abe8d39fae6a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Initial loss (no regularization):  2.302584696792098\n","Initial loss (with regularization):  2.4402715156302177\n"]}],"source":["model = ThreeLayerConvNet()\n","\n","N = 50\n","X = np.random.randn(N, 1, 28, 28)\n","y = np.random.randint(10, size=N)\n","\n","loss, grads = model.loss(X, y)\n","print('Initial loss (no regularization): ', loss)\n","\n","model.reg = 0.5\n","loss, grads = model.loss(X, y)\n","print('Initial loss (with regularization): ', loss)"]},{"cell_type":"markdown","metadata":{"id":"4DsKn6RqW4pS"},"source":["Проверьте реализацию обратного прохода"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"c5NLzQdcW4pS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702374497833,"user_tz":-240,"elapsed":2696,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"1eae0d7b-5f98-40cf-fbf1-3b9bfccb296a"},"outputs":[{"output_type":"stream","name":"stdout","text":["W1 max relative error: 1.380104e-04\n","W2 max relative error: 1.822723e-02\n","W3 max relative error: 3.064049e-04\n","b1 max relative error: 3.477652e-05\n","b2 max relative error: 2.516375e-03\n","b3 max relative error: 7.945660e-10\n"]}],"source":["num_inputs = 2\n","input_dim = (3, 16, 16)\n","reg = 0.0\n","num_classes = 10\n","np.random.seed(231)\n","X = np.random.randn(num_inputs, *input_dim)\n","y = np.random.randint(num_classes, size=num_inputs)\n","\n","model = ThreeLayerConvNet(num_filters=3, filter_size=3,\n","                          input_dim=input_dim, hidden_dim=7,\n","                          dtype=np.float64)\n","loss, grads = model.loss(X, y)\n","# Errors should be small, but correct implementations may have\n","# relative errors up to the order of e-2\n","for param_name in sorted(grads):\n","    f = lambda _: model.loss(X, y)[0]\n","    param_grad_num = eval_numerical_gradient(f, model.params[param_name], verbose=False, h=1e-6)\n","    e = rel_error(param_grad_num, grads[param_name])\n","    print('%s max relative error: %e' % (param_name, rel_error(param_grad_num, grads[param_name])))"]},{"cell_type":"markdown","metadata":{"id":"-ONXFaUNW4pT"},"source":["Попробуйте добиться эффекта переобучения. Обучите модель на небольшом наборе данных.Сравните значения accuracy на обучающих данных и на валидационных. Визуализируйте графики обучения"]},{"cell_type":"code","execution_count":56,"metadata":{"id":"fLva3xKOW4pT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702377047825,"user_tz":-240,"elapsed":232239,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"8fb2582b-fe21-4b12-a302-19116dc4451a"},"outputs":[{"output_type":"stream","name":"stdout","text":["(Iteration 1 / 30) loss: 2.328529\n","(Epoch 0 / 15) train acc: 0.320000; val_acc: 0.214917\n","(Iteration 2 / 30) loss: 2.038484\n","(Epoch 1 / 15) train acc: 0.320000; val_acc: 0.211083\n","(Iteration 3 / 30) loss: 2.051180\n","(Iteration 4 / 30) loss: 1.872170\n","(Epoch 2 / 15) train acc: 0.530000; val_acc: 0.368667\n","(Iteration 5 / 30) loss: 1.345711\n","(Iteration 6 / 30) loss: 1.397774\n","(Epoch 3 / 15) train acc: 0.730000; val_acc: 0.590167\n","(Iteration 7 / 30) loss: 1.290035\n","(Iteration 8 / 30) loss: 0.778347\n","(Epoch 4 / 15) train acc: 0.830000; val_acc: 0.654083\n","(Iteration 9 / 30) loss: 0.578115\n","(Iteration 10 / 30) loss: 0.567892\n","(Epoch 5 / 15) train acc: 0.800000; val_acc: 0.620833\n","(Iteration 11 / 30) loss: 0.660169\n","(Iteration 12 / 30) loss: 0.545609\n","(Epoch 6 / 15) train acc: 0.880000; val_acc: 0.655083\n","(Iteration 13 / 30) loss: 0.292125\n","(Iteration 14 / 30) loss: 0.223083\n","(Epoch 7 / 15) train acc: 0.870000; val_acc: 0.645167\n","(Iteration 15 / 30) loss: 0.357361\n","(Iteration 16 / 30) loss: 0.249804\n","(Epoch 8 / 15) train acc: 0.960000; val_acc: 0.726250\n","(Iteration 17 / 30) loss: 0.066518\n","(Iteration 18 / 30) loss: 0.107140\n","(Epoch 9 / 15) train acc: 1.000000; val_acc: 0.764500\n","(Iteration 19 / 30) loss: 0.040334\n","(Iteration 20 / 30) loss: 0.061900\n","(Epoch 10 / 15) train acc: 0.990000; val_acc: 0.730333\n","(Iteration 21 / 30) loss: 0.064947\n","(Iteration 22 / 30) loss: 0.047352\n","(Epoch 11 / 15) train acc: 1.000000; val_acc: 0.748583\n","(Iteration 23 / 30) loss: 0.010975\n","(Iteration 24 / 30) loss: 0.013172\n","(Epoch 12 / 15) train acc: 1.000000; val_acc: 0.750250\n","(Iteration 25 / 30) loss: 0.005200\n","(Iteration 26 / 30) loss: 0.010889\n","(Epoch 13 / 15) train acc: 0.990000; val_acc: 0.742333\n","(Iteration 27 / 30) loss: 0.024258\n","(Iteration 28 / 30) loss: 0.006062\n","(Epoch 14 / 15) train acc: 1.000000; val_acc: 0.753500\n","(Iteration 29 / 30) loss: 0.001949\n","(Iteration 30 / 30) loss: 0.012592\n","(Epoch 15 / 15) train acc: 1.000000; val_acc: 0.761667\n"]}],"source":["np.random.seed(231)\n","\n","num_train = 100\n","small_data = {\n","  'X_train': data['X_train'][:num_train],\n","  'y_train': data['y_train'][:num_train],\n","  'X_val': data['X_val'],\n","  'y_val': data['y_val'],\n","}\n","\n","model = ThreeLayerConvNet(weight_scale=1e-2)\n","\n","solver = Solver(model, small_data,\n","                num_epochs=15, batch_size=50,\n","                update_rule='adam',\n","                optim_config={\n","                  'learning_rate': 1e-3,\n","                },\n","                verbose=True, print_every=1)\n","solver.train()"]},{"cell_type":"code","execution_count":57,"metadata":{"id":"cEFyodfJW4pT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702377050669,"user_tz":-240,"elapsed":323,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"9e8e240e-4eba-4e8e-fac1-e29880ea06b2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Small data training accuracy: 1.0\n"]}],"source":["# Print final training accuracy\n","print(\n","    \"Small data training accuracy:\",\n","    solver.check_accuracy(small_data['X_train'], small_data['y_train'])\n",")"]},{"cell_type":"code","execution_count":58,"metadata":{"id":"0sYRH1lbW4pU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702377068962,"user_tz":-240,"elapsed":15099,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"878dfb8e-e524-4c53-ac05-f840bde1a7dd"},"outputs":[{"output_type":"stream","name":"stdout","text":["Small data validation accuracy: 0.7645\n"]}],"source":["# Print final validation accuracy\n","print(\n","    \"Small data validation accuracy:\",\n","    solver.check_accuracy(small_data['X_val'], small_data['y_val'])\n",")"]},{"cell_type":"code","execution_count":59,"metadata":{"id":"trQ9cHI3W4pU","colab":{"base_uri":"https://localhost:8080/","height":696},"executionInfo":{"status":"ok","timestamp":1702377072035,"user_tz":-240,"elapsed":889,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"52b3f37e-beb7-494d-bfa6-93ab1a3b01a4"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 2 Axes>"],"image/png":"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59nQJDnCUNIYR7vxao4dYzXicUITAACAm3n4WyDgOzKy8vTc4l8lSX8fk6yOrVt4voii/dLatx3ng8KrXhfRVrr6NSnpEs/XBQAA0Mw0aMTpiiuuUEpKSrVji5588kn9+OOPevfdd11SHGCWQ4fLNOXtn2U3pMv7t9OYfu3MKeSz+6QjeVJssnTzV9KenxyNIMJipY6DGWkCAADwkAaNOH333XcaNWpUte0jR47Ud9991+iiADMZhqEH3v9Fe/NLlBjdQo9cmmxOIZkfSxs+lCxW6dIXpMAQKfEcqdeVjn8JTQAAAB7ToOBUVFRU47pJAQEBKigoaHRRgJneWLlTn2/IVYDVoueu6aewoAYNzDbO4Txp4T2O82fdJbXt5/kaAAAAUKlBwalXr16aN29ete1vv/22kpKSGl0UYJbNOYV69JNMSdIDI3qoV/tIcwr5/C9S8T4purt0Lu32AQAAzNagn9IfeughXX755dq2bZsuuOACSdLixYv11ltvcXwTfNaRMpvueGu1So/adV73NrrprERzCtnyubT2LUkW6dLZUkCwOXUAAACgUoOC0+jRo/XRRx/pscce03vvvaeQkBD17t1bX331lc4991xX1wh4xN8XZmpLbpGiw4L09FV95Odn8XwRJfnSgimO86mTpYSBnq8BAAAA1TT44I2LL75YF198sStrAUzz2bpsvbFypyTp2bF9FB0WZE4hXzwkFe6VWiVK5//VnBoAAABQTYOOcfrxxx+1cuXKattXrlypn376qdFFAZ6059ARPfD+L5KkW8/tonO6tTGnkG3fSKtfdZy/9AUpMNScOgAAAFBNg4LT5MmTtWvXrmrb9+zZo8mTJze6KMBTjtrsmvL2zyooOao+CS11z0WnmVNIaZG04E7H+YETpU5nm1MHAAAAatSgqXqZmZnq379/te39+vVTZmZmo4sC3MVmN5SRlad9hSWKCQ/WD9sO6MftvyssyF/PX9NPAdYG/ZbQeItnSId2SpEdpKHTzakBAAAAtWpQcAoKClJubq46d+5cZXt2drb8/U1Y8waog0XrszVjQaay80uqXfePy5LVobVJU+N2LJMy/uM4f8k/paBwc+oAAABArRr08/pFF12kqVOnKj8/v3LboUOH9Je//EXDhg1zWXGAqyxan61Jc1fXGJokKcjfpJGmssPS/GPTW/v9UepygTl1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\n"},"metadata":{}}],"source":["plt.subplot(2, 1, 1)\n","plt.plot(solver.loss_history, 'o')\n","plt.xlabel('iteration')\n","plt.ylabel('loss')\n","\n","plt.subplot(2, 1, 2)\n","plt.plot(solver.train_acc_history, '-o')\n","plt.plot(solver.val_acc_history, '-o')\n","plt.legend(['train', 'val'], loc='upper left')\n","plt.xlabel('epoch')\n","plt.ylabel('accuracy')\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"MClN4qcyW4pU"},"source":["Обучите сеть на полном наборе данных. Выведите accuracy на обучающей и валидационной выборках"]},{"cell_type":"code","execution_count":60,"metadata":{"id":"IsUGoSY0W4pU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702377417998,"user_tz":-240,"elapsed":341710,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"a21780b6-ecc8-4c1f-cdc7-1aa9cd750b5f"},"outputs":[{"output_type":"stream","name":"stdout","text":["(Iteration 1 / 960) loss: 2.304141\n","(Epoch 0 / 1) train acc: 0.101000; val_acc: 0.108250\n","(Iteration 21 / 960) loss: 2.291584\n","(Iteration 41 / 960) loss: 2.300065\n","(Iteration 61 / 960) loss: 2.160850\n","(Iteration 81 / 960) loss: 0.821125\n","(Iteration 101 / 960) loss: 0.593503\n","(Iteration 121 / 960) loss: 0.373818\n","(Iteration 141 / 960) loss: 0.393592\n","(Iteration 161 / 960) loss: 0.390598\n","(Iteration 181 / 960) loss: 0.242981\n","(Iteration 201 / 960) loss: 0.239395\n","(Iteration 221 / 960) loss: 0.294125\n","(Iteration 241 / 960) loss: 0.237058\n","(Iteration 261 / 960) loss: 0.199963\n","(Iteration 281 / 960) loss: 0.096961\n","(Iteration 301 / 960) loss: 0.263528\n","(Iteration 321 / 960) loss: 0.110813\n","(Iteration 341 / 960) loss: 0.185809\n","(Iteration 361 / 960) loss: 0.164580\n","(Iteration 381 / 960) loss: 0.276298\n","(Iteration 401 / 960) loss: 0.324786\n","(Iteration 421 / 960) loss: 0.225364\n","(Iteration 441 / 960) loss: 0.334100\n","(Iteration 461 / 960) loss: 0.070533\n","(Iteration 481 / 960) loss: 0.193747\n","(Iteration 501 / 960) loss: 0.194336\n","(Iteration 521 / 960) loss: 0.165645\n","(Iteration 541 / 960) loss: 0.189585\n","(Iteration 561 / 960) loss: 0.086363\n","(Iteration 581 / 960) loss: 0.085490\n","(Iteration 601 / 960) loss: 0.132973\n","(Iteration 621 / 960) loss: 0.106729\n","(Iteration 641 / 960) loss: 0.029281\n","(Iteration 661 / 960) loss: 0.120902\n","(Iteration 681 / 960) loss: 0.109286\n","(Iteration 701 / 960) loss: 0.058827\n","(Iteration 721 / 960) loss: 0.048737\n","(Iteration 741 / 960) loss: 0.150062\n","(Iteration 761 / 960) loss: 0.092087\n","(Iteration 781 / 960) loss: 0.125097\n","(Iteration 801 / 960) loss: 0.137718\n","(Iteration 821 / 960) loss: 0.138033\n","(Iteration 841 / 960) loss: 0.186231\n","(Iteration 861 / 960) loss: 0.076692\n","(Iteration 881 / 960) loss: 0.165156\n","(Iteration 901 / 960) loss: 0.052685\n","(Iteration 921 / 960) loss: 0.073352\n","(Iteration 941 / 960) loss: 0.168874\n","(Epoch 1 / 1) train acc: 0.970000; val_acc: 0.965167\n"]}],"source":["model = ThreeLayerConvNet(weight_scale=0.001, hidden_dim=500, reg=0.001)\n","\n","solver = Solver(model, data,\n","                num_epochs=1, batch_size=50,\n","                update_rule='adam',\n","                optim_config={\n","                  'learning_rate': 1e-3,\n","                },\n","                verbose=True, print_every=20)\n","solver.train()"]},{"cell_type":"code","execution_count":61,"metadata":{"id":"1a0u455nW4pU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702377422005,"user_tz":-240,"elapsed":321,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"a03e3688-0ade-42f9-9d70-946d192b977c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Full data training accuracy: 0.94\n"]}],"source":["# Print final training accuracy\n","print(\n","    \"Full data training accuracy:\",\n","    solver.check_accuracy(small_data['X_train'], small_data['y_train'])\n",")"]},{"cell_type":"code","execution_count":62,"metadata":{"id":"0GJ3EGDzW4pU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702377440901,"user_tz":-240,"elapsed":16049,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"d19a829e-ad99-44aa-f876-66b9b8de1e32"},"outputs":[{"output_type":"stream","name":"stdout","text":["Full data validation accuracy: 0.9651666666666666\n"]}],"source":["# Print final validation accuracy\n","print(\n","    \"Full data validation accuracy:\",\n","    solver.check_accuracy(data['X_val'], data['y_val'])\n",")"]},{"cell_type":"markdown","metadata":{"id":"rGx6Y3R8W4pV"},"source":["Визуализируйте фильтры на первом слое обученной сети"]},{"cell_type":"code","execution_count":63,"metadata":{"id":"-uf56N9sW4pV","colab":{"base_uri":"https://localhost:8080/","height":422},"executionInfo":{"status":"ok","timestamp":1702377450300,"user_tz":-240,"elapsed":772,"user":{"displayName":"Полина Зиновьева","userId":"15849269375264551829"}},"outputId":"1cb8d8fb-4b0c-4f30-bedf-9b6c44c6d020"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x500 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAZQAAAGVCAYAAADZmQcFAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAANu0lEQVR4nO3dTajV9drH4bV066AUq11mKEHZy9ZAUqK3nRVlG7GwgVRmZA5sIFKmiFTUVptZkSllZCmJFVhUBL2ZphAioihWllBRSkQSGSZBUtE6ozM7J/9wf+34PFzXeN33uivrc9bk/NqdTqfTAoCiAf/rAwD4/0FQAIgQFAAiBAWACEEBIEJQAIgQFAAiBAWACEEBIKLrn/yydrtdmj906FD5hhEjRpR3TJs2rbxjw4YNpfmurn/0H91/tXr16vKO6dOnl+aHDh1avqH6Z7PVarXuu+++8o6jR4+W5l966aXyDYm/FwkPPPBAaf7XX38t3/Diiy+Wd+zatas0v3bt2vINkydPLu+YOnXqcT/jFwoAEYICQISgABAhKABECAoAEYICQISgABAhKABECAoAEYICQISgABAhKABECAoAEYICQISgABAhKABENH6lad26deUve/zxx0vzhw8fLt+QsHv37vKOgQMHlubvuuuu8g2vvPJKecf7779f3tHd3V2aP/3008s3JPz111/lHdV/z8aNG1e+IWHChAnlHcuXLy/Nz5s3r3xDwty5c0vzZ599dvmGW2+9tbyj0+kc9zN+oQAQISgARAgKABGCAkCEoAAQISgARAgKABGCAkCEoAAQISgARAgKABGCAkCEoAAQISgARAgKABGN30NZtWpV+cvWrFlTmn/jjTfKNyT09vaWd/T09JTmhw4dWr4h4e233y7v2LJlS2n+l19+Kd+Q0N/fX94xePDg0vyOHTvKNyQMGzasvGPBggWl+auuuqp8w8qVK8s7qv/dmzNnTvmGJm+ZJPiFAkCEoAAQISgARAgKABGCAkCEoAAQISgARAgKABGCAkCEoAAQISgARAgKABGCAkCEoAAQISgARAgKABHtTsOXV9rt9om+BYCTVJNU+IUCQISgABAhKABECAoAEYICQISgABAhKABECAoAEYICQISgABAhKABECAoAEYICQISgABAhKABECAoAEV1NP/jggw+Wv2z06NGl+bFjx5Zv6O3tLe+48soryzv++OOP0vzu3bvLNyRs3769vOOyyy4rzQ8aNKh8Q+IBuYsuuqi84+GHHy7NDx48uHzDjBkzyjtuv/328o6BAweW5ocPH16+YcWKFeUdV199dWn+008/Ld+wc+fO8o4m/EIBIEJQAIgQFAAiBAWACEEBIEJQAIgQFAAiBAWACEEBIEJQAIgQFAAiBAWACEEBIEJQAIgQFAAiBAWAiMYPbFUfiWm1Wq1HHnmkNP/JJ5+Ub0hIPGJ06NCh0nyn0ynfkHhUauPGjeUd1YeUuroa/zE+ob788svyjh07dpTmFy1aVL4h4cCBA+Ud1Uehenp6yjcknAx/Ha+//np5R39//3E/4xcKABGCAkCEoAAQISgARAgKABGCAkCEoAAQISgARAgKABGCAkCEoAAQISgARAgKABGCAkCEoAAQ0e40fFijr6+v/GVN/v/0/87EiRPLNySMHTu2vOPmm28uzf/888/lG9asWVPekXDxxReX5gcNGlS+Yd++feUdc+fOLe+YPn16ab63t7d8w4AB9f+dmXivZ/z48aX5s846q3zDpk2byjuqbrvttvKO1157LXDJ8fmFAkCEoAAQISgARAgKABGCAkCEoAAQISgARAgKABGCAkCEoAAQISgARAgKABGCAkCEoAAQISgARAgKABGNH9hqt9sn+hYATlJNUuEXCgARggJAhKAAECEoAEQICgARggJAhKAAECEoAEQICgARggJAhKAAECEoAEQICgARggJAhKAAECEoAER0Nf3gunXryl82bNiw0nx3d3f5hokTJ5Z3nHrqqeUdl156aWl+/Pjx5RueeeaZ8o6G77P9rerjbc8991z5hjlz5pR3JP5erFq1qjT/8ccfl2/YsGFDeUdPT095x7vvvluaX7hwYfmGt956q7zj888/L82PHDmyfEP1v71N+YUCQISgABAhKABECAoAEYICQISgABAhKABECAoAEYICQISgABAhKABECAoAEYICQISgABAhKABECAoAEY0f2Jo3b175y55//vnSfOJxrIRzzjmnvGPbtm2l+euuu658Q8IVV1xR3jFr1qzSfOJRqYTHHnusvGPIkCGl+cTjWAkffPBBeUf1Ub8333yzfEP18bdWq9X66aefSvPVPxOtVqv1448/lndceOGFx/2MXygARAgKABGCAkCEoAAQISgARAgKABGCAkCEoAAQISgARAgKABGCAkCEoAAQISgARAgKABGCAkBEu9PpdJp88MMPPyx/WV9fX2n+6aefLt8wf/788o6EXbt2leb3799fvmHmzJnlHXPnzi3vmDRpUmm++s5Oq5V5v2P06NHlHY8++mhpfujQoeUbpk2bVt7x3nvvlXdMmTKlND9hwoTyDXv27Cnv6Opq/OzUf/Tnn3+Wbxg1alR5x3fffXfcz/iFAkCEoAAQISgARAgKABGCAkCEoAAQISgARAgKABGCAkCEoAAQISgARAgKABGCAkCEoAAQISgARAgKABGNH9hqt9sn+hYATlJNUuEXCgARggJAhKAAECEoAEQICgARggJAhKAAECEoAEQICgARggJAhKAAECEoAEQICgARggJAhKAAECEoAER0Nf1gw3e4/tbLL79cmv/hhx/KNyxatKi8I2HZsmWl+dmzZ5dv6O7uLu9IuP7660vz/f395RtuuOGG8o7NmzeXd1x++eWl+WuvvbZ8w969e8s7Vq9eXd5x2mmnleZ37txZvuHJJ58s77j//vtL8ytWrCjfsGDBgvKOJvxCASBCUACIEBQAIgQFgAhBASBCUACIEBQAIgQFgAhBASBCUACIEBQAIgQFgAhBASBCUACIEBQAIgQFgIjGD2zdeeed5S/r6ekpzY8aNap8Q8KkSZPKO6ZMmVKaP+OMM8o3JCQedNqyZUtpvvooVcr3339f3vHss8+W5hOPYyXce++95R0bN24szVf/HWu1Mg9srVy5sjR/3nnnlW845ZRTyjua8AsFgAhBASBCUACIEBQAIgQFgAhBASBCUACIEBQAIgQFgAhBASBCUACIEBQAIgQFgAhBASBCUACIaPweyogRI8pftmTJktL8kSNHyjfMnj27vGPy5MnlHUOGDCnNHzx4sHxDwrFjx8o71q9fX5rv7+8v3zB16tTyjpkzZ5Z33HLLLaX5+fPnl29Yvnx5eceGDRvKO6p/tmbNmlW+IaH65zvxzs6AAf/Mbwe/UACIEBQAIgQFgAhBASBCUACIEBQAIgQFgAhBASBCUACIEBQAIgQFgAhBASBCUACIEBQAIgQFgAhBASCi3el0Oo0+2G6f6FsAOEk1SYVfKABECAoAEYICQISgABAhKABECAoAEYICQISgABAhKABECAoAEYICQISgABAhKABECAoAEYICQISgABDR1fSDl1xySfnLvvrqq9L8O++8U76hr6+vvGPp0qXlHQcOHCjNr127tnxD4tG0xYsXl3ccPXq0NP/ZZ5+Vb9i8eXN5R8I111xTmh8zZkz5hhdeeKG84+DBg+Udr776amn+oYceKt+QcOONN5bmf/vtt/IN27dvL+9owi8UACIEBYAIQQEgQlAAiBAUACIEBYAIQQEgQlAAiBAUACIEBYAIQQEgQlAAiBAUACIEBYAIQQEgQlAAiGj8wFZ3d3f5y7744ovS/E033VS+IWHbtm3lHZs2bSrNX3DBBeUbEpYsWVLesXDhwtL8yfI41lNPPVXeMX/+/NL8vn37yjckHtg699xzyzuOHDlSmj///PPLN3zzzTflHXfffXdp/p577infsGzZsvKOJvxCASBCUACIEBQAIgQFgAhBASBCUACIEBQAIgQFgAhBASBCUACIEBQAIgQFgAhBASBCUACIEBQAIhq/hzJs2LDyl3U6ndL8Rx99VL4h4fDhw+Ud3377bWl+3Lhx5RsSxowZU95x7Nix0vzSpUvLNyxevLi8I/F2RvWtnb1795ZvSPj999/LO3bv3l2aT/w7kvhnWn1L6ujRo+UbEn8dTfiFAkCEoAAQISgARAgKABGCAkCEoAAQISgARAgKABGCAkCEoAAQISgARAgKABGCAkCEoAAQISgARAgKABHtTsNXr9rt9om+BYCTVJNU+IUCQISgABAhKABECAoAEYICQISgABAhKABECAoAEYICQISgABAhKABECAoAEYICQISgABAhKABECAoAEV1NP/jEE0+Uv2zhwoWl+f3795dvGDt2bHnH+vXryzv6+vpK89OnTy/fsHXr1vIOgH/zCwWACEEBIEJQAIgQFAAiBAWACEEBIEJQAIgQFAAiBAWACEEBIEJQAIgQFAAiBAWACEEBIEJQAIho/B7KyJEjy1+2Z8+e0vzXX39dviFh8ODB5R3Dhw8vzZ955pnlGwCS/EIBIEJQAIgQFAAiBAWACEEBIEJQAIgQFAAiBAWACEEBIEJQAIgQFAAiBAWACEEBIEJQAIgQFAAiBAWAiMYPbM2YMaP8ZSNGjCjNT5w4sXxDwh133FHesXXr1tL8/v37yzcAJPmFAkCEoAAQISgARAgKABGCAkCEoAAQISgARAgKABGCAkCEoAAQISgARAgKABGCAkCEoAAQISgARAgKABGNH9jqdDon8g4A/o/zCwWACEEBIEJQAIgQFAAiBAWACEEBIEJQAIgQFAAiBAWAiH8B1cAKbxUh+T8AAAAASUVORK5CYII=\n"},"metadata":{}}],"source":["from scripts.vis_utils import visualize_grid\n","\n","grid = visualize_grid(model.params['W1'].transpose(0, 2, 3, 1))\n","plt.imshow(grid.astype('uint8'))\n","plt.axis('off')\n","plt.gcf().set_size_inches(5, 5)\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fTG1EA0gW4pV"},"outputs":[],"source":[]},{"cell_type":"markdown","source":["## Скрипты:"],"metadata":{"id":"IgoSuHnSoKPU"}},{"cell_type":"markdown","source":["### layers"],"metadata":{"id":"mCyBLvWFoPAp"}},{"cell_type":"code","source":["from builtins import range\n","import numpy as np\n","\n","\n","\n","def affine_forward(x, w, b):\n","    \"\"\"\n","    Computes the forward pass for an affine (fully-connected) layer.\n","\n","    The input x has shape (N, d_1, ..., d_k) and contains a minibatch of N\n","    examples, where each example x[i] has shape (d_1, ..., d_k). We will\n","    reshape each input into a vector of dimension D = d_1 * ... * d_k, and\n","    then transform it to an output vector of dimension M.\n","\n","    Inputs:\n","    - x: A numpy array containing input data, of shape (N, d_1, ..., d_k)\n","    - w: A numpy array of weights, of shape (D, M)\n","    - b: A numpy array of biases, of shape (M,)\n","\n","    Returns a tuple of:\n","    - out: output, of shape (N, M)\n","    - cache: (x, w, b)\n","    \"\"\"\n","    out = None\n","    ###########################################################################\n","    # TODO: Implement the affine forward pass. Store the result in out. You   #\n","    # will need to reshape the input into rows.                               #\n","    ###########################################################################\n","    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","    N = x.shape[0]\n","    D = np.prod(x.shape[1:])\n","\n","    x_input = x.reshape(N, D)\n","\n","    out = x_input @ w + b\n","\n","    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    ###########################################################################\n","    #                             END OF YOUR CODE                            #\n","    ###########################################################################\n","    cache = (x, w, b)\n","    return out, cache\n","\n","\n","def affine_backward(dout, cache):\n","    \"\"\"\n","    Computes the backward pass for an affine layer.\n","\n","    Inputs:\n","    - dout: Upstream derivative, of shape (N, M)\n","    - cache: Tuple of:\n","      - x: Input data, of shape (N, d_1, ... d_k)\n","      - w: Weights, of shape (D, M)\n","      - b: Biases, of shape (M,)\n","\n","    Returns a tuple of:\n","    - dx: Gradient with respect to x, of shape (N, d1, ..., d_k)\n","    - dw: Gradient with respect to w, of shape (D, M)\n","    - db: Gradient with respect to b, of shape (M,)\n","    \"\"\"\n","    x, w, b = cache\n","    dx, dw, db = None, None, None\n","    ###########################################################################\n","    # TODO: Implement the affine backward pass.                               #\n","    ###########################################################################\n","    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","    N, M = dout.shape\n","\n","    dx = dout @ w.T\n","    dx = dx.reshape(*x.shape)\n","\n","    D = np.prod(x.shape[1:])\n","    x_input = x.reshape(N, D)\n","\n","    dw = x_input.T @ dout\n","\n","    db = dout.sum(axis=0)\n","\n","    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    ###########################################################################\n","    #                             END OF YOUR CODE                            #\n","    ###########################################################################\n","    return dx, dw, db\n","\n","\n","def relu_forward(x):\n","    \"\"\"\n","    Computes the forward pass for a layer of rectified linear units (ReLUs).\n","\n","    Input:\n","    - x: Inputs, of any shape\n","\n","    Returns a tuple of:\n","    - out: Output, of the same shape as x\n","    - cache: x\n","    \"\"\"\n","    out = None\n","    ###########################################################################\n","    # TODO: Implement the ReLU forward pass.                                  #\n","    ###########################################################################\n","    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","    out = np.where(x<0, 0, x)\n","\n","    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    ###########################################################################\n","    #                             END OF YOUR CODE                            #\n","    ###########################################################################\n","    cache = x\n","    return out, cache\n","\n","\n","def relu_backward(dout, cache):\n","    \"\"\"\n","    Computes the backward pass for a layer of rectified linear units (ReLUs).\n","\n","    Input:\n","    - dout: Upstream derivatives, of any shape\n","    - cache: Input x, of same shape as dout\n","\n","    Returns:\n","    - dx: Gradient with respect to x\n","    \"\"\"\n","    dx, x = None, cache\n","    ###########################################################################\n","    # TODO: Implement the ReLU backward pass.                                 #\n","    ###########################################################################\n","    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","    dx = np.where(x<0, 0, 1) * dout\n","\n","    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    ###########################################################################\n","    #                             END OF YOUR CODE                            #\n","    ###########################################################################\n","    return dx\n","\n","\n","def batchnorm_forward(x, gamma, beta, bn_param):\n","    \"\"\"\n","    Forward pass for batch normalization.\n","\n","    During training the sample mean and (uncorrected) sample variance are\n","    computed from minibatch statistics and used to normalize the incoming data.\n","    During training we also keep an exponentially decaying running mean of the\n","    mean and variance of each feature, and these averages are used to normalize\n","    data at test-time.\n","\n","    At each timestep we update the running averages for mean and variance using\n","    an exponential decay based on the momentum parameter:\n","\n","    running_mean = momentum * running_mean + (1 - momentum) * sample_mean\n","    running_var = momentum * running_var + (1 - momentum) * sample_var\n","\n","    Note that the batch normalization paper suggests a different test-time\n","    behavior: they compute sample mean and variance for each feature using a\n","    large number of training images rather than using a running average. For\n","    this implementation we have chosen to use running averages instead since\n","    they do not require an additional estimation step; the torch7\n","    implementation of batch normalization also uses running averages.\n","\n","    Input:\n","    - x: Data of shape (N, D)\n","    - gamma: Scale parameter of shape (D,)\n","    - beta: Shift paremeter of shape (D,)\n","    - bn_param: Dictionary with the following keys:\n","      - mode: 'train' or 'test'; required\n","      - eps: Constant for numeric stability\n","      - momentum: Constant for running mean / variance.\n","      - running_mean: Array of shape (D,) giving running mean of features\n","      - running_var Array of shape (D,) giving running variance of features\n","\n","    Returns a tuple of:\n","    - out: of shape (N, D)\n","    - cache: A tuple of values needed in the backward pass\n","    \"\"\"\n","    mode = bn_param[\"mode\"]\n","    eps = bn_param.get(\"eps\", 1e-5)\n","    momentum = bn_param.get(\"momentum\", 0.9)\n","\n","    N, D = x.shape\n","    running_mean = bn_param.get(\"running_mean\", np.zeros(D, dtype=x.dtype))\n","    running_var = bn_param.get(\"running_var\", np.zeros(D, dtype=x.dtype))\n","\n","    out, cache = None, None\n","    if mode == \"train\":\n","        #######################################################################\n","        # TODO: Implement the training-time forward pass for batch norm.      #\n","        # Use minibatch statistics to compute the mean and variance, use      #\n","        # these statistics to normalize the incoming data, and scale and      #\n","        # shift the normalized data using gamma and beta.                     #\n","        #                                                                     #\n","        # You should store the output in the variable out. Any intermediates  #\n","        # that you need for the backward pass should be stored in the cache   #\n","        # variable.                                                           #\n","        #                                                                     #\n","        # You should also use your computed sample mean and variance together #\n","        # with the momentum variable to update the running mean and running   #\n","        # variance, storing your result in the running_mean and running_var   #\n","        # variables.                                                          #\n","        #                                                                     #\n","        # Note that though you should be keeping track of the running         #\n","        # variance, you should normalize the data based on the standard       #\n","        # deviation (square root of variance) instead!                        #\n","        # Referencing the original paper (https://arxiv.org/abs/1502.03167)   #\n","        # might prove to be helpful.                                          #\n","        #######################################################################\n","        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","        # Batch normalization algorithm rewritten in the way to store intermediate\n","        # values in \"cache\" for backpropagation.\n","\n","        # Compute sample mean for each feature.\n","        xmean = x.mean(axis=0)\n","\n","        xmean_diff = x - xmean\n","\n","        xmean_diff_square = xmean_diff**2\n","\n","        # Compute sample variance for each feature.\n","        xvar = xmean_diff_square.mean(axis=0)\n","\n","        # Compute sample standard deviation for each feature.\n","        xstd = np.sqrt(xvar + eps)\n","\n","        xstd_inv = 1 / xstd\n","\n","        # Normalize.\n","        xhat = xmean_diff * xstd_inv\n","\n","        # Scale and shift.\n","        out = gamma * xhat + beta\n","\n","        # Update 'running_mean' and 'running_var'.\n","        running_mean = momentum * running_mean + (1 - momentum) * xmean\n","        running_var = momentum * running_var + (1 - momentum) * xvar\n","\n","        # Save intermediates needed for the backward pass.\n","        cache = {\n","          'xmean_diff': xmean_diff,\n","          'xvar': xvar,\n","          'eps': eps,\n","          'xstd': xstd,\n","          'xstd_inv': xstd_inv,\n","          'xhat': xhat,\n","          'gamma': gamma,\n","          'beta': beta\n","        }\n","\n","        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","        #######################################################################\n","        #                           END OF YOUR CODE                          #\n","        #######################################################################\n","    elif mode == \"test\":\n","        #######################################################################\n","        # TODO: Implement the test-time forward pass for batch normalization. #\n","        # Use the running mean and variance to normalize the incoming data,   #\n","        # then scale and shift the normalized data using gamma and beta.      #\n","        # Store the result in the out variable.                               #\n","        #######################################################################\n","        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","        # Normalize using 'running_mean' and 'running_var'.\n","        out = (x - running_mean) / (np.sqrt(running_var) + eps)\n","\n","        # Scale and shift.\n","        out = gamma * out + beta\n","\n","        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","        #######################################################################\n","        #                          END OF YOUR CODE                           #\n","        #######################################################################\n","    else:\n","        raise ValueError('Invalid forward batchnorm mode \"%s\"' % mode)\n","\n","    # Store the updated running means back into bn_param\n","    bn_param[\"running_mean\"] = running_mean\n","    bn_param[\"running_var\"] = running_var\n","\n","    return out, cache\n","\n","\n","def batchnorm_backward(dout, cache):\n","    \"\"\"\n","    Backward pass for batch normalization.\n","\n","    For this implementation, you should write out a computation graph for\n","    batch normalization on paper and propagate gradients backward through\n","    intermediate nodes.\n","\n","    Inputs:\n","    - dout: Upstream derivatives, of shape (N, D)\n","    - cache: Variable of intermediates from batchnorm_forward.\n","\n","    Returns a tuple of:\n","    - dx: Gradient with respect to inputs x, of shape (N, D)\n","    - dgamma: Gradient with respect to scale parameter gamma, of shape (D,)\n","    - dbeta: Gradient with respect to shift parameter beta, of shape (D,)\n","    \"\"\"\n","    dx, dgamma, dbeta = None, None, None\n","    ###########################################################################\n","    # TODO: Implement the backward pass for batch normalization. Store the    #\n","    # results in the dx, dgamma, and dbeta variables.                         #\n","    # Referencing the original paper (https://arxiv.org/abs/1502.03167)       #\n","    # might prove to be helpful.                                              #\n","    ###########################################################################\n","    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","    # In order to fully understand the backward pass, computational graph of\n","    # batch normalization layer must be drawn.\n","\n","    N, D = dout.shape\n","\n","    # Derivate from: out = xscaled * beta\n","    dbeta = dout.sum(axis=0)\n","\n","    # Derivate from: xscaled = xhat * gamma\n","    dgamma = dout * cache['xhat']\n","    dgamma = dgamma.sum(axis=0)\n","\n","    # Derivate from: xscaled = xhat * gamma\n","    d_xhat = dout * cache['gamma']\n","\n","    # Derivate from: xhat = xstd_inv * xmean_diff\n","    d_xstd_inv = cache['xmean_diff'] * d_xhat\n","    d_xstd_inv = d_xstd_inv.sum(axis=0)\n","\n","    # Derivate from: xstd_inv = 1 / xstd\n","    d_xstd = (-1 / cache['xstd']**2) * d_xstd_inv\n","\n","    # Derivate from: xstd = sqrt(xvar + eps)\n","    d_xvar = (1 / (2 * np.sqrt(cache['xvar'] + cache['eps']))) * d_xstd\n","\n","    # Derivate from: xvar = xmean_diff_square.mean(axis=0)\n","    d_xmean_diff_square = d_xvar / N\n","\n","    # Derivate from: xmean_diff_square = xmean_diff ^ 2\n","    d_xmean_diff_2 = (2 * cache['xmean_diff']) * d_xmean_diff_square\n","\n","    # Derivate from: xstd_inv * xmean_diff\n","    d_xmean_diff_1 = cache['xstd_inv'] * d_xhat\n","\n","    # Sum the two derivates.\n","    d_xmean_diff = d_xmean_diff_1 + d_xmean_diff_2\n","\n","    # Derivate from: d_xmean_diff = x - xmean\n","    d_xmean = - d_xmean_diff.sum(axis=0)\n","\n","    # Derivate from: xmean = x.mean(axis=0)\n","    d_x2 = d_xmean / N\n","\n","    # Derivate from: d_xmean_diff = x - xmean\n","    d_x1 = d_xmean_diff\n","\n","    # Sum the two derivates.\n","    dx = d_x1 + d_x2\n","\n","    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    ###########################################################################\n","    #                             END OF YOUR CODE                            #\n","    ###########################################################################\n","\n","    return dx, dgamma, dbeta\n","\n","\n","def batchnorm_backward_alt(dout, cache):\n","    \"\"\"\n","    Alternative backward pass for batch normalization.\n","\n","    For this implementation you should work out the derivatives for the batch\n","    normalizaton backward pass on paper and simplify as much as possible. You\n","    should be able to derive a simple expression for the backward pass.\n","    See the jupyter notebook for more hints.\n","\n","    Note: This implementation should expect to receive the same cache variable\n","    as batchnorm_backward, but might not use all of the values in the cache.\n","\n","    Inputs / outputs: Same as batchnorm_backward\n","    \"\"\"\n","    dx, dgamma, dbeta = None, None, None\n","    ###########################################################################\n","    # TODO: Implement the backward pass for batch normalization. Store the    #\n","    # results in the dx, dgamma, and dbeta variables.                         #\n","    #                                                                         #\n","    # After computing the gradient with respect to the centered inputs, you   #\n","    # should be able to compute gradients with respect to the inputs in a     #\n","    # single statement; our implementation fits on a single 80-character line.#\n","    ###########################################################################\n","    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","    N, D = dout.shape\n","\n","    # Unpack needed intermediates\n","    inv_var, xhat, gamma = cache['xstd_inv'], cache['xhat'], cache['gamma']\n","\n","    # Derivate from: out = xscaled * beta\n","    dbeta = dout.sum(axis=0)\n","\n","    # Derivate from: xscaled = xhat * gamma\n","    dgamma = np.sum(dout * xhat, axis=0)\n","\n","    # Derivate from: xscaled = xhat * gamma\n","    d_xhat = dout * gamma\n","\n","    # Result formula from work-out the derivatives for the batch normalization\n","    # backward pass on paper, including simplification.\n","    dx = inv_var / N * \\\n","        (N*d_xhat - d_xhat.sum(axis=0) - xhat*np.sum(d_xhat*xhat, axis=0))\n","\n","    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    ###########################################################################\n","    #                             END OF YOUR CODE                            #\n","    ###########################################################################\n","\n","    return dx, dgamma, dbeta\n","\n","\n","def layernorm_forward(x, gamma, beta, ln_param):\n","    \"\"\"\n","    Forward pass for layer normalization.\n","\n","    During both training and test-time, the incoming data is normalized per data-point,\n","    before being scaled by gamma and beta parameters identical to that of batch normalization.\n","\n","    Note that in contrast to batch normalization, the behavior during train and test-time for\n","    layer normalization are identical, and we do not need to keep track of running averages\n","    of any sort.\n","\n","    Input:\n","    - x: Data of shape (N, D)\n","    - gamma: Scale parameter of shape (D,)\n","    - beta: Shift paremeter of shape (D,)\n","    - ln_param: Dictionary with the following keys:\n","        - eps: Constant for numeric stability\n","\n","    Returns a tuple of:\n","    - out: of shape (N, D)\n","    - cache: A tuple of values needed in the backward pass\n","    \"\"\"\n","    out, cache = None, None\n","    eps = ln_param.get(\"eps\", 1e-5)\n","    ###########################################################################\n","    # TODO: Implement the training-time forward pass for layer norm.          #\n","    # Normalize the incoming data, and scale and  shift the normalized data   #\n","    #  using gamma and beta.                                                  #\n","    # HINT: this can be done by slightly modifying your training-time         #\n","    # implementation of  batch normalization, and inserting a line or two of  #\n","    # well-placed code. In particular, can you think of any matrix            #\n","    # transformations you could perform, that would enable you to copy over   #\n","    # the batch norm code and leave it almost unchanged?                      #\n","    ###########################################################################\n","    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","    # Layer normalization algorithm rewritten in the way to store intermediate\n","    # values in \"cache\" for backpropagation.\n","\n","    # Compute the mean for each datapoint.\n","    xmean = x.mean(axis=1, keepdims=True)\n","\n","    xmean_diff = x - xmean\n","\n","    xmean_diff_square = xmean_diff**2\n","\n","    # Compute the variance for each datapoint.\n","    xvar = xmean_diff_square.mean(axis=1, keepdims=True)\n","\n","    # Compute the standard deviation for each datapoint.\n","    xstd = np.sqrt(xvar + eps)\n","\n","    xstd_inv = 1 / xstd\n","\n","    # Normalize.\n","    xhat = xmean_diff * xstd_inv\n","\n","    # Scale and shift.\n","    out = gamma * xhat + beta\n","\n","    # Save intermediates needed for the backward pass.\n","    cache = {\n","      'xstd_inv': xstd_inv,\n","      'xhat': xhat,\n","      'gamma': gamma\n","    }\n","\n","    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    ###########################################################################\n","    #                             END OF YOUR CODE                            #\n","    ###########################################################################\n","    return out, cache\n","\n","\n","def layernorm_backward(dout, cache):\n","    \"\"\"\n","    Backward pass for layer normalization.\n","\n","    For this implementation, you can heavily rely on the work you've done already\n","    for batch normalization.\n","\n","    Inputs:\n","    - dout: Upstream derivatives, of shape (N, D)\n","    - cache: Variable of intermediates from layernorm_forward.\n","\n","    Returns a tuple of:\n","    - dx: Gradient with respect to inputs x, of shape (N, D)\n","    - dgamma: Gradient with respect to scale parameter gamma, of shape (D,)\n","    - dbeta: Gradient with respect to shift parameter beta, of shape (D,)\n","    \"\"\"\n","    dx, dgamma, dbeta = None, None, None\n","    ###########################################################################\n","    # TODO: Implement the backward pass for layer norm.                       #\n","    #                                                                         #\n","    # HINT: this can be done by slightly modifying your training-time         #\n","    # implementation of batch normalization. The hints to the forward pass    #\n","    # still apply!                                                            #\n","    ###########################################################################\n","    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","    N, D = dout.shape\n","\n","    # Unpack needed intermediates\n","    inv_var, xhat, gamma = cache['xstd_inv'], cache['xhat'], cache['gamma']\n","\n","    # Derivate from: out = xscaled * beta\n","    dbeta = dout.sum(axis=0)\n","\n","    # Derivate from: xscaled = xhat * gamma\n","    dgamma = np.sum(dout * xhat, axis=0)\n","\n","    # Derivate from: xscaled = xhat * gamma\n","    d_xhat = dout * gamma\n","\n","    # Formula obtained by slightly modifying the one used in 'batchnorm_backward_alt'\n","    dx = inv_var / D * \\\n","        (D*d_xhat - d_xhat.sum(axis=1, keepdims=True) - \\\n","        xhat*np.sum(d_xhat*xhat, axis=1, keepdims=True))\n","\n","    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    ###########################################################################\n","    #                             END OF YOUR CODE                            #\n","    ###########################################################################\n","    return dx, dgamma, dbeta\n","\n","\n","def dropout_forward(x, dropout_param):\n","    \"\"\"\n","    Performs the forward pass for (inverted) dropout.\n","\n","    Inputs:\n","    - x: Input data, of any shape\n","    - dropout_param: A dictionary with the following keys:\n","      - p: Dropout parameter. We keep each neuron output with probability p.\n","      - mode: 'test' or 'train'. If the mode is train, then perform dropout;\n","        if the mode is test, then just return the input.\n","      - seed: Seed for the random number generator. Passing seed makes this\n","        function deterministic, which is needed for gradient checking but not\n","        in real networks.\n","\n","    Outputs:\n","    - out: Array of the same shape as x.\n","    - cache: tuple (dropout_param, mask). In training mode, mask is the dropout\n","      mask that was used to multiply the input; in test mode, mask is None.\n","\n","    NOTE: Please implement **inverted** dropout, not the vanilla version of dropout.\n","    See http://cs231n.github.io/neural-networks-2/#reg for more details.\n","\n","    NOTE 2: Keep in mind that p is the probability of **keep** a neuron\n","    output; this might be contrary to some sources, where it is referred to\n","    as the probability of dropping a neuron output.\n","    \"\"\"\n","    p, mode = dropout_param[\"p\"], dropout_param[\"mode\"]\n","    if \"seed\" in dropout_param:\n","        np.random.seed(dropout_param[\"seed\"])\n","\n","    mask = None\n","    out = None\n","\n","    if mode == \"train\":\n","        #######################################################################\n","        # TODO: Implement training phase forward pass for inverted dropout.   #\n","        # Store the dropout mask in the mask variable.                        #\n","        #######################################################################\n","        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","        mask = (np.random.rand(*x.shape) < p) / p\n","        out = x * mask\n","\n","        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","        #######################################################################\n","        #                           END OF YOUR CODE                          #\n","        #######################################################################\n","    elif mode == \"test\":\n","        #######################################################################\n","        # TODO: Implement the test phase forward pass for inverted dropout.   #\n","        #######################################################################\n","        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","        out = x\n","\n","        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","        #######################################################################\n","        #                            END OF YOUR CODE                         #\n","        #######################################################################\n","\n","    cache = (dropout_param, mask)\n","    out = out.astype(x.dtype, copy=False)\n","\n","    return out, cache\n","\n","\n","def dropout_backward(dout, cache):\n","    \"\"\"\n","    Perform the backward pass for (inverted) dropout.\n","\n","    Inputs:\n","    - dout: Upstream derivatives, of any shape\n","    - cache: (dropout_param, mask) from dropout_forward.\n","    \"\"\"\n","    dropout_param, mask = cache\n","    mode = dropout_param[\"mode\"]\n","\n","    dx = None\n","    if mode == \"train\":\n","        #######################################################################\n","        # TODO: Implement training phase backward pass for inverted dropout   #\n","        #######################################################################\n","        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","        dx = mask * dout\n","\n","        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","        #######################################################################\n","        #                          END OF YOUR CODE                           #\n","        #######################################################################\n","    elif mode == \"test\":\n","        dx = dout\n","    return dx\n","\n","\n","def conv_forward_naive(x, w, b, conv_param):\n","    \"\"\"\n","    A naive implementation of the forward pass for a convolutional layer.\n","\n","    The input consists of N data points, each with C channels, height H and\n","    width W. We convolve each input with F different filters, where each filter\n","    spans all C channels and has height HH and width WW.\n","\n","    Input:\n","    - x: Input data of shape (N, C, H, W)\n","    - w: Filter weights of shape (F, C, HH, WW)\n","    - b: Biases, of shape (F,)\n","    - conv_param: A dictionary with the following keys:\n","      - 'stride': The number of pixels between adjacent receptive fields in the\n","        horizontal and vertical directions.\n","      - 'pad': The number of pixels that will be used to zero-pad the input.\n","\n","\n","    During padding, 'pad' zeros should be placed symmetrically (i.e equally on both sides)\n","    along the height and width axes of the input. Be careful not to modfiy the original\n","    input x directly.\n","\n","    Returns a tuple of:\n","    - out: Output data, of shape (N, F, H', W') where H' and W' are given by\n","      H' = 1 + (H + 2 * pad - HH) / stride\n","      W' = 1 + (W + 2 * pad - WW) / stride\n","    - cache: (x, w, b, conv_param)\n","    \"\"\"\n","    out = None\n","    ###########################################################################\n","    # TODO: Implement the convolutional forward pass.                         #\n","    # Hint: you can use the function np.pad for padding.                      #\n","    ###########################################################################\n","    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","    # Unpack 'stride' and 'pad' values.\n","    stride, pad = conv_param['stride'], conv_param['pad']\n","\n","    # Get different size information from 'x' and 'w'.\n","    N, C, H, W = x.shape\n","    F, _, HH, WW = w.shape\n","\n","    # Define padding filter: Pad only the width and height of each 'x' sample.\n","    npad = ((0, 0), (0, 0), (pad, pad), (pad, pad))\n","    # Apply the padding filter to 'x'.\n","    xpad = np.pad(x, npad)\n","\n","    # Compute H' and W'.\n","    Hprime = int(1 + (H + 2 * pad - HH) / stride)\n","    Wprime = int(1 + (W + 2 * pad - WW) / stride)\n","\n","    # Initialize the output.\n","    out = np.zeros((N, F, Hprime, Wprime))\n","\n","    # Maximum start point in width and height from which the convolution\n","    # can be applied, to not exceed 'x' datapoints size.\n","    Hmax_xpad = 1 + (H + 2 * pad - HH)\n","    Wmax_xpad = 1 + (W + 2 * pad - WW)\n","\n","    # Loop over all datapoints (samples).\n","    # Track current sample number (xnum) and the sample itself (xsample).\n","    for xnum, xsample in enumerate(xpad):\n","      # Loop over all weights (filters).\n","      # Track current filter number (wnum) and the filter itself (wfilter).\n","      for wnum, wfilter in enumerate(w):\n","        # Loop over 'xsample' width, where the convolution can be applied.\n","        # Take into account the padding, move per 'stride'.\n","        for iout, i in enumerate(range(0, Hmax_xpad, stride)):\n","          # Loop over 'xsample' height, where the convolution can be applied.\n","          # Take into account the padding, move per 'stride'.\n","          for jout, j in enumerate(range(0, Wmax_xpad, stride)):\n","            # 'xsample' part on which 'wfilter' will be applied.\n","            xpart = xsample[:, i:i+HH, j:j+WW]\n","            # Apply the convolution 'wfilter' on 'xpart', and add the bias.\n","            out[xnum, wnum, iout, jout] = (wfilter * xpart).sum() + b[wnum]\n","\n","    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    ###########################################################################\n","    #                             END OF YOUR CODE                            #\n","    ###########################################################################\n","    cache = (x, w, b, conv_param)\n","    return out, cache\n","\n","\n","def conv_backward_naive(dout, cache):\n","    \"\"\"\n","    A naive implementation of the backward pass for a convolutional layer.\n","\n","    Inputs:\n","    - dout: Upstream derivatives.\n","    - cache: A tuple of (x, w, b, conv_param) as in conv_forward_naive\n","\n","    Returns a tuple of:\n","    - dx: Gradient with respect to x\n","    - dw: Gradient with respect to w\n","    - db: Gradient with respect to b\n","    \"\"\"\n","    dx, dw, db = None, None, None\n","    ###########################################################################\n","    # TODO: Implement the convolutional backward pass.                        #\n","    ###########################################################################\n","    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","    x, w, b, conv_param = cache\n","\n","    # Get different size information from 'x', 'w' and 'dout'.\n","    N, C, H, W = x.shape\n","    F, _, HH, WW = w.shape\n","    _, _, Hprime, Wprime = dout.shape\n","\n","    # Unpack 'stride' and 'pad' values.\n","    stride, pad = conv_param['stride'], conv_param['pad']\n","\n","    # Initialize 'dx', 'dw' and 'db'.\n","    dx, dw, db = np.zeros(x.shape), np.zeros(w.shape), np.zeros(b.shape)\n","\n","    # Define padding filter: Pad only the width and height of each 'dx' sample.\n","    npad = ((0, 0), (0, 0), (pad, pad), (pad, pad))\n","    # Apply the padding filter to 'dx', as 'out' was computed using padded 'x'.\n","    dxpad = np.pad(dx, npad)\n","    # Apply the padding filter to 'x', which will be used to compute 'dw'.\n","    xpad = np.pad(x, npad)\n","\n","    # Maximum start point in width and height from which the convolution\n","    # can be applied, to not exceed the 'dx' size.\n","    Hmax_xpad = 1 + (H + 2 * pad - HH)\n","    Wmax_xpad = 1 + (W + 2 * pad - WW)\n","\n","    # Loop over the output (result of application of the convolutional\n","    # filters on 'x') derivative. Track datapoint number (xnum) to which\n","    # current output derivate (xdout) belongs.\n","    for xnum, xdout in enumerate(dout):\n","      # Loop over 'xdout'.\n","      for dnum, dfilter in enumerate(xdout):\n","        # Loop over 'dfilter' lines (height).\n","        for i, idx in enumerate(range(0, Hmax_xpad, stride)):\n","          # Loop over 'xsample' height, where the convolution can be applied.\n","          # Take into account the padding, move per 'stride'.\n","          for j, jdx in enumerate(range(0, Wmax_xpad, stride)):\n","            # Get the current 'dfilter' value.\n","            dfilterval = dfilter[i, j]\n","            # Update 'db', 'dxpad' and 'dw'.\n","            db[dnum] += dfilterval\n","            # Note that we update 'dxpad' instead of 'dx'.\n","            dxpad[xnum, :, idx:idx+HH, jdx:jdx+WW] += w[dnum, ...] * dfilterval\n","            # Note that we update 'dw' using 'xpad' instead of 'x'.\n","            dw[dnum, ...] += xpad[xnum, :, idx:idx+HH, jdx:jdx+WW] * dfilterval\n","\n","    # Shrink the padding from 'dx' lines/columns, in order to match 'x' size.\n","    dx = dxpad[..., pad:-pad, pad:-pad]\n","\n","    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    ###########################################################################\n","    #                             END OF YOUR CODE                            #\n","    ###########################################################################\n","    return dx, dw, db\n","\n","\n","def max_pool_forward_naive(x, pool_param):\n","    \"\"\"\n","    A naive implementation of the forward pass for a max-pooling layer.\n","\n","    Inputs:\n","    - x: Input data, of shape (N, C, H, W)\n","    - pool_param: dictionary with the following keys:\n","      - 'pool_height': The height of each pooling region\n","      - 'pool_width': The width of each pooling region\n","      - 'stride': The distance between adjacent pooling regions\n","\n","    No padding is necessary here. Output size is given by\n","\n","    Returns a tuple of:\n","    - out: Output data, of shape (N, C, H', W') where H' and W' are given by\n","      H' = 1 + (H - pool_height) / stride\n","      W' = 1 + (W - pool_width) / stride\n","    - cache: (x, pool_param)\n","    \"\"\"\n","    out = None\n","    ###########################################################################\n","    # TODO: Implement the max-pooling forward pass                            #\n","    ###########################################################################\n","    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","    # Unpack max-pooling layer parameters: 'width', 'height' and 'stride'.\n","    pool_width, pool_height = pool_param['pool_width'], pool_param['pool_height']\n","    stride = pool_param['stride']\n","\n","    # Get different size information from 'x'.\n","    N, C, H, W = x.shape\n","\n","    # Compute H' and W'.\n","    Hprime = int(1 + (H - pool_height) / stride)\n","    Wprime = int(1 + (W - pool_width) / stride)\n","\n","    # Initialize the output.\n","    out = np.zeros((N, C, Hprime, Wprime))\n","\n","    # Maximum start point in width and height from which the max-pooling\n","    # can be applied, to not exceed 'x' datapoints size.\n","    Hmaxx = 1 + (H - pool_height)\n","    Wmaxx = 1 + (W - pool_width)\n","\n","    # Loop over all datapoints (samples).\n","    # Track current sample number (xnum) and the sample itself (xsample).\n","    for xnum, xsample in enumerate(x):\n","      # Loop over all channels.\n","      # Track current channel number (cnum) and the channel itself (channel).\n","      for cnum, channel in enumerate(xsample):\n","        # Loop over 'channel' width, where the max-pooling can be applied.\n","        for iout, i in enumerate(range(0, Hmaxx, stride)):\n","          # Loop over 'channel' height, where the max-pooling can be applied.\n","          for jout, j in enumerate(range(0, Wmaxx, stride)):\n","            # 'channel' part on which max-pooling will be applied.\n","            chpart = channel[i:i+pool_height, j:j+pool_width]\n","            # Get the maximum value in 'chpart'\n","            out[xnum, cnum, iout, jout] = chpart.max()\n","\n","    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    ###########################################################################\n","    #                             END OF YOUR CODE                            #\n","    ###########################################################################\n","    cache = (x, pool_param)\n","    return out, cache\n","\n","\n","def max_pool_backward_naive(dout, cache):\n","    \"\"\"\n","    A naive implementation of the backward pass for a max-pooling layer.\n","\n","    Inputs:\n","    - dout: Upstream derivatives\n","    - cache: A tuple of (x, pool_param) as in the forward pass.\n","\n","    Returns:\n","    - dx: Gradient with respect to x\n","    \"\"\"\n","    dx = None\n","    ###########################################################################\n","    # TODO: Implement the max-pooling backward pass                           #\n","    ###########################################################################\n","    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","    # Unpack max-pooling layer cache.\n","    x, pool_param = cache\n","\n","    # Unpack max-pooling layer parameters: 'width', 'height' and 'stride'.\n","    pool_width, pool_height = pool_param['pool_width'], pool_param['pool_height']\n","    stride = pool_param['stride']\n","\n","    # Get different size information from 'x'.\n","    N, C, H, W = x.shape\n","\n","    # Compute H' and W'.\n","    Hprime = int(1 + (H - pool_height) / stride)\n","    Wprime = int(1 + (W - pool_width) / stride)\n","\n","    # Initialize 'dx' (which has the same shape as 'x').\n","    dx = np.zeros(x.shape)\n","\n","    # Maximum start point in width and height, to not exceed 'x' datapoints size.\n","    Hmaxx = 1 + (H - pool_height)\n","    Wmaxx = 1 + (W - pool_width)\n","\n","    # Loop over all datapoints (samples).\n","    # Track current sample number (xnum) and the sample itself (xsample).\n","    for xnum, xsample in enumerate(x):\n","      # Loop over all channels.\n","      # Track current channel number (cnum) and the channel itself (channel).\n","      for cnum, channel in enumerate(xsample):\n","        # Loop over 'channel' width.\n","        for idout, i in enumerate(range(0, Hmaxx, stride)):\n","          # Loop over 'channel' height.\n","          for jdout, j in enumerate(range(0, Wmaxx, stride)):\n","            # 'channel' part from which the maximum coordinates will be retrieved.\n","            chpart = channel[i:i+pool_height, j:j+pool_width]\n","            # Get the maximum coordinates: Line (maxln) and column (maxcol)\n","            maxln, maxcol = np.unravel_index(np.argmax(chpart), chpart.shape)\n","            # Assign the current maximum from 'dout' to 'dx', based on\n","            # the 'maximum coordinates' retrieved previously.\n","            dx[xnum, cnum, i+maxln, j+maxcol] = dout[xnum, cnum, idout, jdout]\n","\n","    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    ###########################################################################\n","    #                             END OF YOUR CODE                            #\n","    ###########################################################################\n","    return dx\n","\n","\n","def spatial_batchnorm_forward(x, gamma, beta, bn_param):\n","    \"\"\"\n","    Computes the forward pass for spatial batch normalization.\n","\n","    Inputs:\n","    - x: Input data of shape (N, C, H, W)\n","    - gamma: Scale parameter, of shape (C,)\n","    - beta: Shift parameter, of shape (C,)\n","    - bn_param: Dictionary with the following keys:\n","      - mode: 'train' or 'test'; required\n","      - eps: Constant for numeric stability\n","      - momentum: Constant for running mean / variance. momentum=0 means that\n","        old information is discarded completely at every time step, while\n","        momentum=1 means that new information is never incorporated. The\n","        default of momentum=0.9 should work well in most situations.\n","      - running_mean: Array of shape (D,) giving running mean of features\n","      - running_var Array of shape (D,) giving running variance of features\n","\n","    Returns a tuple of:\n","    - out: Output data, of shape (N, C, H, W)\n","    - cache: Values needed for the backward pass\n","    \"\"\"\n","    out, cache = None, None\n","\n","    ###########################################################################\n","    # TODO: Implement the forward pass for spatial batch normalization.       #\n","    #                                                                         #\n","    # HINT: You can implement spatial batch normalization by calling the      #\n","    # vanilla version of batch normalization you implemented above.           #\n","    # Your implementation should be very short; ours is less than five lines. #\n","    ###########################################################################\n","    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","    # N, C, H, W = Datapoints, Channels, Height, Width\n","    N, C, H, W = x.shape\n","\n","    # Transpose 'x', from (N, C, H, W) shape to (N, H, W, C). Then, reshape it\n","    # to (N*H*W, C). That is, forward Spatial BN is applied per color channel.\n","    x = x.transpose(0, 2, 3, 1).reshape(N*H*W, C)\n","\n","    out, cache = batchnorm_forward(x, gamma, beta, bn_param)\n","\n","    # Reshape and transpose 'out' to match the 'x' shape.\n","    out = out.reshape(N, H, W, C).transpose(0, 3, 1, 2)\n","\n","    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    ###########################################################################\n","    #                             END OF YOUR CODE                            #\n","    ###########################################################################\n","\n","    return out, cache\n","\n","\n","def spatial_batchnorm_backward(dout, cache):\n","    \"\"\"\n","    Computes the backward pass for spatial batch normalization.\n","\n","    Inputs:\n","    - dout: Upstream derivatives, of shape (N, C, H, W)\n","    - cache: Values from the forward pass\n","\n","    Returns a tuple of:\n","    - dx: Gradient with respect to inputs, of shape (N, C, H, W)\n","    - dgamma: Gradient with respect to scale parameter, of shape (C,)\n","    - dbeta: Gradient with respect to shift parameter, of shape (C,)\n","    \"\"\"\n","    dx, dgamma, dbeta = None, None, None\n","\n","    ###########################################################################\n","    # TODO: Implement the backward pass for spatial batch normalization.      #\n","    #                                                                         #\n","    # HINT: You can implement spatial batch normalization by calling the      #\n","    # vanilla version of batch normalization you implemented above.           #\n","    # Your implementation should be very short; ours is less than five lines. #\n","    ###########################################################################\n","    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","    N, C, H, W = dout.shape\n","\n","    # Transpose 'dout', from (N, C, H, W) shape to (N, H, W, C). Then, reshape it\n","    # to (N*H*W, C). That is, backward Spatial BN is applied per color channel.\n","    dout = dout.transpose(0, 2, 3, 1).reshape(N*H*W, C)\n","\n","    dx, dgamma, dbeta = batchnorm_backward_alt(dout, cache)\n","\n","    # Reshape and transpose 'dx' to match the 'dout' shape.\n","    dx = dx.reshape(N, H, W, C).transpose(0, 3, 1, 2)\n","\n","    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    ###########################################################################\n","    #                             END OF YOUR CODE                            #\n","    ###########################################################################\n","\n","    return dx, dgamma, dbeta\n","\n","\n","def spatial_groupnorm_forward(x, gamma, beta, G, gn_param):\n","    \"\"\"\n","    Computes the forward pass for spatial group normalization.\n","    In contrast to layer normalization, group normalization splits each entry\n","    in the data into G contiguous pieces, which it then normalizes independently.\n","    Per feature shifting and scaling are then applied to the data, in a manner identical to that of batch normalization and layer normalization.\n","\n","    Inputs:\n","    - x: Input data of shape (N, C, H, W)\n","    - gamma: Scale parameter, of shape (C,)\n","    - beta: Shift parameter, of shape (C,)\n","    - G: Integer mumber of groups to split into, should be a divisor of C\n","    - gn_param: Dictionary with the following keys:\n","      - eps: Constant for numeric stability\n","\n","    Returns a tuple of:\n","    - out: Output data, of shape (N, C, H, W)\n","    - cache: Values needed for the backward pass\n","    \"\"\"\n","    out, cache = None, None\n","    eps = gn_param.get(\"eps\", 1e-5)\n","    ###########################################################################\n","    # TODO: Implement the forward pass for spatial group normalization.       #\n","    # This will be extremely similar to the layer norm implementation.        #\n","    # In particular, think about how you could transform the matrix so that   #\n","    # the bulk of the code is similar to both train-time batch normalization  #\n","    # and layer normalization!                                                #\n","    ###########################################################################\n","    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","    N, C, H, W = x.shape\n","\n","    # In spatial group norm, channels (with their height and width) are\n","    # devided into groups, each one contains C/G channels (integer value).\n","    # So, each group ('elsgrp') contains C/G channels with their H and W.\n","    elsgrp = C//G * H * W\n","\n","    # Reshape 'x' to match the logic behind the spatial group norm.\n","    # Note that in the original implementation (https://arxiv.org/abs/1803.08494),\n","    # 'x' was reshaped into (N, G, C//G, H, W), however, my implementation is also\n","    # correct. It allows to lighten per-axis mean computations, as we perform it on\n","    # the 2nd axis only, instead of (2, 3, 4) as in the original implementation.\n","    x = x.reshape([N, G, elsgrp])\n","\n","    # Compute the mean for each group.\n","    xmean = x.mean(axis=2, keepdims=True)\n","\n","    xmean_diff = x - xmean\n","\n","    xmean_diff_square = xmean_diff**2\n","\n","    # Compute the variance for each group.\n","    xvar = xmean_diff_square.mean(axis=2, keepdims=True)\n","\n","    # Compute the standard deviation for each group.\n","    xstd = np.sqrt(xvar + eps)\n","\n","    xstd_inv = 1 / xstd\n","\n","    # Normalize.\n","    xhat = xmean_diff * xstd_inv\n","\n","    # Reshape 'xhat' to its original shape, from (N, G, elsgrp) to (N, C, H, W).\n","    xhat = xhat.reshape(N, C, H, W)\n","\n","    # Scale and shift.\n","    out = gamma * xhat + beta\n","\n","    cache = {\n","      'G': G,\n","      'xstd_inv': xstd_inv,\n","      'xhat': xhat,\n","      'gamma': gamma\n","    }\n","\n","    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    ###########################################################################\n","    #                             END OF YOUR CODE                            #\n","    ###########################################################################\n","    return out, cache\n","\n","\n","def spatial_groupnorm_backward(dout, cache):\n","    \"\"\"\n","    Computes the backward pass for spatial group normalization.\n","\n","    Inputs:\n","    - dout: Upstream derivatives, of shape (N, C, H, W)\n","    - cache: Values from the forward pass\n","\n","    Returns a tuple of:\n","    - dx: Gradient with respect to inputs, of shape (N, C, H, W)\n","    - dgamma: Gradient with respect to scale parameter, of shape (C,)\n","    - dbeta: Gradient with respect to shift parameter, of shape (C,)\n","    \"\"\"\n","    dx, dgamma, dbeta = None, None, None\n","\n","    ###########################################################################\n","    # TODO: Implement the backward pass for spatial group normalization.      #\n","    # This will be extremely similar to the layer norm implementation.        #\n","    ###########################################################################\n","    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","    N, C, H, W = dout.shape\n","\n","    # Unpack needed intermediates\n","    inv_var, xhat, gamma = cache['xstd_inv'], cache['xhat'], cache['gamma']\n","    G = cache['G']\n","\n","    # Derivate from: out = xscaled * beta\n","    dbeta = dout.sum(axis=(0, 2, 3), keepdims=True)\n","\n","    # Derivate from: xscaled = xhat * gamma\n","    dgamma = np.sum(dout * xhat, axis=(0, 2, 3), keepdims=True)\n","\n","    # Derivate from: xscaled = xhat * gamma\n","    d_xhat = dout * gamma\n","\n","    # Similarly to the forward pass, compute number of elements per group.\n","    elsgrp = C//G * H * W\n","\n","    # Similarly to the forward pass, reshape 'xhat' and 'd_xhat' to match the logic\n","    # behind spatial group norm.\n","    xhat = xhat.reshape([N, G, elsgrp])\n","    d_xhat = d_xhat.reshape([N, G, elsgrp])\n","\n","    # Formula obtained by slightly modifying the one used in 'layernorm_backward'\n","    dx = inv_var / elsgrp * \\\n","        (elsgrp*d_xhat - d_xhat.sum(axis=2, keepdims=True) - \\\n","        xhat*np.sum(d_xhat*xhat, axis=2, keepdims=True))\n","\n","    # Reshape 'dx' to match original 'x' shape, from (N, G, elsgrp) to (N, C, H, W).\n","    dx = dx.reshape(N, C, H, W)\n","\n","    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    ###########################################################################\n","    #                             END OF YOUR CODE                            #\n","    ###########################################################################\n","    return dx, dgamma, dbeta\n","\n","\n","def svm_loss(x, y):\n","    \"\"\"\n","    Computes the loss and gradient using for multiclass SVM classification.\n","\n","    Inputs:\n","    - x: Input data, of shape (N, C) where x[i, j] is the score for the jth\n","      class for the ith input.\n","    - y: Vector of labels, of shape (N,) where y[i] is the label for x[i] and\n","      0 <= y[i] < C\n","\n","    Returns a tuple of:\n","    - loss: Scalar giving the loss\n","    - dx: Gradient of the loss with respect to x\n","    \"\"\"\n","    N = x.shape[0]\n","    correct_class_scores = x[np.arange(N), y]\n","    margins = np.maximum(0, x - correct_class_scores[:, np.newaxis] + 1.0)\n","    margins[np.arange(N), y] = 0\n","    loss = np.sum(margins) / N\n","    num_pos = np.sum(margins > 0, axis=1)\n","    dx = np.zeros_like(x)\n","    dx[margins > 0] = 1\n","    dx[np.arange(N), y] -= num_pos\n","    dx /= N\n","    return loss, dx\n","\n","\n","def softmax_loss(x, y):\n","    \"\"\"\n","    Computes the loss and gradient for softmax classification.\n","\n","    Inputs:\n","    - x: Input data, of shape (N, C) where x[i, j] is the score for the jth\n","      class for the ith input.\n","    - y: Vector of labels, of shape (N,) where y[i] is the label for x[i] and\n","      0 <= y[i] < C\n","\n","    Returns a tuple of:\n","    - loss: Scalar giving the loss\n","    - dx: Gradient of the loss with respect to x\n","    \"\"\"\n","    shifted_logits = x - np.max(x, axis=1, keepdims=True)\n","    Z = np.sum(np.exp(shifted_logits), axis=1, keepdims=True)\n","    log_probs = shifted_logits - np.log(Z)\n","    probs = np.exp(log_probs)\n","    N = x.shape[0]\n","    loss = -np.sum(log_probs[np.arange(N), y]) / N\n","    dx = probs.copy()\n","    dx[np.arange(N), y] -= 1\n","    dx /= N\n","    return loss, dx\n"],"metadata":{"id":"cT1uUMlXoaRc"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### fc_net"],"metadata":{"id":"YfxOdO-DotzP"}},{"cell_type":"code","source":["from builtins import range\n","from builtins import object\n","import numpy as np\n","\n","from ..layers import *\n","from ..layer_utils import *\n","\n","\n","class TwoLayerNet(object):\n","    \"\"\"\n","    A two-layer fully-connected neural network with ReLU nonlinearity and\n","    softmax loss that uses a modular layer design. We assume an input dimension\n","    of D, a hidden dimension of H, and perform classification over C classes.\n","\n","    The architecure should be affine - relu - affine - softmax.\n","\n","    Note that this class does not implement gradient descent; instead, it\n","    will interact with a separate Solver object that is responsible for running\n","    optimization.\n","\n","    The learnable parameters of the model are stored in the dictionary\n","    self.params that maps parameter names to numpy arrays.\n","    \"\"\"\n","\n","    def __init__(\n","        self,\n","        input_dim=1 * 28 * 28,\n","        hidden_dim=100,\n","        num_classes=10,\n","        weight_scale=1e-3,\n","        reg=0.0,\n","    ):\n","        \"\"\"\n","        Initialize a new network.\n","\n","        Inputs:\n","        - input_dim: An integer giving the size of the input\n","        - hidden_dim: An integer giving the size of the hidden layer\n","        - num_classes: An integer giving the number of classes to classify\n","        - weight_scale: Scalar giving the standard deviation for random\n","          initialization of the weights.\n","        - reg: Scalar giving L2 regularization strength.\n","        \"\"\"\n","        self.params = {}\n","        self.reg = reg\n","\n","        ############################################################################\n","        # TODO: Initialize the weights and biases of the two-layer net. Weights    #\n","        # should be initialized from a Gaussian centered at 0.0 with               #\n","        # standard deviation equal to weight_scale, and biases should be           #\n","        # initialized to zero. All weights and biases should be stored in the      #\n","        # dictionary self.params, with first layer weights                         #\n","        # and biases using the keys 'W1' and 'b1' and second layer                 #\n","        # weights and biases using the keys 'W2' and 'b2'.                         #\n","        ############################################################################\n","        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","        self.params['b1'] = np.zeros(hidden_dim)\n","        self.params['b2'] = np.zeros(num_classes)\n","\n","        self.params['W1'] = np.random.normal(0.0, weight_scale, (input_dim, hidden_dim))\n","        self.params['W2'] = np.random.normal(0.0, weight_scale, (hidden_dim, num_classes))\n","\n","        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","        ############################################################################\n","        #                             END OF YOUR CODE                             #\n","        ############################################################################\n","\n","    def loss(self, X, y=None):\n","        \"\"\"\n","        Compute loss and gradient for a minibatch of data.\n","\n","        Inputs:\n","        - X: Array of input data of shape (N, d_1, ..., d_k)\n","        - y: Array of labels, of shape (N,). y[i] gives the label for X[i].\n","\n","        Returns:\n","        If y is None, then run a test-time forward pass of the model and return:\n","        - scores: Array of shape (N, C) giving classification scores, where\n","          scores[i, c] is the classification score for X[i] and class c.\n","\n","        If y is not None, then run a training-time forward and backward pass and\n","        return a tuple of:\n","        - loss: Scalar value giving the loss\n","        - grads: Dictionary with the same keys as self.params, mapping parameter\n","          names to gradients of the loss with respect to those parameters.\n","        \"\"\"\n","        scores = None\n","        ############################################################################\n","        # TODO: Implement the forward pass for the two-layer net, computing the    #\n","        # class scores for X and storing them in the scores variable.              #\n","        ############################################################################\n","        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","        z1, z1_cache = affine_relu_forward(X, self.params['W1'], self.params['b1'])\n","\n","        a2, a2_cache = affine_forward(z1, self.params['W2'], self.params['b2'])\n","\n","        scores = a2\n","\n","        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","        ############################################################################\n","        #                             END OF YOUR CODE                             #\n","        ############################################################################\n","\n","        # If y is None then we are in test mode so just return scores\n","        if y is None:\n","            return scores\n","\n","        loss, grads = 0, {}\n","        ############################################################################\n","        # TODO: Implement the backward pass for the two-layer net. Store the loss  #\n","        # in the loss variable and gradients in the grads dictionary. Compute data #\n","        # loss using softmax, and make sure that grads[k] holds the gradients for  #\n","        # self.params[k]. Don't forget to add L2 regularization!                   #\n","        #                                                                          #\n","        # NOTE: To ensure that your implementation matches ours and you pass the   #\n","        # automated tests, make sure that your L2 regularization includes a factor #\n","        # of 0.5 to simplify the expression for the gradient.                      #\n","        ############################################################################\n","        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","        loss, d_scores = softmax_loss(scores, y)\n","\n","        reg_weights = np.sum(self.params['W1']**2) + np.sum(self.params['W2']**2)\n","\n","        loss += 0.5 * self.reg * reg_weights\n","\n","        d_z1, d_W2, d_b2 = affine_backward(d_scores, a2_cache)\n","\n","        d_x, d_W1, d_b1 = affine_relu_backward(d_z1, z1_cache)\n","\n","        grads['b2'] = d_b2\n","        grads['W2'] = d_W2 + self.reg * self.params['W2']\n","\n","        grads['b1'] = d_b1\n","        grads['W1'] = d_W1 + self.reg * self.params['W1']\n","\n","        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","        ############################################################################\n","        #                             END OF YOUR CODE                             #\n","        ############################################################################\n","\n","        return loss, grads\n","\n","\n","############################################################################\n","# Define additional helper layer which takes into account the Batch/Layer  #\n","# Normalization (Forward and Backward pass).                               #\n","############################################################################\n","def affine_norm_relu_forward(x, w, b, gamma, beta, n_param, normalization):\n","    \"\"\"\n","    Convenience layer that perorms an affine transform followed by a Batch/Layer\n","    Normalization, and a ReLU\n","\n","    Inputs:\n","    - x: Input to the affine layer\n","    - w, b: Weights for the affine layer\n","    - gamma, beta, n_param: Batch/Layer Normalization parameters\n","    - normalization: Indicate the Normalization type, Batch or Layer\n","\n","    Returns a tuple of:\n","    - out: Output from the ReLU\n","    - cache: Object to give to the backward pass\n","    \"\"\"\n","    a1, fc_cache = affine_forward(x, w, b)\n","\n","    if normalization == 'batchnorm':\n","      a2, norm_cache = batchnorm_forward(a1, gamma, beta, n_param)\n","\n","    elif normalization == 'layernorm':\n","      a2, norm_cache = layernorm_forward(a1, gamma, beta, n_param)\n","\n","    out, relu_cache = relu_forward(a2)\n","    cache = (fc_cache, norm_cache, relu_cache)\n","\n","    return out, cache\n","\n","\n","def affine_norm_relu_backward(dout, cache, normalization):\n","    \"\"\"\n","    Backward pass for the affine-norm-relu convenience layer\n","    \"\"\"\n","    fc_cache, n_cache, relu_cache = cache\n","\n","    da1 = relu_backward(dout, relu_cache)\n","\n","    if normalization == 'batchnorm':\n","      da2, dgamma, dbeta = batchnorm_backward_alt(da1, n_cache)\n","\n","    elif normalization == 'layernorm':\n","      da2, dgamma, dbeta = layernorm_backward(da1, n_cache)\n","\n","    dx, dw, db = affine_backward(da2, fc_cache)\n","\n","    return dx, dw, db, dgamma, dbeta\n","\n","############################################################################\n","#                        END OF THE ADDITIONAL CODE                        #\n","############################################################################\n","\n","\n","class FullyConnectedNet(object):\n","    \"\"\"\n","    A fully-connected neural network with an arbitrary number of hidden layers,\n","    ReLU nonlinearities, and a softmax loss function. This will also implement\n","    dropout and batch/layer normalization as options. For a network with L layers,\n","    the architecture will be\n","\n","    {affine - [batch/layer norm] - relu - [dropout]} x (L - 1) - affine - softmax\n","\n","    where batch/layer normalization and dropout are optional, and the {...} block is\n","    repeated L - 1 times.\n","\n","    Similar to the TwoLayerNet above, learnable parameters are stored in the\n","    self.params dictionary and will be learned using the Solver class.\n","    \"\"\"\n","\n","    def __init__(\n","        self,\n","        hidden_dims,\n","        input_dim=1 * 28 * 28,\n","        num_classes=10,\n","        dropout=1,\n","        normalization=None,\n","        reg=0.0,\n","        weight_scale=1e-2,\n","        dtype=np.float32,\n","        seed=None,\n","    ):\n","        \"\"\"\n","        Initialize a new FullyConnectedNet.\n","\n","        Inputs:\n","        - hidden_dims: A list of integers giving the size of each hidden layer.\n","        - input_dim: An integer giving the size of the input.\n","        - num_classes: An integer giving the number of classes to classify.\n","        - dropout: Scalar between 0 and 1 giving dropout strength. If dropout=1 then\n","          the network should not use dropout at all.\n","        - normalization: What type of normalization the network should use. Valid values\n","          are \"batchnorm\", \"layernorm\", or None for no normalization (the default).\n","        - reg: Scalar giving L2 regularization strength.\n","        - weight_scale: Scalar giving the standard deviation for random\n","          initialization of the weights.\n","        - dtype: A numpy datatype object; all computations will be performed using\n","          this datatype. float32 is faster but less accurate, so you should use\n","          float64 for numeric gradient checking.\n","        - seed: If not None, then pass this random seed to the dropout layers. This\n","          will make the dropout layers deteriminstic so we can gradient check the\n","          model.\n","        \"\"\"\n","        self.normalization = normalization\n","        self.use_dropout = dropout != 1\n","        self.reg = reg\n","        self.num_layers = 1 + len(hidden_dims)\n","        self.dtype = dtype\n","        self.params = {}\n","\n","        ############################################################################\n","        # TODO: Initialize the parameters of the network, storing all values in    #\n","        # the self.params dictionary. Store weights and biases for the first layer #\n","        # in W1 and b1; for the second layer use W2 and b2, etc. Weights should be #\n","        # initialized from a normal distribution centered at 0 with standard       #\n","        # deviation equal to weight_scale. Biases should be initialized to zero.   #\n","        #                                                                          #\n","        # When using batch normalization, store scale and shift parameters for the #\n","        # first layer in gamma1 and beta1; for the second layer use gamma2 and     #\n","        # beta2, etc. Scale parameters should be initialized to ones and shift     #\n","        # parameters should be initialized to zeros.                               #\n","        ############################################################################\n","        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","        hidden_dims.append(num_classes)\n","\n","        for layer_idx, layer_dim in enumerate(hidden_dims):\n","          if layer_idx == 0:\n","            prev_layer_dim = input_dim\n","          else:\n","            prev_layer_dim = hidden_dims[layer_idx-1]\n","\n","          weights_name = 'W' + str(layer_idx+1)\n","          weights_dim = (prev_layer_dim, layer_dim)\n","\n","          biases_name = 'b' + str(layer_idx+1)\n","\n","          self.params[weights_name] = np.random.normal(0.0, weight_scale, weights_dim)\n","          self.params[biases_name] = np.zeros(layer_dim)\n","\n","          # Add Batch/Layer Normalization layer parameter initialization (Beta and Gamma).\n","          # Don't apply Batch/Layer Normalization on the output layer.\n","          if self.normalization and layer_idx < self.num_layers-1:\n","            self.params['gamma' + str(layer_idx+1)] = np.ones(layer_dim)\n","            self.params['beta' + str(layer_idx+1)] = np.zeros(layer_dim)\n","\n","        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","        ############################################################################\n","        #                             END OF YOUR CODE                             #\n","        ############################################################################\n","\n","        # When using dropout we need to pass a dropout_param dictionary to each\n","        # dropout layer so that the layer knows the dropout probability and the mode\n","        # (train / test). You can pass the same dropout_param to each dropout layer.\n","        self.dropout_param = {}\n","        if self.use_dropout:\n","            self.dropout_param = {\"mode\": \"train\", \"p\": dropout}\n","            if seed is not None:\n","                self.dropout_param[\"seed\"] = seed\n","\n","        # With batch normalization we need to keep track of running means and\n","        # variances, so we need to pass a special bn_param object to each batch\n","        # normalization layer. You should pass self.bn_params[0] to the forward pass\n","        # of the first batch normalization layer, self.bn_params[1] to the forward\n","        # pass of the second batch normalization layer, etc.\n","        self.bn_params = []\n","        if self.normalization == \"batchnorm\":\n","            self.bn_params = [{\"mode\": \"train\"} for i in range(self.num_layers - 1)]\n","        if self.normalization == \"layernorm\":\n","            self.bn_params = [{} for i in range(self.num_layers - 1)]\n","\n","        # Cast all parameters to the correct datatype\n","        for k, v in self.params.items():\n","            self.params[k] = v.astype(dtype)\n","\n","    def loss(self, X, y=None):\n","        \"\"\"\n","        Compute loss and gradient for the fully-connected net.\n","\n","        Input / output: Same as TwoLayerNet above.\n","        \"\"\"\n","        X = X.astype(self.dtype)\n","        mode = \"test\" if y is None else \"train\"\n","\n","        # Set train/test mode for batchnorm params and dropout param since they\n","        # behave differently during training and testing.\n","        if self.use_dropout:\n","            self.dropout_param[\"mode\"] = mode\n","        if self.normalization == \"batchnorm\":\n","            for bn_param in self.bn_params:\n","                bn_param[\"mode\"] = mode\n","        scores = None\n","        ############################################################################\n","        # TODO: Implement the forward pass for the fully-connected net, computing  #\n","        # the class scores for X and storing them in the scores variable.          #\n","        #                                                                          #\n","        # When using dropout, you'll need to pass self.dropout_param to each       #\n","        # dropout forward pass.                                                    #\n","        #                                                                          #\n","        # When using batch normalization, you'll need to pass self.bn_params[0] to #\n","        # the forward pass for the first batch normalization layer, pass           #\n","        # self.bn_params[1] to the forward pass for the second batch normalization #\n","        # layer, etc.                                                              #\n","        ############################################################################\n","        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","        cache_layers, dp_cache_layers, last_output = [], [], None\n","        reg_weights = 0\n","\n","        for layer_idx in range(self.num_layers):\n","          weights = self.params['W' + str(layer_idx+1)]\n","          biases = self.params['b' + str(layer_idx+1)]\n","\n","          if layer_idx == 0:\n","            last_output = X\n","\n","          if layer_idx == self.num_layers-1:\n","            last_output, cache = affine_forward(last_output, weights, biases)\n","\n","          else:\n","            if self.normalization:\n","              last_output, cache = affine_norm_relu_forward(last_output,\n","                                    weights, biases,\n","                                    self.params['gamma' + str(layer_idx+1)],\n","                                    self.params['beta' + str(layer_idx+1)],\n","                                    self.bn_params[layer_idx],\n","                                    self.normalization)\n","            else:\n","              last_output, cache = affine_relu_forward(last_output, weights, biases)\n","\n","            if self.use_dropout:\n","              last_output, dp_cache = dropout_forward(last_output, self.dropout_param)\n","              dp_cache_layers.append(dp_cache)\n","\n","          cache_layers.append(cache)\n","\n","          reg_weights += np.sum(weights**2)\n","\n","        scores = last_output\n","\n","        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","        ############################################################################\n","        #                             END OF YOUR CODE                             #\n","        ############################################################################\n","\n","        # If test mode return early\n","        if mode == \"test\":\n","            return scores\n","\n","        loss, grads = 0.0, {}\n","        ############################################################################\n","        # TODO: Implement the backward pass for the fully-connected net. Store the #\n","        # loss in the loss variable and gradients in the grads dictionary. Compute #\n","        # data loss using softmax, and make sure that grads[k] holds the gradients #\n","        # for self.params[k]. Don't forget to add L2 regularization!               #\n","        #                                                                          #\n","        # When using batch/layer normalization, you don't need to regularize the scale   #\n","        # and shift parameters.                                                    #\n","        #                                                                          #\n","        # NOTE: To ensure that your implementation matches ours and you pass the   #\n","        # automated tests, make sure that your L2 regularization includes a factor #\n","        # of 0.5 to simplify the expression for the gradient.                      #\n","        ############################################################################\n","        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","        loss, d_scores = softmax_loss(scores, y)\n","        loss += 0.5 * self.reg * reg_weights\n","\n","        d_layer = None\n","\n","        for layer_idx in range(self.num_layers-1, -1, -1):\n","          weights_name = 'W' + str(layer_idx+1)\n","          biases_name = 'b' + str(layer_idx+1)\n","\n","          if layer_idx == self.num_layers-1:\n","            d_layer, d_W, d_b = affine_backward(d_scores, cache_layers[layer_idx])\n","          else:\n","            if self.use_dropout:\n","              d_layer = dropout_backward(d_layer, dp_cache_layers[layer_idx])\n","\n","            if self.normalization:\n","              d_layer, d_W, d_b, d_gamma, d_beta = affine_norm_relu_backward(d_layer,\n","                                                    cache_layers[layer_idx],\n","                                                    self.normalization)\n","              grads['gamma' + str(layer_idx+1)] = d_gamma\n","              grads['beta' + str(layer_idx+1)] = d_beta\n","\n","            else:\n","              d_layer, d_W, d_b = affine_relu_backward(d_layer, cache_layers[layer_idx])\n","\n","          grads[weights_name] = d_W + self.reg * self.params[weights_name]\n","          grads[biases_name] = d_b\n","\n","        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","        ############################################################################\n","        #                             END OF YOUR CODE                             #\n","        ############################################################################\n","\n","        return loss, grads\n"],"metadata":{"id":"cFSZPQEVozXe"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### optim"],"metadata":{"id":"zoTHBk5Co4OK"}},{"cell_type":"code","source":["import numpy as np\n","\n","\"\"\"\n","This file implements various first-order update rules that are commonly used\n","for training neural networks. Each update rule accepts current weights and the\n","gradient of the loss with respect to those weights and produces the next set of\n","weights. Each update rule has the same interface:\n","\n","def update(w, dw, config=None):\n","\n","Inputs:\n","  - w: A numpy array giving the current weights.\n","  - dw: A numpy array of the same shape as w giving the gradient of the\n","    loss with respect to w.\n","  - config: A dictionary containing hyperparameter values such as learning\n","    rate, momentum, etc. If the update rule requires caching values over many\n","    iterations, then config will also hold these cached values.\n","\n","Returns:\n","  - next_w: The next point after the update.\n","  - config: The config dictionary to be passed to the next iteration of the\n","    update rule.\n","\n","NOTE: For most update rules, the default learning rate will probably not\n","perform well; however the default values of the other hyperparameters should\n","work well for a variety of different problems.\n","\n","For efficiency, update rules may perform in-place updates, mutating w and\n","setting next_w equal to w.\n","\"\"\"\n","\n","\n","def sgd(w, dw, config=None):\n","    \"\"\"\n","    Performs vanilla stochastic gradient descent.\n","\n","    config format:\n","    - learning_rate: Scalar learning rate.\n","    \"\"\"\n","    if config is None:\n","        config = {}\n","    config.setdefault(\"learning_rate\", 1e-2)\n","\n","    w -= config[\"learning_rate\"] * dw\n","    return w, config\n","\n","\n","def sgd_momentum(w, dw, config=None):\n","    \"\"\"\n","    Performs stochastic gradient descent with momentum.\n","\n","    config format:\n","    - learning_rate: Scalar learning rate.\n","    - momentum: Scalar between 0 and 1 giving the momentum value.\n","      Setting momentum = 0 reduces to sgd.\n","    - velocity: A numpy array of the same shape as w and dw used to store a\n","      moving average of the gradients.\n","    \"\"\"\n","    if config is None:\n","        config = {}\n","    config.setdefault(\"learning_rate\", 1e-2)\n","    config.setdefault(\"momentum\", 0.9)\n","    v = config.get(\"velocity\", np.zeros_like(w))\n","\n","    next_w = None\n","    ###########################################################################\n","    # TODO: Implement the momentum update formula. Store the updated value in #\n","    # the next_w variable. You should also use and update the velocity v.     #\n","    ###########################################################################\n","    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","    v = config[\"momentum\"] * v - config[\"learning_rate\"] * dw\n","    next_w = w + v\n","\n","    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    ###########################################################################\n","    #                             END OF YOUR CODE                            #\n","    ###########################################################################\n","    config[\"velocity\"] = v\n","\n","    return next_w, config\n","\n","\n","def rmsprop(w, dw, config=None):\n","    \"\"\"\n","    Uses the RMSProp update rule, which uses a moving average of squared\n","    gradient values to set adaptive per-parameter learning rates.\n","\n","    config format:\n","    - learning_rate: Scalar learning rate.\n","    - decay_rate: Scalar between 0 and 1 giving the decay rate for the squared\n","      gradient cache.\n","    - epsilon: Small scalar used for smoothing to avoid dividing by zero.\n","    - cache: Moving average of second moments of gradients.\n","    \"\"\"\n","    if config is None:\n","        config = {}\n","    config.setdefault(\"learning_rate\", 1e-2)\n","    config.setdefault(\"decay_rate\", 0.99)\n","    config.setdefault(\"epsilon\", 1e-8)\n","    config.setdefault(\"cache\", np.zeros_like(w))\n","\n","    next_w = None\n","    ###########################################################################\n","    # TODO: Implement the RMSprop update formula, storing the next value of w #\n","    # in the next_w variable. Don't forget to update cache value stored in    #\n","    # config['cache'].                                                        #\n","    ###########################################################################\n","    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","    # Each equation was written in two lines (note \"\\\" in the end) for readability.\n","    config[\"cache\"] = config[\"decay_rate\"] * config[\"cache\"] \\\n","                      + (1 - config[\"decay_rate\"]) * dw**2\n","\n","    next_w = w - config[\"learning_rate\"] * dw \\\n","              / (np.sqrt(config[\"cache\"]) + config[\"epsilon\"])\n","\n","    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    ###########################################################################\n","    #                             END OF YOUR CODE                            #\n","    ###########################################################################\n","\n","    return next_w, config\n","\n","\n","def adam(w, dw, config=None):\n","    \"\"\"\n","    Uses the Adam update rule, which incorporates moving averages of both the\n","    gradient and its square and a bias correction term.\n","\n","    config format:\n","    - learning_rate: Scalar learning rate.\n","    - beta1: Decay rate for moving average of first moment of gradient.\n","    - beta2: Decay rate for moving average of second moment of gradient.\n","    - epsilon: Small scalar used for smoothing to avoid dividing by zero.\n","    - m: Moving average of gradient.\n","    - v: Moving average of squared gradient.\n","    - t: Iteration number.\n","    \"\"\"\n","    if config is None:\n","        config = {}\n","    config.setdefault(\"learning_rate\", 1e-3)\n","    config.setdefault(\"beta1\", 0.9)\n","    config.setdefault(\"beta2\", 0.999)\n","    config.setdefault(\"epsilon\", 1e-8)\n","    config.setdefault(\"m\", np.zeros_like(w))\n","    config.setdefault(\"v\", np.zeros_like(w))\n","    config.setdefault(\"t\", 0)\n","\n","    next_w = None\n","    ###########################################################################\n","    # TODO: Implement the Adam update formula, storing the next value of w in #\n","    # the next_w variable. Don't forget to update the m, v, and t variables   #\n","    # stored in config.                                                       #\n","    #                                                                         #\n","    # NOTE: In order to match the reference output, please modify t _before_  #\n","    # using it in any calculations.                                           #\n","    ###########################################################################\n","    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","    # Increment iteration counter.\n","    config[\"t\"] += 1\n","\n","    config[\"m\"] = config[\"beta1\"]*config[\"m\"] + (1-config[\"beta1\"])*dw\n","    mt = config[\"m\"] / (1-config[\"beta1\"]**config[\"t\"])\n","    config[\"v\"] = config[\"beta2\"]*config[\"v\"] + (1-config[\"beta2\"])*(dw**2)\n","    vt = config[\"v\"] / (1-config[\"beta2\"]**config[\"t\"])\n","    next_w = w - config[\"learning_rate\"] * mt / (np.sqrt(vt) + config[\"epsilon\"])\n","\n","    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    ###########################################################################\n","    #                             END OF YOUR CODE                            #\n","    ###########################################################################\n","\n","    return next_w, config\n"],"metadata":{"id":"iMBo3ChApmQC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### cnn"],"metadata":{"id":"5DSQLLt_prJx"}},{"cell_type":"code","source":["from builtins import object\n","import numpy as np\n","\n","from ..layers import *\n","from ..fast_layers import *\n","from ..layer_utils import *\n","\n","\n","class ThreeLayerConvNet(object):\n","    \"\"\"\n","    A three-layer convolutional network with the following architecture:\n","\n","    conv - relu - 2x2 max pool - affine - relu - affine - softmax\n","\n","    The network operates on minibatches of data that have shape (N, C, H, W)\n","    consisting of N images, each with height H and width W and with C input\n","    channels.\n","    \"\"\"\n","\n","    def __init__(\n","        self,\n","        input_dim=(1, 28, 28),\n","        num_filters=32,\n","        filter_size=3,\n","        hidden_dim=100,\n","        num_classes=10,\n","        weight_scale=1e-3,\n","        reg=0.0,\n","        dtype=np.float32,\n","    ):\n","        \"\"\"\n","        Initialize a new network.\n","\n","        Inputs:\n","        - input_dim: Tuple (C, H, W) giving size of input data\n","        - num_filters: Number of filters to use in the convolutional layer\n","        - filter_size: Width/height of filters to use in the convolutional layer\n","        - hidden_dim: Number of units to use in the fully-connected hidden layer\n","        - num_classes: Number of scores to produce from the final affine layer.\n","        - weight_scale: Scalar giving standard deviation for random initialization\n","          of weights.\n","        - reg: Scalar giving L2 regularization strength\n","        - dtype: numpy datatype to use for computation.\n","        \"\"\"\n","        self.params = {}\n","        self.reg = reg\n","        self.dtype = dtype\n","\n","        ############################################################################\n","        # TODO: Initialize weights and biases for the three-layer convolutional    #\n","        # network. Weights should be initialized from a Gaussian centered at 0.0   #\n","        # with standard deviation equal to weight_scale; biases should be          #\n","        # initialized to zero. All weights and biases should be stored in the      #\n","        #  dictionary self.params. Store weights and biases for the convolutional  #\n","        # layer using the keys 'W1' and 'b1'; use keys 'W2' and 'b2' for the       #\n","        # weights and biases of the hidden affine layer, and keys 'W3' and 'b3'    #\n","        # for the weights and biases of the output affine layer.                   #\n","        #                                                                          #\n","        # IMPORTANT: For this assignment, you can assume that the padding          #\n","        # and stride of the first convolutional layer are chosen so that           #\n","        # **the width and height of the input are preserved**. Take a look at      #\n","        # the start of the loss() function to see how that happens.                #\n","        ############################################################################\n","        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","        # W1 shape is: F, C, filter_size, filter_size.\n","        W1shape = (num_filters, input_dim[0], filter_size, filter_size)\n","        self.params['W1'] = np.random.normal(0.0, weight_scale, W1shape)\n","        self.params['b1'] = np.zeros(num_filters)\n","\n","        # Standard fully-connected net.\n","        # W2 shape (2nd part) is the flattening result of the conv-relu-pool layer output.\n","        inlayer_size = num_filters * input_dim[1]//2 * input_dim[2]//2\n","        W2shape = (inlayer_size, hidden_dim)\n","        self.params['W2'] = np.random.normal(0.0, weight_scale, W2shape)\n","        self.params['b2'] = np.zeros(hidden_dim)\n","\n","        W3shape = (hidden_dim, num_classes)\n","        self.params['W3'] = np.random.normal(0.0, weight_scale, W3shape)\n","        self.params['b3'] = np.zeros(num_classes)\n","\n","        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","        ############################################################################\n","        #                             END OF YOUR CODE                             #\n","        ############################################################################\n","\n","        for k, v in self.params.items():\n","            self.params[k] = v.astype(dtype)\n","\n","    def loss(self, X, y=None):\n","        # print(X.shape)\n","        X = X.reshape(-1, 1, 28, 28)\n","\n","        \"\"\"\n","        Evaluate loss and gradient for the three-layer convolutional network.\n","\n","        Input / output: Same API as TwoLayerNet in fc_net.py.\n","        \"\"\"\n","        W1, b1 = self.params[\"W1\"], self.params[\"b1\"]\n","        W2, b2 = self.params[\"W2\"], self.params[\"b2\"]\n","        W3, b3 = self.params[\"W3\"], self.params[\"b3\"]\n","\n","        # pass conv_param to the forward pass for the convolutional layer\n","        # Padding and stride chosen to preserve the input spatial size\n","        filter_size = W1.shape[2]\n","        conv_param = {\"stride\": 1, \"pad\": (filter_size - 1) // 2}\n","\n","        # pass pool_param to the forward pass for the max-pooling layer\n","        pool_param = {\"pool_height\": 2, \"pool_width\": 2, \"stride\": 2}\n","\n","        scores = None\n","        ############################################################################\n","        # TODO: Implement the forward pass for the three-layer convolutional net,  #\n","        # computing the class scores for X and storing them in the scores          #\n","        # variable.                                                                #\n","        #                                                                          #\n","        # Remember you can use the functions defined in cs231n/fast_layers.py and  #\n","        # cs231n/layer_utils.py in your implementation (already imported).         #\n","        ############################################################################\n","        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","        N, C, H, W = X.shape\n","        F = W1.shape[0]\n","\n","        # Compute the conv-relu-pool layer forward pass, and store the output in 'convout'.\n","        convout, conv_cache = conv_relu_pool_forward(X, W1, b1, conv_param, pool_param)\n","\n","        # Reshape 'convout' to match the hidden layer size (input to the Fully-Connected net).\n","        convout = convout.reshape(N, W2.shape[0])\n","        # Compute the hidden layer (affine-relu) forward pass, and store the output in 'hidout'.\n","        hidout, hid_cache = affine_relu_forward(convout, W2, b2)\n","\n","        # Compute the output layer (affine) forward pass, and store the output in 'scores'.\n","        scores, scores_cache = affine_forward(hidout, W3, b3)\n","\n","        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","        ############################################################################\n","        #                             END OF YOUR CODE                             #\n","        ############################################################################\n","\n","        if y is None:\n","            return scores\n","\n","        loss, grads = 0, {}\n","        ############################################################################\n","        # TODO: Implement the backward pass for the three-layer convolutional net, #\n","        # storing the loss and gradients in the loss and grads variables. Compute  #\n","        # data loss using softmax, and make sure that grads[k] holds the gradients #\n","        # for self.params[k]. Don't forget to add L2 regularization!               #\n","        #                                                                          #\n","        # NOTE: To ensure that your implementation matches ours and you pass the   #\n","        # automated tests, make sure that your L2 regularization includes a factor #\n","        # of 0.5 to simplify the expression for the gradient.                      #\n","        ############################################################################\n","        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\n","        # Compute the \"raw\" loss (without L2 regularization).\n","        loss, d_socres = softmax_loss(scores, y)\n","\n","        # Add L2 regularization to the loss\n","        reg_weights = np.sum(W1**2) + np.sum(W2**2) + np.sum(W3**2)\n","        loss += 0.5 * self.reg * reg_weights\n","\n","        # Backward pass implementation.\n","        # Compute the output layer (affine) backward pass.\n","        d_hidout, dw3, db3 = affine_backward(d_socres, scores_cache)\n","\n","        # Compute the hidden layer (affine-relu) backward pass.\n","        d_convout, dw2, db2 = affine_relu_backward(d_hidout, hid_cache)\n","\n","        # Reshape 'd_convout' to match 'convout' original (non-reshaped) size.\n","        d_convout = d_convout.reshape(N, F, H//2, W//2)\n","        # Compute the input layer (conv-relu-pool) backward pass.\n","        dx, dw1, db1 = conv_relu_pool_backward(d_convout, conv_cache)\n","\n","        # Assign the weights gradients (with their corresponding L2 regularization derivate).\n","        grads['W1'] = dw1 + self.reg * np.sum(W1)\n","        grads['W2'] = dw2 + self.reg * np.sum(W2)\n","        grads['W3'] = dw3 + self.reg * np.sum(W3)\n","        # Assign the biases gradients.\n","        grads['b1'], grads['b2'], grads['b3'] = db1, db2, db3\n","\n","        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","        ############################################################################\n","        #                             END OF YOUR CODE                             #\n","        ############################################################################\n","\n","        return loss, grads\n"],"metadata":{"id":"eEmSLp1dpu74"},"execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.4"},"colab":{"provenance":[{"file_id":"https://github.com/Daikon46/AISys_SamU/blob/main/Labs2-DL/lab_3/assignment3.ipynb","timestamp":1701870034754}],"collapsed_sections":["mCyBLvWFoPAp","YfxOdO-DotzP","zoTHBk5Co4OK","5DSQLLt_prJx"]}},"nbformat":4,"nbformat_minor":0}